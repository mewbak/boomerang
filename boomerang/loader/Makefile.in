######################################################
# File: Makefile
#
# Desc: Makefile for the Loader library files.
#   This loader is lightly adapted from the loader in UQBT
#   Purpose is to load the input binary file into memory, with calls to iterate through sections,
#	find entry points, symbols, etc.
#   The main library is BinaryFile, which calls eactly one of ElfBinaryFile etc as needed.
#
# Prerequisite libraries: none
#
######################################################

# $Revision: 1.37 $
# Note: gnu make is probably required (for patsubst etc)
# Whole make is dependent on finding the pattern *BinaryFile.cpp;
# a lib%.so file is made for each of these
# You should be able to add a simple loader without any changes to this
# Makefile, as long as you follow the naming convention <type>BinaryFile.*

# 10 Apr 02 - Mike: interface -> include; use util.so for str()
# 11 Apr 02 - Mike: Use lib%.so names and -l now; no "make install" any more
# 17 Apr 02 - Mike: Use $(shell pwd) to get an absolute path for BOOMDIR
# 26 Apr 02 - Mike: Make .so from .o files now
# 16 Jul 02 - Mike: Removed prog again; no longer needed for serialise code
# 20 Aug 02 - Icer: removed testLoader from being a dependecy of all:
# 01 Oct 02 - Mike: testLoader restored; removed ElfDetails
# 20 Jul 04 - Mike: Removed BOOMDIR (paths relative now)
# 12 Jul 05 - Mike: All use SymTab.o now
# 12 Apr 05 - Gerard: Structured

####################
# Compiler settings
#

C = gcc -Wall -g -O0
CC = g++ -Wall -g -O0
CXX=$(CC)

####################################
# Variables detected by ./configure
#

# HOST_WINDOWS is "yes" if the host OS is Cygwin or MinGW
HOST_WINDOWS = @HOST_WINDOWS@

# HOST_CYGWIN is "yes" if the host environment is Cygwin
HOST_CYGWIN = @HOST_CYGWIN@

# HOST_OSX is true if the hostOS is OS X (*-apple-darwin*)
HOST_OSX = @HOST_OSX@

# HOST_OSX_10_2 is true if the hostOS is OS X version 10.2.x (*-apple-darwin6*)
HOST_OSX_10_2 = @HOST_OSX_10_2@

# HOST_GNU_LD is true if the linker on this host machine is GNU
HOST_GNU_LD = @HOST_GNU_LD@

MAKEDEPEND=@MAKEDEPEND@

####################################
# Detection of OS specific settings
#

# LDL is -ldl if needed (Windows does not)
# EXEEXT is .exe for Windows
# DLLEXT is .dll for Windows and .so otherwise 
ifeq ($(HOST_WINDOWS), yes)
 LDL=
 EXEEXT=.exe
 DLLEXT=.dll
 WININCLUDE=-Iwin32make/include
 # RUNPATH is not needed on Windows 
 RUNPATH=
 COPYDLL=../libBinaryFile$(DLLEXT)
else # Non-Windows
 LDL=-ldl
 EXEEXT=
 DLLEXT=.so
 WININCLUDE=
 ifeq ($(HOST_GNU_LD), yes)
  RUNPATH=-Wl,-rpath -Wl,"lib"
 else
  ifeq ($(HOST_OSX), yes)
   RUNPATH=
  else		# Assume Solaris
   RUNPATH=-R"lib"
  endif
 endif
 COPYDLL=
endif

ifeq ($(HOST_OSX), yes)
 ifeq ($HOST_OSX_10_2), yes)
  SHARED=-dynamiclib
 else
  SHARED=-dynamic -dylib
 endif
 #-flat_namespace
 DLLEXT=.dylib
 RUNPATH=
else # Non-OS X
 SHARED=-shared
endif

######################
# Rules for compiling
#

LOADERS=ElfBinaryFile Win32BinaryFile ExeBinaryFile HpSomBinaryFile PalmBinaryFile 
ifeq ($(HOST_CYGWIN), no)
 # Until we can resolve the issue of compiling loader/MachOBinaryFile.cpp, don't attempt to make it so at least
 # the Cygwin hosted Boomerang can compile and use non-MachO loaders
 LOADERS+=MachOBinaryFile
endif
LOADERDLLS=$(patsubst %,../lib/lib%$(DLLEXT),$(LOADERS))
BASEDLL=../lib/libBinaryFile$(DLLEXT)
ALLDLLS=$(LOADERDLLS) $(BASEDLL)
ALLLIBS=$(patsubst %,-l%,$(LOADERS)) -lBinaryFile
ALLOBJS = $(patsubst %, %.o, $(LOADERS))
ALLOBJS += BinaryFile.o SymTab.o

all:    $(ALLDLLS) $(COPYDLL)

microX86dis.o: microX86dis.c
	$(C) -c -o $@ $(FPIC) $<

# Extra object files, etc
# These are target specific variables.
../lib/libWin32BinaryFile$(DLLEXT): EXTRAS = microX86dis.o
../lib/libWin32BinaryFile$(DLLEXT): microX86dis.o

../libBinaryFile$(DLLEXT): ../lib/libBinaryFile$(DLLEXT)
	cp $< $@

BinaryFile.o:		CCEXTRAS = -DBUILDING_LIBBINARYFILE
MachOBinaryFile.o:	CCEXTRAS = -I.

$(BASEDLL) : BinaryFile.o SymTab.o
	$(CC) -o $@ $(SHARED) BinaryFile.o SymTab.o $(OUTIMPLIB)

# This pattern generates all the main dependencies
$(LOADERDLLS): ../lib/lib%$(DLLEXT) : %.o $(BASEDLL)
	$(CC) -o $@ $(SHARED) $< SymTab.o $(EXTRAS) -lBinaryFile $(RUNPATH) -L../lib

# Compile all objects with -fPIC
$(ALLOBJS): %.o : %.cpp
	$(CC) -c $(FPIC) $(CCEXTRAS) -I../include -o $@ $<

####################
# Conditional rules
#

# Automatic generation of dependencies
ifdef MAKEDEPEND
 # automatic is better!
 depend: ${MAKEDEPEND}
	${MAKEDEPEND} -w120 -Y -I../include -I. -I../c -I../codegen -I../frontend *.cpp *.c > /dev/null 2>&1

 depend.in: ${MAKEDEPEND}
	${MAKEDEPEND} -fMakefile.in -w120 -Y -I../include -I. -I../c -I../codegen -I../frontend *.cpp *.c > /dev/null 2>&1
	
else
 depend:
	# You need the (X11) makedepend tool to generate dependencies
 depend.in:
	# You need the (X11) makedepend tool to generate dependencies
endif # ifdef MAKEDEPEND

###############
# Unit testing
#

testLoader$(EXEEXT): testLoader.o LoaderTest.o microX86dis.o BinaryFileFactory.o SymTab.o
	$(CC) -o $@ $^  -lcppunit $(ALLLIBS) $(RUNPATH) $(LDL) -L../lib

testLoader.o: testLoader.cpp
	$(CC) -c -o $@ -I../include $<

LoaderTest.o: LoaderTest.cpp LoaderTest.h ../include/BinaryFile.h SymTab.o
	$(CC) -c -o $@ -I../include $<

# Because of the relative paths, testLoader will only work from the parent
# directory...
test: all testLoader$(EXEEXT)
	cd .. ; loader/testLoader$(EXEEXT); cd -

##############
# Cleaning up
#

clean:
	-rm -f *.o $(ALLDLLS) $(COPYDLL) testLoader$(EXEEXT) $(BASEIMPLIB)

###############
# Dependencies
# Automatically generated by "make depend"
# DO NOT DELETE THIS LINE - It is used by makedepend

BinaryFile.o: ../include/BinaryFile.h ../include/types.h
BinaryFileFactory.o: ../include/BinaryFile.h ../include/types.h ElfBinaryFile.h SymTab.h Win32BinaryFile.h
BinaryFileFactory.o: PalmBinaryFile.h HpSomBinaryFile.h ExeBinaryFile.h ../include/config.h
BinaryFileStub.o: ../include/BinaryFileStub.h ../include/BinaryFile.h ../include/types.h
ElfBinaryFile.o: ElfBinaryFile.h ../include/BinaryFile.h ../include/types.h SymTab.h ../include/config.h
ExeBinaryFile.o: ExeBinaryFile.h ../include/BinaryFile.h ../include/types.h
HpSomBinaryFile.o: HpSomBinaryFile.h ../include/BinaryFile.h ../include/types.h SymTab.h
LoaderTest.o: LoaderTest.h ../include/BinaryFile.h ../include/types.h
MachOBinaryFile.o: ../include/BinaryFile.h ../include/types.h MachOBinaryFile.h ../include/config.h nlist.h
MachOBinaryFile.o: macho-apple.h objc/objc-class.h objc/objc.h objc/objc-api.h objc/objc-runtime.h
PalmBinaryFile.o: PalmBinaryFile.h ../include/BinaryFile.h ../include/types.h palmsystraps.h
SymTab.o: SymTab.h ../include/types.h
Win32BinaryFile.o: ../include/BinaryFile.h ../include/types.h Win32BinaryFile.h ../include/config.h
bffDump.o: ../include/BinaryFile.h ../include/types.h ElfBinaryFile.h SymTab.h ExeBinaryFile.h HpSomBinaryFile.h
bffDump.o: PalmBinaryFile.h Win32BinaryFile.h
dos4gwbinaryfile.o: ../include/BinaryFile.h ../include/types.h dos4gwbinaryfile.h ../include/config.h
testLoader.o: LoaderTest.h ../include/BinaryFile.h ../include/types.h
