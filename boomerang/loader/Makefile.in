######################################################
# File: Makefile
#
# Desc: Makefile for the Loader library files.
#   This loader is lightly adapted from the loader in UQBT
#   Purpose is to load the input binary file into memory, with calls to
#   iterate through sections, find entry points, symbols, etc.
#   The main library is BinaryFile, which calls eactly one of ElfBinaryFile
#   etc as needed.
#
# Prerequisite libraries: none
#
######################################################

# $Revision: 1.11 $
# Note: gnu make is probably required (for patsubst etc)
# Whole make is dependent on finding the pattern *BinaryFile.cpp;
# a lib%.so file is made for each of these
# You should be able to add a simple loader without any changes to this
# Makefile, as long as you follow the naming convention <type>BinaryFile.*

# 10 Apr 02 - Mike: interface -> include; use util.so for str()
# 11 Apr 02 - Mike: Use lib%.so names and -l now; no "make install" any more
# 17 Apr 02 - Mike: Use $(shell pwd) to get an absolute path for BOOMDIR
# 26 Apr 02 - Mike: Make .so from .o files now
# 16 Jul 02 - Mike: Removed prog again; no longer needed for serialise code
# 20 Aug 02 - Icer: removed testLoader from being a dependecy of all:
# 01 Oct 02 - Mike: testLoader restored; removed ElfDetails
# 20 Jul 04 - Mike: Removed BOOMDIR (paths relative now)

C = gcc -Wall -g -O4
CC = g++ -Wall -g -O4
CXX=$(CC)

ALLLIBSRC =  $(wildcard *BinaryFile.cpp)
ALLLIB =  $(patsubst %.cpp,../lib/lib%.so,$(ALLLIBSRC))
ALLOBJS = $(patsubst %.cpp, %.o, $(ALLLIBSRC))
ALLOBJS += SymTab.o

all:    $(ALLLIB)

# HOST_GNU_LD is true if the linker on this host machine is GNU
HOST_GNU_LD = @HOST_GNU_LD@

# LDL is -ldl if needed (Cygwin does not)
LDL = -ldl

ifeq ($(HOST_GNU_LD), yes)
RUNPATH=-Wl,-rpath -Wl,"lib"
else # Assume Solaris
RUNPATH=-R"lib"
endif


testLoader: testLoader.o LoaderTest.o microX86dis.o
	$(CC) -o $@ $^  -lcppunit -lBinaryFile $(RUNPATH) -L../lib

testLoader.o: testLoader.cpp
	$(CC) -c -o $@ -I../include $<

LoaderTest.o: LoaderTest.cpp LoaderTest.h
	$(CC) -c -o $@ -I../include $<

microX86dis.o: microX86dis.c
	$(C) -c -o $@ -fPIC $<

# Extra object files, etc
# These are target specific variables.
../lib/libElfBinaryFile.so:     EXTRAS = BinaryFile.o SymTab.o
../lib/libHpSomBinaryFile.so:   EXTRAS = BinaryFile.o SymTab.o
../lib/libBinaryFile.so:        EXTRAS =              $(LDL)
../lib/libWin32BinaryFile.so:   EXTRAS = BinaryFile.o microX86dis.o
../lib/libExeBinaryFile.so:     EXTRAS = BinaryFile.o
../lib/libPalmBinaryFile.so:    EXTRAS = BinaryFile.o

# This pattern generates all the main dependencies
$(ALLLIB): ../lib/lib%.so : %.o
	$(CC) -o $@ -shared $< $(EXTRAS) $(RUNPATH) -L../lib

# Compile all objects with -fPIC
$(ALLOBJS): %.o : %.cpp
	$(CC) -c -fPIC -I../include -o $@ $<

# Dependencies
../lib/libElfBinaryFile.so: SymTab.o
../lib/libWin32BinaryFile.so: microX86dis.o
SymTab.o:   SymTab.h
Win32BinaryFile.o: Win32BinaryFile.h ../include/BinaryFile.h
ElfBinaryFile.o: ElfBinaryFile.h ../include/BinaryFile.h



clean:
	rm -f *.o $(ALLLIB) testLoader

# Because of the relative paths, testLoader will only work from the parent
# directory...
test: all testLoader
	cd .. ; loader/testLoader; cd -

