#define YY_CHAR char
#line 1 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /home/emmerik/boomerang-repository/boomerang/db/sslscanner.cpp,v 1.26 2003-10-13 08:28:57 quantumg Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, stderr ); \
		(void) putc( '\n', stderr ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "sslscanner.l"
#define INITIAL 0
/*
 * Copyright (C) 1997, Shane Sendall
 * Copyright (C) 1998-2001, The University of Queensland
 * Copyright (C) 2001, Sun Microsystems, Inc
 *
 * See the file "LICENSE.TERMS" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *
 */
/*==============================================================================
 * FILE:          sslscanner.l
 * OVERVIEW:      Defines a scanner to parse the tokens of a Semantic
 *                Specification Language specification.
 *============================================================================*/
/* 
 * Shane Sendall (original C version) Dec 1997
 * Doug Simon (C++ version) Jan 1998
 * 29 Apr 02 - Mike: Mods for boomerang; removed &~, |~, and ^~ operators
 * 09 May 02 - Mike: ASSIGNSIZE is an num now
 */
#define YY_SSLScanner_FLEX_SCANNER
#line 34 "sslscanner.l"
#include <assert.h>
#if defined(_MSC_VER) && _MSC_VER <= 1200
#pragma warning(disable:4786)
#endif 

#include "sslscanner.h"
#include "sslscanner.h"
#line 61 "sslscanner.l"
#line 196 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

#define yy___text YY_SSLScanner_TEXT
#define yy___leng YY_SSLScanner_LENG
#define yy___in YY_SSLScanner_IN
#define yy___out YY_SSLScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_SSLScanner_INIT_BUFFER( yy_current_buffer, yy___in ); \
		YY_SSLScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_SSLScanner_DEBUG != 0
#define yy___flex_debug YY_SSLScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_SSLScanner_ECHO
#define yy___input YY_SSLScanner_INPUT
#define yy___fatal_error YY_SSLScanner_FATAL_ERROR
#define yy___wrap YY_SSLScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    FILE *yy_input_file;

    YY_SSLScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_SSLScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_SSLScanner_DEBUG != 0
int YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER yy_current_buffer
static YY_BUFFER_STATE yy_current_buffer;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_SSLScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_SSLScanner_CHAR *yy___text;
int yy___leng;

FILE *yy___in = (FILE *) 0, *yy___out = (FILE *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_SSLScanner_CHAR *yy_c_buf_p = (YY_SSLScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_SSLScanner_ECHO_NOCODE
void YY_SSLScanner_CLASS::yy___echo()
{YY_SSLScanner_ECHO_CODE
}
#endif
#ifndef YY_SSLScanner_INPUT_NOCODE
int  YY_SSLScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_SSLScanner_INPUT_CODE
}
#endif
#ifndef YY_SSLScanner_FATAL_ERROR_NOCODE
void YY_SSLScanner_CLASS::yy___fatal_error(char *msg)
{YY_SSLScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_SSLScanner_WRAP_NOCODE
int  YY_SSLScanner_CLASS::yy___wrap()
{YY_SSLScanner_WRAP_CODE
}
#endif
void YY_SSLScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 yy_current_buffer=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_SSLScanner_DEBUG != 0
 YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
}

YY_SSLScanner_CLASS::YY_SSLScanner_CLASS(YY_SSLScanner_CONSTRUCTOR_PARAM) YY_SSLScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_SSLScanner_CONSTRUCTOR_CODE;
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 120
typedef int yy_state_type;
static const short int yy_acclist[473] =
    {   0,
      120,  117,  119,  115,  117,  119,  118,  119,   69,  117,
      119,  106,  117,  119,  117,  119,16500,  110,  117,  119,
       39,  117,  119,   37,  117,  119,   40,  117,  119,   45,
      117,  119,   46,  117,  119,  117,  119,   41,  117,  119,
      112,  117,  119,  112,  117,  119,  112,  117,  119,   68,
      117,  119,  109,  117,  119,   21,  117,  119,   19,  117,
      119,   22,  117,  119,   70,  117,  119,  103,  117,  119,
      103,  117,  119,  103,  117,  119,  103,  117,  119,  103,
      117,  119,  103,  117,  119,  103,  117,  119,  103,  117,
      119,  103,  117,  119,  108,  117,  119,  107,  117,  119,

       38,  117,  119,   99,  117,  119,  103,  117,  119,  103,
      117,  119,  103,  117,  119,  103,  117,  119,  103,  117,
      119,  103,  117,  119,  103,  117,  119,  103,  117,  119,
      103,  117,  119,  103,  117,  119,  103,  117,  119,   97,
      103,  117,  119,  103,  117,  119,  103,  117,  119,  103,
      117,  119,  103,  117,  119,   36,  117,  119,   62,  117,
      119,  115,  118,16500, 8308,   44,  100,   42,   47,   55,
      112,  112,   64,   58,   67,  104,   43,   52,   65,   34,
       23,   25,   63,   24,   33,   26,  101,  103,  102,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,   98,  102,   17,
      103,  103,   97,  103,   96,  102,   31,  103,   32,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   20,
      100,   16,   48,   49,   56,   57,   59,   60,  104,   53,
       54,  111,  113,   66,   27,   28,   35,    8,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,   18,  103,  103,    9,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,   61,
      103,   29,  103,   30,  103,  103,  103,  103,  103,  103,

       95,  103,  103,  103,  103,   51,   50,  114,  103,  103,
       14,  103,  103,  103,   83,  103,  103,  103,  103,  103,
      103,  105,  103,  103,   86,  101,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,   85,  101,  103,  103,   87,  101,   95,  103,  103,
      103,  103,  103,  103,  103,    3,  103,   84,  103,  103,
      103,  103,  103,   71,  101,  103,  103,  103,  103,    4,
      103,  103,  103,   74,  101,  103,  103,   73,  101,  103,
      103,   89,  101,   90,  101,  103,   93,  101,   94,  101,
      103,  103,  103,   12,  103,  103,  103,  103,   10,  103,

      103,   13,  103,  103,  103,  103,  103,  103,   72,  101,
      103,  103,   11,  103,   91,  101,   79,  101,  103,  103,
      103,   78,  101,  103,  103,    1,  103,    5,  103,   88,
      101,  103,  103,  103,   75,  101,   80,  101,    2,  103,
       77,  101,   76,  101,  103,  103,  103,  103,  103,   92,
      101,  103,  103,   15,  103,  103,  103,  103,    6,  103,
      103,    7,  103,  103,  103,  103,   81,  101,  103,  103,
       82,  101
    } ;

static const short int yy_accept[330] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   18,
       21,   24,   27,   30,   33,   36,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  116,  119,  122,  125,  128,  131,  134,  137,
      140,  144,  147,  150,  153,  156,  159,  162,  163,  164,
      165,  166,  167,  168,  169,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  179,  179,  179,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,

      200,  201,  201,  202,  203,  204,  205,  206,  207,  208,
      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      220,  222,  223,  225,  227,  229,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
      245,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  254,  255,  256,  257,  258,  260,  261,  262,  263,
      264,  265,  266,  267,  268,  269,  270,  271,  271,  272,
      274,  275,  277,  278,  279,  280,  281,  282,  283,  284,
      285,  286,  287,  288,  289,  290,  292,  294,  296,  297,
      298,  299,  300,  301,  303,  304,  305,  306,  307,  308,

      309,  310,  311,  313,  314,  315,  317,  318,  319,  320,
      321,  322,  323,  323,  324,  325,  327,  328,  329,  330,
      331,  332,  333,  334,  335,  336,  337,  338,  339,  340,
      341,  342,  344,  345,  346,  348,  350,  351,  352,  353,
      354,  355,  356,  358,  360,  361,  362,  363,  364,  366,
      367,  368,  369,  370,  372,  373,  374,  376,  377,  378,
      380,  381,  382,  384,  386,  387,  389,  391,  392,  393,
      394,  396,  397,  398,  399,  401,  402,  404,  405,  406,
      407,  408,  409,  411,  412,  413,  415,  417,  419,  420,
      421,  422,  424,  425,  426,  428,  430,  432,  433,  434,

      435,  437,  439,  441,  443,  445,  446,  447,  448,  449,
      450,  452,  453,  454,  456,  457,  458,  459,  461,  462,
      464,  465,  466,  467,  469,  470,  471,  473,  473
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       10,   12,   13,   10,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   10,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   36,   38,   39,   40,
       36,   41,   42,   43,   44,   45,   36,   46,   36,   36,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   36,   58,   36,   36,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   36,   69,   70,
       36,   71,   10,   72,   10,   73,    1
    } ;

static const YY_CHAR yy_meta[74] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    1,
        5,    1,    1,    1,    6,    1,    7,    7,    7,    7,
        1,    1,    1,    1,    1,    1,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    5,    1,    1,    5,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    1,    1
    } ;

static const short int yy_base[340] =
    {   0,
        0,    0,  211,  943,  203,    0,  943,  943,  201,  943,
      194,  943,   70,  141,   58,  176,   75,   76,   82,   91,
       60,  943,   62,  165,   80,  943,   69,   87,   81,  102,
       96,  104,  106,  107,  110,  943,  943,  184,    0,  108,
      113,  114,  127,  118,  128,  139,  134,  121,  152,  156,
      190,  155,  169,  167,  174,  943,  160,  181,    0,  174,
      943,  943,    0,  943,  221,  161,  168,  227,  239,  943,
      172,  943,    0,  943,  189,  243,  247,  160,  146,  943,
      943,   96,  943,  943,   91,  131,  943,  943,  224,  943,
      237,  241,  257,  258,  269,  262,  271,  270,  278,  261,

      272,    0,  279,  280,  282,  284,  283,  285,  286,  291,
      292,  296,  303,  309,  312,  313,  317,  324,  335,  943,
      337,  338,  370,  943,  346,  350,  351,  355,  357,  358,
      359,  361,  362,  367,  384,  943,    0,  943,   92,  943,
       98,  943,  943,  943,  943,    0,  943,  943,  335,  408,
      426,  943,  943,  943,  943,  372,  402,  412,  407,  423,
      421,  418,  430,  440,  442,  445,  449,  132,  444,  446,
      450,  451,  452,  453,  455,  463,  456,  458,  465,  467,
      471,  468,  472,  473,  511,  477,  484,  490,  495,  497,
      510,  516,  521,  523,  524,  527,  532,  943,  943,  528,

      540,  545,  541,  542,  543,  548,  549,  551,  556,  553,
      583,  943,  130,  550,  554,  943,  562,  564,  588,  591,
      593,  595,  596,  599,  602,  597,  605,  601,  606,  608,
      610,  943,  614,  615,  943,  616,  618,  620,  622,  626,
      628,  659,  625,  630,  663,  667,  671,  673,  943,  636,
      640,  674,  675,  677,  678,  680,  943,  681,  682,  943,
      689,  691,  943,  943,  692,  943,  943,  693,  694,  696,
      700,  708,  702,  715,  706,  720,  719,  722,  734,  740,
      747,  746,  943,  749,  752,  753,  943,  943,  757,  759,
      760,  943,  761,  764,  762,  763,  943,  765,  767,  766,

      943,  943,  768,  943,  943,  771,  778,  769,  772,  780,
      943,  786,  792,  794,  817,  818,  819,  820,  821,  824,
      825,  826,  832,  943,  833,  834,  943,  943,  899,  907,
      913,  916,  920,  104,  922,  925,   74,  930,  934
    } ;

static const short int yy_def[340] =
    {   0,
      328,    1,  328,  328,  328,  329,  328,  328,  330,  328,
      331,  328,  328,  328,  328,  332,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  328,  328,  328,  334,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  328,  328,  328,  329,  330,
      328,  328,  335,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  336,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  333,  328,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  337,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  328,
      333,  333,  333,  328,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  328,  335,  328,  328,  328,
      328,  328,  328,  328,  328,  336,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  338,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  339,  333,  333,  333,  328,  328,  328,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  328,  338,  333,  333,  328,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  328,  333,  333,  328,  339,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  328,  333,
      333,  333,  333,  333,  333,  333,  328,  333,  333,  328,
      333,  333,  328,  328,  333,  328,  328,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  328,  333,  333,  333,  328,  328,  333,  333,
      333,  328,  333,  333,  333,  333,  328,  333,  333,  333,

      328,  328,  333,  328,  328,  333,  333,  333,  333,  333,
      328,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  328,  333,  333,  328,    0,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328
    } ;

static const short int yy_nxt[1017] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    8,
        8,   13,   14,   15,   16,   17,   18,   19,   20,   19,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   27,
       30,   31,   27,   27,   32,   27,   33,   27,   34,   27,
       27,   35,   27,   27,   27,   27,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   27,   46,   47,   48,
       27,   49,   50,   27,   51,   52,   53,   54,   27,   27,
       55,   56,   57,   64,   68,   68,   69,   68,   74,   88,
       79,  168,   70,   80,   81,   82,   65,   65,   65,   65,
       76,   88,   68,   68,   68,   68,   76,   88,   68,   68,

       68,   68,   78,   85,   86,   76,   88,   68,   68,   68,
       68,  103,   88,   71,   88,   90,   88,   88,   88,   92,
       88,   91,   94,   88,   88,   66,   95,   90,   88,   83,
       75,   88,   96,   90,  212,   97,  212,   88,   88,   93,
       99,   98,   90,  101,   88,   77,  100,   87,   90,   88,
       90,  199,   90,   90,   90,  198,   90,  155,  154,   90,
       90,  104,   88,  153,   90,   88,   88,  120,  105,  152,
      107,  151,  106,   90,   90,  108,   61,   88,  110,   88,
       90,  109,   58,  136,   88,   90,  112,  111,  102,   84,
       72,  118,  113,  114,  115,  119,   67,   62,   90,  116,

       88,   90,   90,   61,   58,  117,  123,  123,  123,  123,
      328,  127,  128,   90,  139,   90,  121,  122,  129,  131,
       90,  142,  130,  328,  140,  144,  141,  134,  132,  135,
      328,  143,  138,  133,   88,  145,  124,   65,   65,   65,
       65,   76,  147,   68,   68,   68,   68,   88,  125,  328,
       78,   88,  148,   76,  126,   68,   68,   68,   68,  149,
      149,  149,  149,  150,  150,  150,  150,   88,   88,  156,
       90,   88,   88,  150,  150,  150,  150,  150,  150,   88,
       88,   88,   88,   90,  328,  157,  158,   90,   88,   88,
       88,  166,   88,   88,   88,   88,   88,  328,  167,  159,

      161,   88,   88,   90,   90,  328,   88,   90,   90,  162,
      328,  160,  164,   88,  163,   90,   90,   90,   90,   88,
      165,  328,   88,   88,   90,   90,   90,   88,   90,   90,
       90,   90,   90,  169,   88,  170,  171,   90,   90,  172,
      328,  174,   90,  328,  175,   88,  176,   88,   88,   90,
      173,  149,  149,  149,  149,   90,   88,  177,   90,   90,
       88,   88,  328,   90,  178,   88,  179,   88,   88,   88,
       90,   88,   88,  180,  328,  328,  181,   88,  183,  182,
       88,   90,   88,   90,   90,  328,  123,  123,  123,  123,
      184,  185,   90,  328,   88,  328,   90,   90,  187,  328,

      328,   90,  188,   90,   90,   90,  186,   90,   90,  328,
      192,  189,   88,   90,  328,  190,   90,   88,   90,  193,
      196,  191,   88,  194,  150,  150,  150,  150,   88,  195,
       90,   88,  201,   88,  150,  150,  150,  150,  150,  150,
       88,  197,  200,  200,  200,  200,  202,  205,   90,  203,
       88,  204,   88,   90,   88,   88,   88,  206,   90,   88,
       88,   88,  216,   88,   90,   88,   88,   90,   88,   90,
      208,  207,  328,   88,  328,   88,   90,   88,   88,  328,
      328,   88,   88,   88,  209,  210,   90,   88,   90,  211,
       90,   90,   90,  328,   88,   90,   90,   90,   90,   90,

       88,   90,   90,  328,   90,   88,  220,  232,  214,   90,
      217,   90,  218,   90,   90,  219,  215,   90,   90,   90,
       88,   88,  225,   90,  223,  221,   88,  226,  228,  229,
       90,  235,  328,   88,   88,  222,   90,   88,  224,  227,
      328,   90,   88,   90,  200,  200,  200,  200,  328,  231,
       88,   88,   88,   88,  328,   88,   90,   90,   88,   88,
      249,   88,   90,   88,   88,  230,   88,   90,  234,   90,
       90,  241,   88,   90,   88,  242,  233,  328,   90,  247,
      240,  238,  244,  245,  237,  243,   90,   90,   90,   90,
      239,   90,  246,   88,   90,   90,   90,   90,   88,   90,

       90,   88,   90,   88,  250,   88,  257,  260,   90,   88,
       90,   88,   88,  248,  252,   88,  263,  262,  264,  328,
       88,  328,  251,  328,  266,  267,   88,  328,   88,   90,
       88,  328,   88,  328,   90,   88,   88,   90,   88,   90,
       88,   90,   90,   90,  328,   90,   88,   90,   90,  256,
       88,   90,   90,  255,   90,  253,   90,  254,  259,  258,
       90,   90,   90,  261,   90,  272,   90,  271,   90,   88,
      268,   90,   90,   88,   90,  269,   90,   88,  328,  265,
      270,   88,   90,   88,   88,   88,   90,   88,   88,  273,
      283,   88,   88,  274,  279,  328,  278,  275,  328,   88,

      328,  287,  288,   88,   88,   90,  292,  328,  276,   90,
       88,  328,   88,   90,  277,  328,   88,   90,   88,   90,
       90,   90,  328,   90,   90,   88,   90,   90,   90,   88,
       88,  282,  297,  284,  280,   90,  285,   90,   90,   90,
       90,  281,   90,  286,   88,  293,   90,  294,   90,  296,
       88,  291,   90,  328,   90,  295,  301,   88,  289,  302,
      290,   90,   88,   88,  328,   90,   90,  304,   90,  305,
       88,   88,   88,   88,   88,   88,  311,   88,   88,   88,
       90,   88,   88,  328,  328,  328,   90,  328,   88,  298,
       88,  307,   90,   90,  308,   90,   88,  314,   90,   90,

      299,  300,   88,   90,   88,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  303,   90,   90,  313,
      306,  310,  315,  309,   90,  312,   90,   88,   88,   88,
       88,   88,   90,  318,   88,   88,  324,  328,   90,  328,
       90,  317,   88,   88,  327,  316,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,   90,   90,   90,   90,   90,  328,  328,
       90,   90,   90,  319,  328,  323,  328,  321,   90,   90,
       90,  328,  328,  320,  328,  328,  322,  328,  325,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  326,   59,

      328,   59,   59,   59,   59,   59,   59,   60,   60,   60,
       60,   60,   60,   60,   60,   63,  328,  328,  328,  328,
       63,   73,  328,   73,   89,  328,   89,   89,  137,  137,
      146,  146,  146,  213,  328,  328,  328,  213,  236,  328,
      236,  236,    3,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328
    } ;

static const short int yy_chk[1017] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   13,   15,   15,   15,   15,   17,   27,
       21,  337,   15,   21,   23,   23,   13,   13,   13,   13,
       18,   29,   18,   18,   18,   18,   19,   28,   19,   19,

       19,   19,   20,   25,   25,   20,   31,   20,   20,   20,
       20,  334,   30,   15,   32,   27,   33,   34,   40,   29,
       35,   28,   31,   41,   42,   13,   31,   29,   44,   23,
       17,   48,   31,   28,  213,   31,  168,   43,   45,   30,
       33,   32,   31,   35,   47,   18,   34,   25,   30,   46,
       32,  141,   33,   34,   40,  139,   35,   86,   85,   41,
       42,   40,   49,   82,   44,   52,   50,   48,   40,   79,
       41,   78,   40,   43,   45,   42,   60,   54,   44,   53,
       47,   43,   58,   57,   55,   46,   45,   44,   38,   24,
       16,   47,   45,   45,   45,   47,   14,   11,   49,   46,

       51,   52,   50,    9,    5,   46,   51,   51,   51,   51,
        3,   52,   52,   54,   66,   53,   49,   50,   52,   53,
       55,   67,   52,    0,   66,   71,   66,   54,   53,   55,
        0,   67,   65,   53,   89,   71,   51,   65,   65,   65,
       65,   68,   75,   68,   68,   68,   68,   91,   51,    0,
       69,   92,   75,   69,   51,   69,   69,   69,   69,   76,
       76,   76,   76,   77,   77,   77,   77,   93,   94,   91,
       89,  100,   96,   77,   77,   77,   77,   77,   77,   95,
       98,   97,  101,   91,    0,   92,   93,   92,   99,  103,
      104,  100,  105,  107,  106,  108,  109,    0,  101,   94,

       96,  110,  111,   93,   94,    0,  112,  100,   96,   97,
        0,   95,   98,  113,   97,   95,   98,   97,  101,  114,
       99,    0,  115,  116,   99,  103,  104,  117,  105,  107,
      106,  108,  109,  104,  118,  105,  106,  110,  111,  107,
        0,  109,  112,    0,  110,  119,  111,  121,  122,  113,
      108,  149,  149,  149,  149,  114,  125,  112,  115,  116,
      126,  127,    0,  117,  113,  128,  114,  129,  130,  131,
      118,  132,  133,  115,    0,    0,  115,  134,  117,  116,
      123,  119,  156,  121,  122,    0,  123,  123,  123,  123,
      118,  119,  125,    0,  135,    0,  126,  127,  125,    0,

        0,  128,  126,  129,  130,  131,  122,  132,  133,    0,
      130,  127,  157,  134,    0,  128,  123,  159,  156,  131,
      134,  129,  158,  132,  150,  150,  150,  150,  162,  133,
      135,  161,  157,  160,  150,  150,  150,  150,  150,  150,
      163,  135,  151,  151,  151,  151,  158,  161,  157,  159,
      164,  160,  165,  159,  169,  166,  170,  162,  158,  167,
      171,  172,  173,  174,  162,  175,  177,  161,  178,  160,
      164,  163,    0,  176,    0,  179,  163,  180,  182,    0,
        0,  181,  183,  184,  165,  166,  164,  186,  165,  167,
      169,  166,  170,    0,  187,  167,  171,  172,  173,  174,

      188,  175,  177,    0,  178,  189,  177,  190,  169,  176,
      174,  179,  175,  180,  182,  176,  171,  181,  183,  184,
      191,  185,  182,  186,  180,  178,  192,  183,  185,  185,
      187,  193,    0,  194,  195,  179,  188,  196,  181,  184,
        0,  189,  197,  190,  200,  200,  200,  200,    0,  189,
      201,  203,  204,  205,    0,  202,  191,  185,  206,  207,
      214,  208,  192,  210,  215,  185,  209,  193,  192,  194,
      195,  202,  217,  196,  218,  204,  191,    0,  197,  210,
      201,  196,  207,  208,  195,  205,  201,  203,  204,  205,
      197,  202,  209,  211,  206,  207,  214,  208,  219,  210,

      215,  220,  209,  221,  215,  222,  223,  226,  217,  224,
      218,  228,  225,  211,  218,  227,  229,  228,  230,    0,
      231,    0,  217,    0,  233,  234,  236,    0,  237,  211,
      238,    0,  239,    0,  219,  243,  240,  220,  241,  221,
      244,  222,  223,  226,    0,  224,  250,  228,  225,  222,
      251,  227,  229,  221,  230,  219,  231,  220,  225,  224,
      233,  234,  236,  227,  237,  241,  238,  240,  239,  242,
      237,  243,  240,  245,  241,  238,  244,  246,    0,  231,
      239,  247,  250,  248,  252,  253,  251,  254,  255,  242,
      256,  258,  259,  245,  251,    0,  250,  246,    0,  261,

        0,  262,  265,  268,  269,  242,  270,    0,  247,  245,
      271,    0,  273,  246,  248,    0,  275,  247,  272,  248,
      252,  253,    0,  254,  255,  274,  256,  258,  259,  277,
      276,  255,  278,  258,  252,  261,  259,  262,  265,  268,
      269,  253,  270,  261,  279,  272,  271,  273,  273,  276,
      280,  269,  275,    0,  272,  274,  282,  281,  268,  284,
      268,  274,  285,  286,    0,  277,  276,  289,  278,  290,
      291,  293,  295,  296,  294,  298,  300,  299,  303,  308,
      279,  306,  309,    0,    0,    0,  280,    0,  307,  279,
      310,  293,  282,  281,  294,  284,  312,  308,  285,  286,

      280,  281,  313,  289,  314,  290,  291,  293,  295,  296,
      294,  298,  300,  299,  303,  308,  285,  306,  309,  307,
      291,  299,  309,  298,  307,  306,  310,  315,  316,  317,
      318,  319,  312,  313,  320,  321,  322,    0,  313,    0,
      314,  312,  323,  325,  326,  310,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  315,  316,  317,  318,  319,    0,    0,
      320,  321,  322,  315,    0,  321,    0,  317,  323,  325,
      326,    0,    0,  316,    0,    0,  319,    0,  323,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  325,  329,

        0,  329,  329,  329,  329,  329,  329,  330,  330,  330,
      330,  330,  330,  330,  330,  331,    0,    0,    0,    0,
      331,  332,    0,  332,  333,    0,  333,  333,  335,  335,
      336,  336,  336,  338,    0,    0,    0,  338,  339,    0,
      339,  339,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,

      328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_SSLScanner_DEBUG != 0
static const short int yy_rule_linenum[119] =
    {   0,
       63,   64,   65,   66,   67,   68,   69,   73,   74,   78,
       79,   83,   84,   85,   86,   88,   93,   94,   98,   99,
      100,  101,  102,  103,  104,  105,  106,  107,  112,  113,
      114,  115,  116,  117,  118,  119,  120,  121,  126,  127,
      128,  129,  130,  131,  132,  133,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  155,  158,  161,  164,  167,  171,  174,  177,  180,
      183,  186,  187,  188,  189,  190,  191,  192,  193,  198,
      203,  204,  207,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  223,  227,  232,  233,  235,  236,  237,

      241,  246,  251,  255,  256,  260,  261,  262,  263,  264,
      265,  269,  274,  279,  291,  292,  293,  294
    } ;

#endif
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 369 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_SSLScanner_LEX_DEFINED
YY_SSLScanner_LEX_RETURN YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM )
YY_SSLScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_SSLScanner_LEX_RETURN YY_SSLScanner_CLASS::YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 394 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = stdin;

	if ( ! yy___out )
	    yy___out = stdout;

	if ( yy_current_buffer )
	    YY_SSLScanner_INIT_BUFFER( yy_current_buffer, yy___in );
	else
	    yy_current_buffer = YY_SSLScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_SSLScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 422 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 329 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 328 );
#line 433 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }
#line 436 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_SSLScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
			fprintf( stderr, "--scanner backtracking\n" );
		else if ( yy_act < YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
		else if ( yy_act == YY_END_OF_BUFFER -1 )
			fprintf( stderr, 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
		else if ( yy_act == YY_END_OF_BUFFER )
			fprintf( stderr, "--(end of buffer or a NUL)\n" );
		else
			fprintf( stderr, "--EOF\n" );
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
case 1:
#line 64 "sslscanner.l"
case 2:
#line 64 "sslscanner.l"
{ return SSLParser::TOK_INTEGER; }
	YY_BREAK
case 3:
#line 66 "sslscanner.l"
case 4:
#line 66 "sslscanner.l"
{ return SSLParser::TOK_FLOAT; }
	YY_BREAK
case 5:
#line 67 "sslscanner.l"
{ return SSLParser::OPERAND; }
	YY_BREAK
case 6:
#line 69 "sslscanner.l"
case 7:
#line 69 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::ENDIANNESS;
             }
	YY_BREAK
case 8:
#line 74 "sslscanner.l"
case 9:
#line 74 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::BIG;
             }
	YY_BREAK
case 10:
#line 79 "sslscanner.l"
case 11:
#line 79 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::LITTLE;
             }
	YY_BREAK
case 12:
#line 83 "sslscanner.l"
{ return SSLParser::COVERS; }
	YY_BREAK
case 13:
#line 84 "sslscanner.l"
{ return SSLParser::SHARES; }
	YY_BREAK
case 14:
#line 85 "sslscanner.l"
{ return SSLParser::FAST; }
	YY_BREAK
case 15:
#line 86 "sslscanner.l"
{ return SSLParser::FETCHEXEC; }
	YY_BREAK
case 16:
#line 88 "sslscanner.l"
{
               yylval.num = strtol(yytext+1, 0, 10);
               return SSLParser::ASSIGNSIZE;
             }
	YY_BREAK
case 17:
#line 94 "sslscanner.l"
case 18:
#line 94 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::LOG_OP;
             }
	YY_BREAK
case 19:
#line 99 "sslscanner.l"
case 20:
#line 100 "sslscanner.l"
case 21:
#line 101 "sslscanner.l"
case 22:
#line 102 "sslscanner.l"
case 23:
#line 103 "sslscanner.l"
case 24:
#line 104 "sslscanner.l"
case 25:
#line 105 "sslscanner.l"
case 26:
#line 106 "sslscanner.l"
case 27:
#line 107 "sslscanner.l"
case 28:
#line 107 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::COND_OP;
             }
	YY_BREAK
case 29:
#line 113 "sslscanner.l"
case 30:
#line 114 "sslscanner.l"
case 31:
#line 115 "sslscanner.l"
case 32:
#line 116 "sslscanner.l"
case 33:
#line 117 "sslscanner.l"
case 34:
#line 118 "sslscanner.l"
case 35:
#line 119 "sslscanner.l"
case 36:
#line 120 "sslscanner.l"
case 37:
#line 121 "sslscanner.l"
case 38:
#line 121 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::BIT_OP;

      }
	YY_BREAK
case 39:
#line 127 "sslscanner.l"
case 40:
#line 128 "sslscanner.l"
case 41:
#line 129 "sslscanner.l"
case 42:
#line 130 "sslscanner.l"
case 43:
#line 131 "sslscanner.l"
case 44:
#line 132 "sslscanner.l"
case 45:
#line 133 "sslscanner.l"
case 46:
#line 133 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ARITH_OP;
      }
	YY_BREAK
case 47:
#line 138 "sslscanner.l"
case 48:
#line 139 "sslscanner.l"
case 49:
#line 140 "sslscanner.l"
case 50:
#line 141 "sslscanner.l"
case 51:
#line 142 "sslscanner.l"
case 52:
#line 143 "sslscanner.l"
case 53:
#line 144 "sslscanner.l"
case 54:
#line 145 "sslscanner.l"
case 55:
#line 146 "sslscanner.l"
case 56:
#line 147 "sslscanner.l"
case 57:
#line 148 "sslscanner.l"
case 58:
#line 149 "sslscanner.l"
case 59:
#line 150 "sslscanner.l"
case 60:
#line 151 "sslscanner.l"
case 61:
#line 151 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::FARITH_OP;
      }
	YY_BREAK
case 62:
#line 155 "sslscanner.l"
{
        return SSLParser::NOT;
      }
	YY_BREAK
case 63:
#line 158 "sslscanner.l"
{
        return SSLParser::THEN;
      }
	YY_BREAK
case 64:
#line 161 "sslscanner.l"
{
        return SSLParser::INDEX;
       }
	YY_BREAK
case 65:
#line 164 "sslscanner.l"
{
        return SSLParser::EQUATE;
      }
	YY_BREAK
case 66:
#line 167 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ASSIGN;
      }
	YY_BREAK
case 67:
#line 171 "sslscanner.l"
{
        return SSLParser::TO;
      }
	YY_BREAK
case 68:
#line 174 "sslscanner.l"
{
        return SSLParser::COLON;
      }
	YY_BREAK
case 69:
#line 177 "sslscanner.l"
{
        return SSLParser::S_E;
      }
	YY_BREAK
case 70:
#line 180 "sslscanner.l"
{
        return SSLParser::AT;
      }
	YY_BREAK
case 71:
#line 183 "sslscanner.l"
{
                return SSLParser::ADDR;
            }
	YY_BREAK
case 72:
#line 187 "sslscanner.l"
case 73:
#line 188 "sslscanner.l"
case 74:
#line 189 "sslscanner.l"
case 75:
#line 190 "sslscanner.l"
case 76:
#line 191 "sslscanner.l"
case 77:
#line 192 "sslscanner.l"
case 78:
#line 193 "sslscanner.l"
case 79:
#line 193 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::CONV_FUNC;
            }
	YY_BREAK
case 80:
#line 198 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::TRUNC_FUNC;
            }
	YY_BREAK
case 81:
#line 204 "sslscanner.l"
case 82:
#line 204 "sslscanner.l"
{
                return SSLParser::FLAGMACRO;
                }
	YY_BREAK
case 83:
#line 207 "sslscanner.l"
{   return SSLParser::FPOP; }
	YY_BREAK
case 84:
#line 208 "sslscanner.l"
{   return SSLParser::FPUSH; }
	YY_BREAK
case 85:
#line 210 "sslscanner.l"
case 86:
#line 211 "sslscanner.l"
case 87:
#line 212 "sslscanner.l"
case 88:
#line 213 "sslscanner.l"
case 89:
#line 214 "sslscanner.l"
case 90:
#line 215 "sslscanner.l"
case 91:
#line 216 "sslscanner.l"
case 92:
#line 217 "sslscanner.l"
case 93:
#line 217 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::TRANSCEND;
			}
	YY_BREAK
case 94:
#line 223 "sslscanner.l"
{
				return SSLParser::SUCCESSOR;
            }
	YY_BREAK
case 95:
#line 227 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::TEMP;
            }
	YY_BREAK
case 96:
#line 232 "sslscanner.l"
{   return SSLParser::REG_IDX; }
	YY_BREAK
case 97:
#line 233 "sslscanner.l"
{   yylval.str = strdup(yytext);
                return SSLParser::REG_NUM; }
	YY_BREAK
case 98:
#line 235 "sslscanner.l"
{   return SSLParser::MEM_IDX; }
	YY_BREAK
case 99:
#line 236 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 100:
#line 237 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::REG_ID;
            }
	YY_BREAK
case 101:
#line 241 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_CALL;
            }
	YY_BREAK
case 102:
#line 246 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_LOOKUP;
            }
	YY_BREAK
case 103:
#line 251 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::NAME;
            }
	YY_BREAK
case 104:
#line 256 "sslscanner.l"
case 105:
#line 256 "sslscanner.l"
{
                    yylval.str = strdup(yytext);
                    return SSLParser::DECOR;
            }
	YY_BREAK
case 106:
#line 260 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 107:
#line 261 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 108:
#line 262 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 109:
#line 263 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 110:
#line 264 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 111:
#line 265 "sslscanner.l"
{
        yylval.dbl = atof(yytext);
        return SSLParser::FLOATNUM;
     }
	YY_BREAK
case 112:
#line 269 "sslscanner.l"
{
        yylval.num = strtol(yytext,0,10);
        return SSLParser::NUM;
     }
	YY_BREAK
case 113:
#line 274 "sslscanner.l"
{
        yylval.num = strtol(yytext,0,16);
        return SSLParser::NUM;
     }
	YY_BREAK
case 114:
#line 279 "sslscanner.l"
{
                    // a power of two
                    int sign = (yytext[0] == '-' ? -1 : 1);
                    char* start = yytext + (sign == -1 ? 4:3);

                        // David - changed to << for more efficient and 
                        // not depend on the <cmath> anymore.
                    yylval.num = 1 << (strtol(start,0,10) * sign);
                        // yylval.num = (int)pow(2,strtol(start,0,10)) * sign;
                    return SSLParser::NUM;
                }
	YY_BREAK
case 115:
#line 291 "sslscanner.l"
;
	YY_BREAK
case 116:
#line 292 "sslscanner.l"
;   /* comment */
	YY_BREAK
case 117:
#line 293 "sslscanner.l"
;
	YY_BREAK
case 118:
#line 294 "sslscanner.l"
{   // funky print-next-line-for-debug token
                    if (yyleng > MAX_LINE)
                    {
                        std::cerr << theLine + 1 << ": line too long.\n";
                        exit(1);
                    }
                    // saves the next line
                    strcpy(lineBuf, yytext+1);
                    theLine++;
                    // reparse from char 1
                    // give back all but the \n to rescan
                    yyless(1);

                    // echo the line if line tracing is turned on
                    if (traceLines)
                    std::cerr << lineBuf << std::endl;

                    // Quell a warning
                    yy_last_accepting_state = 0;
                    yy_last_accepting_cpos = 0;
                }
	YY_BREAK
case 119:
#line 315 "sslscanner.l"
ECHO;
	YY_BREAK
	    case YY_STATE_EOF(INITIAL):
		yyterminate();
#line 463 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
#line 511 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &yy_current_buffer->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_SSLScanner_DEBUG != 0
		fprintf(stderr, "action # %d\n", yy_act );
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_SSLScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_SSLScanner_CHAR *dest = yy_current_buffer->yy_ch_buf;
    register YY_SSLScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( yy_current_buffer->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = yy_current_buffer->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    yy_current_buffer->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    yy_current_buffer->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &yy_current_buffer->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_SSLScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;
#line 683 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 329 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
#line 687 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_SSLScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 329 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 328);
#line 721 "/home/02/binary/u1.luna.tools/flex++/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_SSLScanner_CHAR c, register YY_SSLScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_SSLScanner_CHAR c;
register YY_SSLScanner_CHAR *yy_bp;
#endif
#else
void YY_SSLScanner_CLASS::yyunput( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *yy_bp )
#endif

    {
    register YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_SSLScanner_CHAR *dest =
	    &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
	register YY_SSLScanner_CHAR *source =
	    &yy_current_buffer->yy_ch_buf[number_to_move];

	while ( source > yy_current_buffer->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = yy_current_buffer->yy_buf_size;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_SSLScanner_CLASS::input()
#endif
    {
    int c;
    YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_SSLScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_RESTART( FILE *input_file )
#else
void YY_SSLScanner_RESTART( input_file )
FILE *input_file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_RESTART ( FILE *input_file )
#endif

    {
    YY_SSLScanner_INIT_BUFFER( yy_current_buffer, input_file );
    YY_SSLScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_SSLScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( yy_current_buffer == new_buffer )
	return;

    if ( yy_current_buffer )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	yy_current_buffer->yy_buf_pos = yy_c_buf_p;
	yy_current_buffer->yy_n_chars = yy_n_chars;
	}

    yy_current_buffer = new_buffer;
    YY_SSLScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_LOAD_BUFFER_STATE( void )
#else
void YY_SSLScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yy___text = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yy___in = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( FILE *file, int size )
#else
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( file, size )
FILE *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_SSLScanner_CLASS::YY_SSLScanner_CREATE_BUFFER( FILE *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_SSLScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    YY_SSLScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_SSLScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == yy_current_buffer )
	yy_current_buffer = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file )
#else
void YY_SSLScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, FILE *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 315 "sslscanner.l"

