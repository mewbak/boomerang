#define YY_CHAR char
#line 1 "//usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /home/emmerik/boomerang-repository/boomerang/db/sslscanner.cpp,v 1.33 2004-05-05 01:34:21 emmerik Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "sslscanner.l"
#define INITIAL 0
/*
 * Copyright (C) 1997, Shane Sendall
 * Copyright (C) 1998-2001, The University of Queensland
 * Copyright (C) 2001, Sun Microsystems, Inc
 *
 * See the file "LICENSE.TERMS" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *
 */
/*==============================================================================
 * FILE:          sslscanner.l
 * OVERVIEW:      Defines a scanner to parse the tokens of a Semantic
 *                Specification Language specification.
 *============================================================================*/
/* 
 * Shane Sendall (original C version) Dec 1997
 * Doug Simon (C++ version) Jan 1998
 * 29 Apr 02 - Mike: Mods for boomerang; removed &~, |~, and ^~ operators
 * 09 May 02 - Mike: ASSIGNSIZE is an num now
 * 05 May 04 - Mike: ASSIGNSIZE replaced by ASSIGNTYPE (text)
 */
#define YY_SSLScanner_FLEX_SCANNER
#line 35 "sslscanner.l"
#include <assert.h>
#if defined(_MSC_VER) && _MSC_VER <= 1200
#pragma warning(disable:4786)
#endif 

#include "sslscanner.h"
#include "sslscanner.h"
#line 62 "sslscanner.l"
#line 196 "//usr/local/lib/flexskel.cc"

#define yy___stderr YY_SSLScanner_ERRFILE
#define yy___text YY_SSLScanner_TEXT
#define yy___leng YY_SSLScanner_LENG
#define yy___in YY_SSLScanner_IN
#define yy___out YY_SSLScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, yy___in ); \
		YY_SSLScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_SSLScanner_DEBUG != 0
#define yy___flex_debug YY_SSLScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_SSLScanner_ECHO
#define yy___input YY_SSLScanner_INPUT
#define yy___fatal_error YY_SSLScanner_FATAL_ERROR
#define yy___wrap YY_SSLScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_SSLScanner_IFILE  *yy_input_file;

    YY_SSLScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_SSLScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_SSLScanner_DEBUG != 0
int YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_SSLScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_SSLScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_SSLScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_SSLScanner_CHAR *yy___text;
int yy___leng;

YY_SSLScanner_IFILE  *yy___in = (YY_SSLScanner_IFILE  *) 0;
YY_SSLScanner_OFILE *yy___out = (YY_SSLScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_SSLScanner_CHAR *yy_c_buf_p = (YY_SSLScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_SSLScanner_ECHO_NOCODE
void YY_SSLScanner_CLASS::yy___echo()
{YY_SSLScanner_ECHO_CODE
}
#endif
#ifndef YY_SSLScanner_INPUT_NOCODE
int  YY_SSLScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_SSLScanner_INPUT_CODE
}
#endif
#ifndef YY_SSLScanner_FATAL_ERROR_NOCODE
void YY_SSLScanner_CLASS::yy___fatal_error(char *msg)
{YY_SSLScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_SSLScanner_WRAP_NOCODE
int  YY_SSLScanner_CLASS::yy___wrap()
{YY_SSLScanner_WRAP_CODE
}
#endif
void YY_SSLScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_SSLScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_SSLScanner_DEBUG != 0
 YY_SSLScanner_DEBUG_FLAG=YY_SSLScanner_DEBUG_INIT;
#endif
}

YY_SSLScanner_CLASS::YY_SSLScanner_CLASS(YY_SSLScanner_CONSTRUCTOR_PARAM) YY_SSLScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_SSLScanner_CONSTRUCTOR_CODE;
}
YY_SSLScanner_CLASS::~YY_SSLScanner_CLASS() 
{YY_SSLScanner_DESTRUCTOR_CODE;
 if(YY_SSLScanner_CURRENT_BUFFER)
  YY_SSLScanner_DELETE_BUFFER(YY_SSLScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 121
typedef int yy_state_type;
static const short int yy_acclist[478] =
    {   0,
      121,  118,  120,  116,  118,  120,  119,  120,   69,  118,
      120,  107,  118,  120,  118,  120,16501,  111,  118,  120,
       39,  118,  120,   37,  118,  120,   40,  118,  120,   45,
      118,  120,   46,  118,  120,  118,  120,   41,  118,  120,
      113,  118,  120,  113,  118,  120,  113,  118,  120,   68,
      118,  120,  110,  118,  120,   21,  118,  120,   19,  118,
      120,   22,  118,  120,   70,  118,  120,  104,  118,  120,
      104,  118,  120,  104,  118,  120,  104,  118,  120,  104,
      118,  120,  104,  118,  120,  104,  118,  120,  104,  118,
      120,  104,  118,  120,  109,  118,  120,  108,  118,  120,

       38,  118,  120,  100,  118,  120,  104,  118,  120,  104,
      118,  120,  104,  118,  120,  104,  118,  120,  104,  118,
      120,  104,  118,  120,  104,  118,  120,  104,  118,  120,
      104,  118,  120,  104,  118,  120,  104,  118,  120,   98,
      104,  118,  120,  104,  118,  120,  104,  118,  120,  104,
      118,  120,  104,  118,  120,   36,  118,  120,   62,  118,
      120,  116,  119,16501, 8309,   44,  101,   42,   16,   47,
       55,  113,  113,   64,   58,   67,  105,   43,   52,   65,
       34,   23,   25,   63,   24,   33,   26,  102,  104,  103,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   99,
      103,   17,  104,  104,   98,  104,   97,  103,   31,  104,
       32,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   20,  101,   48,   49,   56,   57,   59,   60,  105,
       53,   54,  112,  114,   66,   27,   28,   35,    8,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,   18,  104,  104,    9,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   61,  104,   29,  104,   30,  104,  104,  104,  104,

      104,  104,   96,  104,  104,  104,  104,   51,   50,  115,
      104,  104,   14,  104,  104,  104,   84,  104,  104,  104,
      104,  104,  104,  106,  104,  104,   87,  102,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   86,  102,  104,  104,   88,  102,
       96,  104,  104,  104,  104,  104,  104,  104,    3,  104,
       85,  104,  104,  104,  104,  104,   71,  102,  104,  104,
      104,  104,   81,  102,    4,  104,  104,  104,   74,  102,
      104,  104,   73,  102,  104,  104,   90,  102,   91,  102,
      104,   94,  102,   95,  102,  104,  104,  104,   12,  104,

      104,  104,  104,   10,  104,  104,   13,  104,  104,  104,
      104,  104,  104,   72,  102,  104,  104,   11,  104,   92,
      102,   79,  102,  104,  104,  104,   78,  102,  104,  104,
        1,  104,    5,  104,   89,  102,  104,  104,  104,   75,
      102,   80,  102,    2,  104,   77,  102,   76,  102,  104,
      104,  104,  104,  104,   93,  102,  104,  104,   15,  104,
      104,  104,  104,    6,  104,  104,    7,  104,  104,  104,
      104,   82,  102,  104,  104,   83,  102
    } ;

static const short int yy_accept[335] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   12,   15,   18,
       21,   24,   27,   30,   33,   36,   38,   41,   44,   47,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   77,
       80,   83,   86,   89,   92,   95,   98,  101,  104,  107,
      110,  113,  116,  119,  122,  125,  128,  131,  134,  137,
      140,  144,  147,  150,  153,  156,  159,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  170,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  180,  180,
      180,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  195,  196,  197,  198,

      199,  200,  201,  202,  202,  203,  204,  205,  206,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  217,
      218,  219,  220,  222,  224,  225,  227,  229,  231,  233,
      234,  235,  236,  237,  238,  239,  240,  241,  242,  243,
      244,  245,  246,  246,  247,  248,  249,  250,  251,  252,
      253,  254,  255,  255,  256,  257,  258,  259,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      272,  273,  275,  276,  278,  279,  280,  281,  282,  283,
      284,  285,  286,  287,  288,  289,  290,  291,  292,  294,
      296,  298,  299,  300,  301,  302,  303,  305,  306,  307,

      308,  309,  310,  311,  312,  313,  315,  316,  317,  319,
      320,  321,  322,  323,  324,  325,  325,  326,  327,  329,
      330,  331,  332,  333,  334,  335,  336,  337,  338,  339,
      340,  341,  342,  343,  344,  345,  347,  348,  349,  351,
      353,  354,  355,  356,  357,  358,  359,  361,  363,  364,
      365,  366,  367,  369,  370,  371,  372,  373,  375,  377,
      378,  379,  381,  382,  383,  385,  386,  387,  389,  391,
      392,  394,  396,  397,  398,  399,  401,  402,  403,  404,
      406,  407,  409,  410,  411,  412,  413,  414,  416,  417,
      418,  420,  422,  424,  425,  426,  427,  429,  430,  431,

      433,  435,  437,  438,  439,  440,  442,  444,  446,  448,
      450,  451,  452,  453,  454,  455,  457,  458,  459,  461,
      462,  463,  464,  466,  467,  469,  470,  471,  472,  474,
      475,  476,  478,  478
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       10,   12,   13,   10,   14,   15,   16,   17,   18,   19,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   10,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   37,   36,   38,   39,   40,
       36,   41,   42,   43,   44,   45,   36,   46,   36,   36,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   58,   58,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   58,   70,   71,
       58,   72,   10,   73,   10,   74,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    2,    3,    4,    1,    1,    1,    1,    1,
        5,    6,    1,    1,    7,    1,    8,    8,    8,    8,
        1,    1,    1,    1,    1,    1,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    5,    1,    1,    5,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,    1,    1
    } ;

static const short int yy_base[346] =
    {   0,
        0,    0,  268,  982,  258,    0,  982,  982,  255,  982,
      241,  982,   71,  183,   59,  223,   76,   77,   83,   92,
       61,  982,   82,  210,   62,  982,   70,   88,   82,  102,
       97,  103,  107,  105,  109,  982,  982,  229,    0,  108,
      114,  119,  122,  125,  142,  136,  148,  111,  128,  152,
      201,  167,  180,  154,  181,  982,  206,  223,    0,  210,
      982,  982,    0,  982,  982,  232,  245,  254,   92,  260,
      269,  982,  106,  982,    0,  982,  114,  236,  273,  178,
      164,  982,  982,  116,  982,  982,  115,  153,  982,  982,
      153,  982,  170,  195,  175,  265,  186,  259,  271,  283,

      284,  212,  286,    0,  236,  285,  288,  298,  300,  303,
      305,  306,  309,  311,  312,  318,  325,  326,  327,  330,
      329,  333,  982,  332,  335,  383,  982,  338,  351,  360,
      367,  372,  388,  377,  376,  385,  395,  397,  982,    0,
      111,  982,  113,  982,  982,  982,  982,    0,  982,  982,
      349,  433,  392,  982,  982,  982,  982,  410,  435,  420,
      425,  447,  432,  434,  436,  458,  437,  459,  460,  133,
      426,  464,  466,  474,  475,  476,  477,  479,  480,  482,
      484,  491,  492,  493,  497,  498,  499,  501,  503,  514,
      517,  519,  526,  530,  531,  532,  538,  544,  546,  547,

      982,  982,  398,  548,  549,  557,  558,  569,  561,  575,
      564,  576,  572,  571,  982,  121,  570,  577,  982,  579,
      589,  592,  599,  603,  604,  609,  610,  616,  618,  620,
      621,  626,  622,  623,  627,  982,  633,  636,  982,  637,
      638,  641,  642,  648,  649,  661,  647,  665,  668,  675,
      666,  682,  982,  671,  689,  690,  692,  982,  694,  696,
      698,  982,  700,  699,  982,  708,  709,  982,  982,  710,
      982,  982,  712,  714,  715,  717,  720,  719,  727,  723,
      758,  724,  729,  731,  737,  738,  761,  982,  764,  766,
      769,  982,  982,  771,  772,  775,  982,  778,  779,  780,

      781,  982,  783,  784,  786,  982,  982,  787,  982,  982,
      789,  793,  791,  795,  801,  982,  803,  810,  804,  806,
      813,  818,  830,  834,  836,  838,  843,  845,  982,  844,
      847,  982,  982,  911,  921,  929,  937,  941,  947,  949,
      952,  956,  958,  965,  971
    } ;

static const short int yy_def[346] =
    {   0,
      333,    1,  333,  333,  333,  334,  333,  333,  335,  333,
      336,  333,  337,  333,  333,  338,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  333,  333,  333,  340,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  333,  333,  333,  334,  335,
      333,  333,  341,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  342,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      339,  333,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  343,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  333,  339,  339,  339,  333,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  333,  341,
      333,  333,  333,  333,  333,  333,  333,  342,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  344,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  345,  339,  339,  339,

      333,  333,  333,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  333,  344,  339,  339,  333,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  333,  339,  339,  333,  345,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  333,  339,  339,  339,  339,  333,  339,  339,
      339,  333,  339,  339,  333,  339,  339,  333,  333,  339,
      333,  333,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  333,  339,  339,
      339,  333,  333,  339,  339,  339,  333,  339,  339,  339,

      339,  333,  339,  339,  339,  333,  333,  339,  333,  333,
      339,  339,  339,  339,  339,  333,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  333,  339,
      339,  333,    0,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333
    } ;

static const short int yy_nxt[1057] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,    8,
        8,   13,   14,   15,   16,   17,   18,   19,   20,   19,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   27,
       30,   31,   27,   27,   32,   27,   33,   27,   34,   27,
       27,   35,   27,   27,   27,   27,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   27,   27,   46,   47,
       48,   27,   49,   50,   27,   51,   52,   53,   54,   27,
       27,   55,   56,   57,   64,   70,   70,   71,   70,   76,
       90,   81,   65,   72,   82,   87,   88,   66,   66,   66,
       66,   78,   90,   70,   70,   70,   70,   78,   90,   70,

       70,   70,   70,   80,   83,   84,   78,   90,   70,   70,
       70,   70,   90,   90,   73,   90,   92,   90,   90,   90,
       94,   90,   93,   96,   90,  215,   68,   97,   92,   90,
       89,   77,   90,   98,   92,   90,   99,  215,   90,   95,
      100,  101,  103,   92,  102,  144,   90,   79,   92,   92,
       85,   92,   90,   92,   92,   92,  145,  123,   90,  146,
       92,  106,   90,   90,   90,   92,  202,  149,   92,  107,
      147,   92,  109,  108,   92,  201,  111,   90,  150,  157,
       90,  110,   92,  156,  155,   90,  112,  154,   92,  153,
       90,   90,  114,  124,   92,  113,   90,  119,   92,   92,

       92,  115,  158,  120,  160,   90,  121,  116,  117,  118,
      122,   90,   61,   92,  125,  137,   92,  126,  126,  126,
      126,   92,   90,  130,   58,  131,   92,   92,  162,  139,
      134,  132,   92,  104,   86,  133,  138,   74,   69,  159,
      135,   92,  168,   65,   62,  136,   90,  127,   66,   66,
       66,   66,  151,  151,  151,  151,   65,   61,   92,   58,
      128,   66,   66,   66,   66,   65,  129,  333,  333,   90,
       66,   66,   66,   66,   78,   90,   70,   70,   70,   70,
       80,   90,   92,   78,  333,   70,   70,   70,   70,  152,
      152,  152,  152,   90,   90,   90,   90,  163,   90,  152,

      152,  152,  152,  152,  152,   92,  161,  141,   90,  164,
       90,   92,  169,   90,  165,   90,   90,   92,  142,   90,
      143,   90,   90,  333,  333,  166,  167,  333,   90,   92,
       92,   92,   92,  333,   92,   90,   90,   90,  171,   90,
       90,  172,   90,   90,   92,   90,   92,  333,   90,   92,
      173,   92,   92,  333,  333,   92,  174,   92,   92,  177,
      176,   90,  179,  178,   92,  151,  151,  151,  151,  175,
       90,   92,   92,   92,  180,   92,   92,   90,   92,   92,
      181,   92,   90,  182,   92,  333,   90,   90,  183,  188,
      190,  184,  186,   90,  185,   90,  187,   92,   90,  126,

      126,  126,  126,  191,  189,   90,   92,   90,  203,  203,
      203,  203,  333,   92,  203,  203,  203,  203,   92,  333,
       90,  192,   92,   92,  333,  333,  333,  333,  193,   92,
       90,   92,  333,  333,   92,   90,   90,  194,  196,  197,
      195,   92,   90,   92,   90,   90,   90,   90,  199,  152,
      152,  152,  152,  198,  205,  200,   92,   90,  208,  152,
      152,  152,  152,  152,  152,  204,   92,  206,   90,   90,
       90,   92,   92,  209,   90,  207,   90,  210,   92,  212,
       92,   92,   92,   92,   90,  219,   90,   90,  211,   90,
       90,  217,   90,   92,   90,  333,  333,  333,  333,  213,

      214,   90,   90,   90,   92,   92,   92,   90,   90,   90,
       92,   90,   92,   90,  333,  333,  333,  333,  232,  233,
       92,   92,   92,   92,   90,   92,   92,   90,   92,   90,
       92,  222,  224,  218,  220,  221,  236,   92,   92,   92,
       90,   90,  239,   92,   92,   92,  223,   92,   90,   92,
      227,  229,  225,  230,   90,  234,   90,   90,   90,   90,
       92,  228,  226,   92,  333,   92,  231,   90,   90,  333,
      333,   90,   92,  235,   90,  245,   92,   92,   92,   90,
      253,   90,   90,  238,   92,   90,   90,   90,  244,   90,
       92,  246,   92,   92,   92,   92,  249,  237,  251,   90,

      242,  252,   90,   92,   92,  241,  243,   92,  248,  258,
       92,  247,  250,   90,   90,   92,   92,   92,   92,   90,
      262,   92,   92,   92,  333,   92,   90,  254,   90,  333,
      265,   90,  268,  269,  333,   92,   90,   90,   92,  256,
      255,  333,  267,  271,  333,   92,  272,   90,   90,   92,
       92,   90,   90,  333,  333,   92,   92,   90,   90,   90,
      257,  333,   92,  261,   92,  260,   92,   92,   92,   92,
      259,   90,   92,   92,  264,   90,   90,  263,   90,   92,
      266,   90,   92,   92,   92,   90,  277,   92,   92,  276,
      273,  278,   90,   92,   92,   92,  274,  270,  279,   90,

       90,  275,   90,  281,   90,  280,   90,   92,  288,   90,
       90,   92,   92,  333,   92,  333,  333,   92,   90,  292,
      293,   92,   90,  282,   90,  297,  333,   90,   92,   90,
       90,  333,  283,   90,   90,   92,   92,   90,   92,  302,
       92,   90,   92,  284,   92,   92,   92,   90,   90,  287,
      333,  285,  289,  290,   92,   92,   92,  298,   92,  286,
       92,   92,  291,   92,  299,   92,   92,  300,   90,   92,
       92,  306,  296,   92,  307,   92,   90,   92,  294,   90,
      295,  309,  310,   92,   92,   90,  303,  301,   90,   90,
       90,   90,  305,   90,   90,  333,  316,   90,  304,   90,

      333,   90,  333,   90,   92,   90,  333,   92,  312,  313,
       92,   90,   92,   90,   90,   92,   90,   92,   92,  319,
       90,   92,  333,   90,   92,   92,   92,   92,   90,   92,
       92,  308,   92,   92,  318,   92,  311,   92,  315,   92,
       90,   92,  314,  317,   90,  320,   90,   92,   90,   92,
       92,  323,   92,  329,   90,   90,   92,  332,  322,   92,
      333,  333,  324,  333,   92,  333,  333,  321,  333,  333,
      333,  333,  333,  333,  333,  333,   92,  326,  333,  325,
       92,  333,   92,  333,   92,  333,  333,  333,  328,   92,
       92,   92,  333,   92,  333,  333,  333,  333,  333,  333,

      327,  330,  333,  333,  333,  333,  333,  333,  333,  333,
      331,   59,  333,   59,   59,   59,   59,   59,   59,   59,
       59,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   63,  333,  333,  333,  333,  333,   63,   63,   67,
      333,  333,   67,  333,   67,  333,   67,   75,  333,   75,
       75,   91,  333,  333,   91,   91,   91,  105,  105,  140,
      140,  140,  148,  148,  148,  148,  170,  170,  216,  333,
      333,  333,  333,  216,  216,  240,  333,  333,  240,  240,
      240,    3,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333
    } ;

static const short int yy_chk[1057] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   13,   15,   15,   15,   15,   17,
       27,   21,   13,   15,   21,   25,   25,   13,   13,   13,
       13,   18,   29,   18,   18,   18,   18,   19,   28,   19,

       19,   19,   19,   20,   23,   23,   20,   31,   20,   20,
       20,   20,   30,   32,   15,   34,   27,   33,   40,   35,
       29,   48,   28,   31,   41,  216,   13,   31,   29,   42,
       25,   17,   43,   31,   28,   44,   31,  170,   49,   30,
       32,   33,   35,   31,   34,   69,   46,   18,   30,   32,
       23,   34,   45,   33,   40,   35,   69,   48,   47,   73,
       41,   40,   50,   91,   54,   42,  143,   77,   43,   40,
       73,   44,   41,   40,   49,  141,   43,   52,   77,   88,
       93,   42,   46,   87,   84,   95,   44,   81,   45,   80,
       53,   55,   45,   49,   47,   44,   97,   46,   50,   91,

       54,   45,   93,   46,   95,   94,   47,   45,   45,   45,
       47,   51,   60,   52,   50,   54,   93,   51,   51,   51,
       51,   95,  102,   52,   58,   52,   53,   55,   97,   57,
       53,   52,   97,   38,   24,   52,   55,   16,   14,   94,
       53,   94,  102,   66,   11,   53,  105,   51,   66,   66,
       66,   66,   78,   78,   78,   78,   67,    9,  102,    5,
       51,   67,   67,   67,   67,   68,   51,    3,    0,   98,
       68,   68,   68,   68,   70,   96,   70,   70,   70,   70,
       71,   99,  105,   71,    0,   71,   71,   71,   71,   79,
       79,   79,   79,  100,  101,  106,  103,   98,  107,   79,

       79,   79,   79,   79,   79,   98,   96,   68,  108,   99,
      109,   96,  103,  110,   99,  111,  112,   99,   68,  113,
       68,  114,  115,    0,    0,  100,  101,    0,  116,  100,
      101,  106,  103,    0,  107,  117,  118,  119,  106,  121,
      120,  107,  124,  122,  108,  125,  109,    0,  128,  110,
      108,  111,  112,    0,    0,  113,  109,  114,  115,  112,
      111,  129,  114,  113,  116,  151,  151,  151,  151,  110,
      130,  117,  118,  119,  115,  121,  120,  131,  124,  122,
      116,  125,  132,  117,  128,    0,  135,  134,  118,  122,
      128,  118,  120,  126,  119,  136,  121,  129,  133,  126,

      126,  126,  126,  129,  125,  137,  130,  138,  153,  153,
      153,  153,    0,  131,  203,  203,  203,  203,  132,    0,
      158,  130,  135,  134,    0,    0,    0,    0,  131,  126,
      160,  136,    0,    0,  133,  161,  171,  132,  134,  135,
      133,  137,  163,  138,  164,  159,  165,  167,  137,  152,
      152,  152,  152,  136,  160,  138,  158,  162,  163,  152,
      152,  152,  152,  152,  152,  159,  160,  161,  166,  168,
      169,  161,  171,  164,  172,  162,  173,  165,  163,  167,
      164,  159,  165,  167,  174,  175,  176,  177,  166,  178,
      179,  171,  180,  162,  181,    0,    0,    0,    0,  168,

      169,  182,  183,  184,  166,  168,  169,  185,  186,  187,
      172,  188,  173,  189,    0,    0,    0,    0,  188,  188,
      174,  175,  176,  177,  190,  178,  179,  191,  180,  192,
      181,  178,  180,  173,  176,  177,  193,  182,  183,  184,
      194,  195,  196,  185,  186,  187,  179,  188,  197,  189,
      183,  185,  181,  186,  198,  188,  199,  200,  204,  205,
      190,  184,  182,  191,    0,  192,  187,  206,  207,    0,
        0,  209,  193,  192,  211,  205,  194,  195,  196,  208,
      217,  214,  213,  195,  197,  210,  212,  218,  204,  220,
      198,  207,  199,  200,  204,  205,  211,  194,  213,  221,

      199,  214,  222,  206,  207,  198,  200,  209,  210,  223,
      211,  208,  212,  224,  225,  208,  217,  214,  213,  226,
      227,  210,  212,  218,    0,  220,  228,  218,  229,    0,
      230,  231,  233,  234,    0,  221,  232,  235,  222,  221,
      220,    0,  232,  237,    0,  223,  238,  240,  241,  224,
      225,  242,  243,    0,    0,  226,  227,  247,  244,  245,
      222,    0,  228,  226,  229,  225,  230,  231,  233,  234,
      224,  246,  232,  235,  229,  248,  251,  228,  249,  237,
      231,  254,  238,  240,  241,  250,  245,  242,  243,  244,
      241,  246,  252,  247,  244,  245,  242,  235,  249,  255,

      256,  243,  257,  251,  259,  250,  260,  246,  261,  264,
      263,  248,  251,    0,  249,    0,    0,  254,  266,  267,
      270,  250,  273,  252,  274,  275,    0,  276,  252,  278,
      277,    0,  254,  280,  282,  255,  256,  279,  257,  283,
      259,  284,  260,  255,  261,  264,  263,  285,  286,  260,
        0,  256,  263,  264,  266,  267,  270,  277,  273,  257,
      274,  275,  266,  276,  278,  278,  277,  279,  281,  280,
      282,  287,  274,  279,  289,  283,  290,  284,  273,  291,
      273,  294,  295,  285,  286,  296,  284,  281,  298,  299,
      300,  301,  286,  303,  304,    0,  305,  308,  285,  311,

        0,  313,    0,  312,  281,  314,    0,  287,  298,  299,
      289,  315,  290,  317,  319,  291,  320,  294,  295,  313,
      318,  296,    0,  321,  298,  299,  300,  301,  322,  303,
      304,  290,  305,  308,  312,  311,  296,  313,  304,  312,
      323,  314,  303,  311,  324,  314,  325,  315,  326,  317,
      319,  318,  320,  327,  330,  328,  318,  331,  317,  321,
        0,    0,  320,    0,  322,    0,    0,  315,    0,    0,
        0,    0,    0,    0,    0,    0,  323,  322,    0,  321,
      324,    0,  325,    0,  326,    0,    0,    0,  326,  327,
      330,  328,    0,  331,    0,    0,    0,    0,    0,    0,

      324,  328,    0,    0,    0,    0,    0,    0,    0,    0,
      330,  334,    0,  334,  334,  334,  334,  334,  334,  334,
      334,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  336,    0,    0,    0,    0,    0,  336,  336,  337,
        0,    0,  337,    0,  337,    0,  337,  338,    0,  338,
      338,  339,    0,    0,  339,  339,  339,  340,  340,  341,
      341,  341,  342,  342,  342,  342,  343,  343,  344,    0,
        0,    0,    0,  344,  344,  345,    0,    0,  345,  345,
      345,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_SSLScanner_DEBUG != 0
static const short int yy_rule_linenum[120] =
    {   0,
       64,   65,   66,   67,   68,   69,   70,   74,   75,   79,
       80,   84,   85,   86,   87,   89,   94,   95,   99,  100,
      101,  102,  103,  104,  105,  106,  107,  108,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  127,  128,
      129,  130,  131,  132,  133,  134,  138,  139,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  150,  151,
      152,  156,  159,  162,  165,  168,  172,  175,  178,  181,
      184,  187,  188,  189,  190,  191,  192,  193,  194,  199,
      204,  209,  210,  213,  214,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  229,  233,  238,  239,  241,  242,

      243,  247,  252,  257,  261,  262,  266,  267,  268,  269,
      270,  271,  275,  280,  285,  297,  298,  299,  300
    } ;

#endif
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "//usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_SSLScanner_LEX_DEFINED
YY_SSLScanner_LEX_RETURN YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM )
YY_SSLScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_SSLScanner_LEX_RETURN YY_SSLScanner_CLASS::YY_SSLScanner_LEX ( YY_SSLScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "//usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_SSLScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_SSLScanner_OFILE_DEFAULT;

	if ( YY_SSLScanner_CURRENT_BUFFER )
	    YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_SSLScanner_CURRENT_BUFFER = YY_SSLScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_SSLScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "//usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 334 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 333 );
#line 440 "//usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }
#line 443 "//usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_SSLScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_SSLScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
case 1:
#line 65 "sslscanner.l"
case 2:
#line 65 "sslscanner.l"
{ return SSLParser::TOK_INTEGER; }
	YY_BREAK
case 3:
#line 67 "sslscanner.l"
case 4:
#line 67 "sslscanner.l"
{ return SSLParser::TOK_FLOAT; }
	YY_BREAK
case 5:
#line 68 "sslscanner.l"
{ return SSLParser::OPERAND; }
	YY_BREAK
case 6:
#line 70 "sslscanner.l"
case 7:
#line 70 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::ENDIANNESS;
             }
	YY_BREAK
case 8:
#line 75 "sslscanner.l"
case 9:
#line 75 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::BIG;
             }
	YY_BREAK
case 10:
#line 80 "sslscanner.l"
case 11:
#line 80 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::LITTLE;
             }
	YY_BREAK
case 12:
#line 84 "sslscanner.l"
{ return SSLParser::COVERS; }
	YY_BREAK
case 13:
#line 85 "sslscanner.l"
{ return SSLParser::SHARES; }
	YY_BREAK
case 14:
#line 86 "sslscanner.l"
{ return SSLParser::FAST; }
	YY_BREAK
case 15:
#line 87 "sslscanner.l"
{ return SSLParser::FETCHEXEC; }
	YY_BREAK
case 16:
#line 89 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::ASSIGNTYPE;
             }
	YY_BREAK
case 17:
#line 95 "sslscanner.l"
case 18:
#line 95 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::LOG_OP;
             }
	YY_BREAK
case 19:
#line 100 "sslscanner.l"
case 20:
#line 101 "sslscanner.l"
case 21:
#line 102 "sslscanner.l"
case 22:
#line 103 "sslscanner.l"
case 23:
#line 104 "sslscanner.l"
case 24:
#line 105 "sslscanner.l"
case 25:
#line 106 "sslscanner.l"
case 26:
#line 107 "sslscanner.l"
case 27:
#line 108 "sslscanner.l"
case 28:
#line 108 "sslscanner.l"
{
               yylval.str = strdup(yytext);
               return SSLParser::COND_OP;
             }
	YY_BREAK
case 29:
#line 114 "sslscanner.l"
case 30:
#line 115 "sslscanner.l"
case 31:
#line 116 "sslscanner.l"
case 32:
#line 117 "sslscanner.l"
case 33:
#line 118 "sslscanner.l"
case 34:
#line 119 "sslscanner.l"
case 35:
#line 120 "sslscanner.l"
case 36:
#line 121 "sslscanner.l"
case 37:
#line 122 "sslscanner.l"
case 38:
#line 122 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::BIT_OP;

      }
	YY_BREAK
case 39:
#line 128 "sslscanner.l"
case 40:
#line 129 "sslscanner.l"
case 41:
#line 130 "sslscanner.l"
case 42:
#line 131 "sslscanner.l"
case 43:
#line 132 "sslscanner.l"
case 44:
#line 133 "sslscanner.l"
case 45:
#line 134 "sslscanner.l"
case 46:
#line 134 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ARITH_OP;
      }
	YY_BREAK
case 47:
#line 139 "sslscanner.l"
case 48:
#line 140 "sslscanner.l"
case 49:
#line 141 "sslscanner.l"
case 50:
#line 142 "sslscanner.l"
case 51:
#line 143 "sslscanner.l"
case 52:
#line 144 "sslscanner.l"
case 53:
#line 145 "sslscanner.l"
case 54:
#line 146 "sslscanner.l"
case 55:
#line 147 "sslscanner.l"
case 56:
#line 148 "sslscanner.l"
case 57:
#line 149 "sslscanner.l"
case 58:
#line 150 "sslscanner.l"
case 59:
#line 151 "sslscanner.l"
case 60:
#line 152 "sslscanner.l"
case 61:
#line 152 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::FARITH_OP;
      }
	YY_BREAK
case 62:
#line 156 "sslscanner.l"
{
        return SSLParser::NOT;
      }
	YY_BREAK
case 63:
#line 159 "sslscanner.l"
{
        return SSLParser::THEN;
      }
	YY_BREAK
case 64:
#line 162 "sslscanner.l"
{
        return SSLParser::INDEX;
       }
	YY_BREAK
case 65:
#line 165 "sslscanner.l"
{
        return SSLParser::EQUATE;
      }
	YY_BREAK
case 66:
#line 168 "sslscanner.l"
{
        yylval.str = strdup(yytext);
        return SSLParser::ASSIGN;
      }
	YY_BREAK
case 67:
#line 172 "sslscanner.l"
{
        return SSLParser::TO;
      }
	YY_BREAK
case 68:
#line 175 "sslscanner.l"
{
        return SSLParser::COLON;
      }
	YY_BREAK
case 69:
#line 178 "sslscanner.l"
{
        return SSLParser::S_E;
      }
	YY_BREAK
case 70:
#line 181 "sslscanner.l"
{
        return SSLParser::AT;
      }
	YY_BREAK
case 71:
#line 184 "sslscanner.l"
{
                return SSLParser::ADDR;
            }
	YY_BREAK
case 72:
#line 188 "sslscanner.l"
case 73:
#line 189 "sslscanner.l"
case 74:
#line 190 "sslscanner.l"
case 75:
#line 191 "sslscanner.l"
case 76:
#line 192 "sslscanner.l"
case 77:
#line 193 "sslscanner.l"
case 78:
#line 194 "sslscanner.l"
case 79:
#line 194 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::CONV_FUNC;
            }
	YY_BREAK
case 80:
#line 199 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::TRUNC_FUNC;
            }
	YY_BREAK
case 81:
#line 204 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::FABS_FUNC;
            }
	YY_BREAK
case 82:
#line 210 "sslscanner.l"
case 83:
#line 210 "sslscanner.l"
{
                return SSLParser::FLAGMACRO;
                }
	YY_BREAK
case 84:
#line 213 "sslscanner.l"
{   return SSLParser::FPOP; }
	YY_BREAK
case 85:
#line 214 "sslscanner.l"
{   return SSLParser::FPUSH; }
	YY_BREAK
case 86:
#line 216 "sslscanner.l"
case 87:
#line 217 "sslscanner.l"
case 88:
#line 218 "sslscanner.l"
case 89:
#line 219 "sslscanner.l"
case 90:
#line 220 "sslscanner.l"
case 91:
#line 221 "sslscanner.l"
case 92:
#line 222 "sslscanner.l"
case 93:
#line 223 "sslscanner.l"
case 94:
#line 223 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::TRANSCEND;
			}
	YY_BREAK
case 95:
#line 229 "sslscanner.l"
{
				return SSLParser::SUCCESSOR;
            }
	YY_BREAK
case 96:
#line 233 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::TEMP;
            }
	YY_BREAK
case 97:
#line 238 "sslscanner.l"
{   return SSLParser::REG_IDX; }
	YY_BREAK
case 98:
#line 239 "sslscanner.l"
{   yylval.str = strdup(yytext);
                return SSLParser::REG_NUM; }
	YY_BREAK
case 99:
#line 241 "sslscanner.l"
{   return SSLParser::MEM_IDX; }
	YY_BREAK
case 100:
#line 242 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 101:
#line 243 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::REG_ID;
            }
	YY_BREAK
case 102:
#line 247 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_CALL;
            }
	YY_BREAK
case 103:
#line 252 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                yylval.str[strlen(yylval.str)-1] = '\0';
                return SSLParser::NAME_LOOKUP;
            }
	YY_BREAK
case 104:
#line 257 "sslscanner.l"
{
                yylval.str = strdup(yytext);
                return SSLParser::NAME;
            }
	YY_BREAK
case 105:
#line 262 "sslscanner.l"
case 106:
#line 262 "sslscanner.l"
{
                    yylval.str = strdup(yytext);
                    return SSLParser::DECOR;
            }
	YY_BREAK
case 107:
#line 266 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 108:
#line 267 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 109:
#line 268 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 110:
#line 269 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 111:
#line 270 "sslscanner.l"
{   return yytext[0];   }
	YY_BREAK
case 112:
#line 271 "sslscanner.l"
{
        yylval.dbl = atof(yytext);
        return SSLParser::FLOATNUM;
     }
	YY_BREAK
case 113:
#line 275 "sslscanner.l"
{
        yylval.num = strtol(yytext,0,10);
        return SSLParser::NUM;
     }
	YY_BREAK
case 114:
#line 280 "sslscanner.l"
{
        yylval.num = strtol(yytext,0,16);
        return SSLParser::NUM;
     }
	YY_BREAK
case 115:
#line 285 "sslscanner.l"
{
                    // a power of two
                    int sign = (yytext[0] == '-' ? -1 : 1);
                    char* start = yytext + (sign == -1 ? 4:3);

                        // David - changed to << for more efficient and 
                        // not depend on the <cmath> anymore.
                    yylval.num = 1 << (strtol(start,0,10) * sign);
                        // yylval.num = (int)pow(2,strtol(start,0,10)) * sign;
                    return SSLParser::NUM;
                }
	YY_BREAK
case 116:
#line 297 "sslscanner.l"
;
	YY_BREAK
case 117:
#line 298 "sslscanner.l"
;   /* comment */
	YY_BREAK
case 118:
#line 299 "sslscanner.l"
;
	YY_BREAK
case 119:
#line 300 "sslscanner.l"
{   // funky print-next-line-for-debug token
                    if (yyleng > MAX_LINE)
                    {
                        std::cerr << theLine + 1 << ": line too long.\n";
                        exit(1);
                    }
                    // saves the next line
                    strcpy(lineBuf, yytext+1);
                    theLine++;
                    // reparse from char 1
                    // give back all but the \n to rescan
                    yyless(1);

                    // echo the line if line tracing is turned on
                    if (traceLines)
                    std::cerr << lineBuf << std::endl;

                    // Quell a warning
                    yy_last_accepting_state = 0;
                    yy_last_accepting_cpos = 0;
                }
	YY_BREAK
case 120:
#line 321 "sslscanner.l"
ECHO;
	YY_BREAK
	    case YY_STATE_EOF(INITIAL):
		yyterminate();
#line 493 "//usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
#line 541 "//usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_SSLScanner_DEBUG != 0
#ifndef YY_SSLScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_SSLScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_SSLScanner_CHAR *dest = YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_SSLScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_SSLScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_SSLScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_SSLScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_SSLScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_SSLScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_SSLScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;
#line 717 "//usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 334 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
#line 721 "//usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_SSLScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 334 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 333);
#line 755 "//usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_SSLScanner_CHAR c, register YY_SSLScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_SSLScanner_CHAR c;
register YY_SSLScanner_CHAR *yy_bp;
#endif
#else
void YY_SSLScanner_CLASS::yyunput( YY_SSLScanner_CHAR c, YY_SSLScanner_CHAR *yy_bp )
#endif

    {
    register YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_SSLScanner_CHAR *dest =
	    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[YY_SSLScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_SSLScanner_CHAR *source =
	    &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_SSLScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_SSLScanner_CLASS::input()
#endif
    {
    int c;
    YY_SSLScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_SSLScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_SSLScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_RESTART( YY_SSLScanner_IFILE  *input_file )
#else
void YY_SSLScanner_RESTART( input_file )
YY_SSLScanner_IFILE  *input_file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_RESTART ( YY_SSLScanner_IFILE  *input_file )
#endif

    {
    YY_SSLScanner_INIT_BUFFER( YY_SSLScanner_CURRENT_BUFFER, input_file );
    YY_SSLScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_SSLScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_SSLScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_SSLScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_SSLScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_SSLScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_SSLScanner_CURRENT_BUFFER = new_buffer;
    YY_SSLScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_LOAD_BUFFER_STATE( void )
#else
void YY_SSLScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_SSLScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_SSLScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_SSLScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( YY_SSLScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_SSLScanner_CREATE_BUFFER( file, size )
YY_SSLScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_SSLScanner_CLASS::YY_SSLScanner_CREATE_BUFFER( YY_SSLScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_SSLScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_SSLScanner_CREATE_BUFFER()" );

    YY_SSLScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_SSLScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_SSLScanner_CURRENT_BUFFER )
	YY_SSLScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SSLScanner_IFILE  *file )
#else
void YY_SSLScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_SSLScanner_IFILE  *file;
#endif
#else
void YY_SSLScanner_CLASS::YY_SSLScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_SSLScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 321 "sslscanner.l"

