#define sign_extend(N,SIZE) (((int)((N) << (sizeof(unsigned)*8-(SIZE)))) >> (sizeof(unsigned)*8-(SIZE)))
#include <assert.h>

#line 1 "frontend/machine/pentium/decoder.m"
/*
 * Copyright (C) 1998-2001, The University of Queensland
 *
 * See the file "LICENSE.TERMS" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL
 * WARRANTIES.
 *
 */

/*==============================================================================
 * FILE:       decoder.m
 * OVERVIEW:   This file contains the high level decoding functionality, for
 *              example matching logues, calls, branches, etc. Ordinary
 *              instructions are processed in decoder_low.m
 *============================================================================*/ 
/*
 * $Revision: 1.46 $
 *
 * 26 Apr 02 - Mike: Changes for boomerang
 * 18 Nov 02 - Mike: Mods for MOV.Ed.Iv^od etc. Also suppressed warning re name
 * 09 Dec 02 - Mike: Changed DIS_REG32 to use dis_Reg again, because in the
 *				SSL file we have reg32 instead of r[reg32] (compat with SPARC)
 * 07 May 03 - Mike: Fixed several arithmetic and logical "iodb" instructions
 *              that had 8 bit instead of 32 bit modrm sizes
 * 24 Oct 03 - Mike: Fixed DIS_IDXP1: did not have +32 in macro
*/

#include <assert.h>
#if defined(_MSC_VER) && _MSC_VER <= 1100
#include "signature.h"
#endif

#include "rtl.h"
#include "decoder.h"
#include "pentiumdecoder.h"
#include "prog.h"
#include "exp.h"
#include "proc.h"
#include "boomerang.h"
#include "statement.h"

#define DIS_R8    (dis_Reg(r8+8))
#define DIS_R16   (dis_Reg(r16+0))
#define DIS_R32   (dis_Reg(r32+24))
#define DIS_REG8  (dis_Reg(reg+8))
#define DIS_REG16 (dis_Reg(reg+0))
#define DIS_REG32 (dis_Reg(reg+24))
#define DIS_SR16  (dis_Reg(sr16+16))
#define DIS_IDX   (dis_Reg(idx+32))
#define DIS_IDXP1 (dis_Reg((idx+1)%7+32))

#define DIS_EADDR32 (dis_Eaddr(Eaddr, 32))
#define DIS_EADDR16 (dis_Eaddr(Eaddr, 16))
#define DIS_EADDR8  (dis_Eaddr(Eaddr,  8))
#define DIS_MEM     (dis_Mem(Mem))
#define DIS_MEM16   (dis_Mem(Mem16))    // Probably needs changing
#define DIS_MEM32   (dis_Mem(Mem32))    // Probably needs changing
#define DIS_MEM64   (dis_Mem(Mem64))    // Probably needs changing
#define DIS_MEM80   (dis_Mem(Mem80))    // Probably needs changing

#define DIS_I32     (new Const(i32))
#define DIS_I16     (new Const(i16))
#define DIS_I8      (new Const(i8))
#define DIS_COUNT   (new Const(count))
#define DIS_OFF     (new Const(off))


// Function to generate statements for the BSF/BSR series (Bit Scan Forward/
// Reverse)
void genBSFR(ADDRESS pc, Exp* reg, Exp* modrm, int init, int size, OPER incdec,
    int numBytes);

/**********************************
 * PentiumDecoder methods.
 **********************************/   

/*==============================================================================
 * FUNCTION:       unused
 * OVERVIEW:       A dummy function to suppress "unused local variable" messages
 * PARAMETERS:     x: integer variable to be "used"
 * RETURNS:        Nothing
 *============================================================================*/
void PentiumDecoder::unused(int x)
{}

/*==============================================================================
 * FUNCTION:       PentiumDecoder::decodeInstruction
 * OVERVIEW:       Decodes a machine instruction and returns an RTL instance. In
 *                 most cases a single instruction is decoded. However, if a
 *                 higher level construct that may consist of multiple
 *                 instructions is matched, then there may be a need to return
 *                 more than one RTL. The caller_prologue2 is an example of such
 *                 a construct which encloses an abritary instruction that must
 *                 be decoded into its own RTL.
 * PARAMETERS:     pc - the native address of the pc
 *                 delta - the difference between the above address and the
 *                   host address of the pc (i.e. the address that the pc is at
 *                   in the loaded object file)
 *                 RTLDict - the dictionary of RTL templates used to instantiate
 *                   the RTL for the instruction being decoded
 *                 proc - the enclosing procedure
 * RETURNS:        a DecodeResult structure containing all the information
 *                   gathered during decoding
 *============================================================================*/
static DecodeResult result;
DecodeResult& PentiumDecoder::decodeInstruction (ADDRESS pc, int delta)
{
    ADDRESS hostPC = pc + delta;

    // Clear the result structure;
    result.reset();

    // The actual list of instantiated Statements
    std::list<Statement*>* stmts = NULL;


    ADDRESS nextPC = NO_ADDRESS;


#line 117 "frontend/machine/pentium/decoder.m"
{ 
  dword MATCH_p = 
    
#line 117 "frontend/machine/pentium/decoder.m"
    hostPC
    ;
  char *MATCH_name;
  char *MATCH_name_page_0[] = {"REPNE.MOVSB", "JMP.Jvow", };
  char *MATCH_name_page_1[] = {"REPNE.MOVSvow", "REPNE.STOSvow", };
  char *MATCH_name_page_2[] = {"REPNE.CMPSvow", "REPNE.LODSvow", };
  char *MATCH_name_page_3[] = {"REP.MOVSvow", "REPNE.SCASvow", };
  char *MATCH_name_page_4[] = {"REPNE.MOVSvod", "REPNE.STOSB", };
  char *MATCH_name_page_5[] = {"REPNE.CMPSB", "REPNE.STOSvod", };
  char *MATCH_name_page_6[] = {"REPNE.CMPSvod", "REPNE.LODSB", };
  char *MATCH_name_page_7[] = {"REP.MOVSB", "REPNE.LODSvod", };
  char *MATCH_name_page_8[] = {"REP.MOVSvod", "REPNE.SCASB", };
  char *MATCH_name_page_9[] = {"REP.CMPSB", "REPNE.SCASvod", };
  char *MATCH_name_page_10[] = {"REP.CMPSvow", "REP.STOSvow", };
  char *MATCH_name_page_13[] = {"REP.CMPSvod", "REP.STOSB", };
  char *MATCH_name_col_59[] = {(char *)0, "JMP.Jvod", (char *)0, "JMP.Jb", };
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned /* [0..65535] */ MATCH_w_16_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned /* [0..65535] */ MATCH_w_16_16;
  unsigned MATCH_w_32_16;
  unsigned /* [0..255] */ MATCH_w_8_24;
  unsigned /* [0..65535] */ MATCH_w_16_24;
  unsigned MATCH_w_32_24;
  unsigned /* [0..255] */ MATCH_w_8_32;
  unsigned /* [0..65535] */ MATCH_w_16_32;
  unsigned MATCH_w_32_32;
  unsigned /* [0..255] */ MATCH_w_8_40;
  unsigned /* [0..65535] */ MATCH_w_16_40;
  unsigned /* [0..255] */ MATCH_w_8_48;
  unsigned MATCH_w_32_48;
  unsigned /* [0..255] */ MATCH_w_8_56;
  unsigned /* [0..65535] */ MATCH_w_16_56;
  unsigned MATCH_w_32_56;
  unsigned /* [0..255] */ MATCH_w_8_64;
  unsigned /* [0..65535] */ MATCH_w_16_64;
  unsigned /* [0..255] */ MATCH_w_8_72;
  { 
    MATCH_w_8_0 = getByte(MATCH_p); 
    if ((MATCH_w_8_0 >> 3 & 0x1) /* page at 0 */ == 1) 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c785; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c787;  /*opt-block+*/
                              else 
                                goto MATCH_label_c786;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c788; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1535 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ORmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c786;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c787;  /*opt-block+*/
                        else 
                          goto MATCH_label_c788;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c785; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c789; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c791;  /*opt-block+*/
                              else 
                                goto MATCH_label_c790;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c792; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1505 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ORmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c790;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c791;  /*opt-block+*/
                        else 
                          goto MATCH_label_c792;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c789; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c793; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c795;  /*opt-block+*/
                              else 
                                goto MATCH_label_c794;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c796; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1463 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ORrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c794;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c795;  /*opt-block+*/
                        else 
                          goto MATCH_label_c796;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c793; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c797; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c799;  /*opt-block+*/
                              else 
                                goto MATCH_label_c798;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c800; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1433 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ORrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c798;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c799;  /*opt-block+*/
                        else 
                          goto MATCH_label_c800;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c797; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1730 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ORiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1682 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ORiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 812 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "PUSH.CS");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1093 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "INVD");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c801; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c803;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c802;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c804; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 422 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SLDT", DIS_EADDR32);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c802;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c803;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c804;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c801; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 398 "frontend/machine/pentium/decoder.m"
                                                    

                                                            stmts = instantiate(pc,  "STR", DIS_MEM);

                                                    

                                                    
                                                    
                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c806;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c805;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c807; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 398 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "STR", DIS_MEM);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c805;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c806;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c807;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c48; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 6: case 7: 
                                      goto MATCH_label_c48; break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c808; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c810;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c809;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c811; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 1035 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "LTR", DIS_EADDR32);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c809;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c810;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c811;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c808; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c812; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c814;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c813;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c815; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 368 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "VERR", DIS_EADDR32);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c813;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c814;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c815;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c812; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c816; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c818;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c817;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c819; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 365 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "VERW", DIS_EADDR32);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c817;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c818;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c819;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c816; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 359 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "WBINVD");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 452 "frontend/machine/pentium/decoder.m"
                                                    

                                                            stmts = instantiate(pc,  "SGDT", DIS_MEM);

                                                    

                                                        // Sets are now in the high level instructions

                                                    
                                                    
                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c821;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c820;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c822; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 452 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SGDT", DIS_MEM);

                                              

                                                  // Sets are now in the high level instructions

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c820;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c821;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c822;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c48; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 449 "frontend/machine/pentium/decoder.m"
                                                    

                                                            stmts = instantiate(pc,  "SIDT", DIS_MEM);

                                                    

                                                    
                                                    
                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c824;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c823;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c825; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 449 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SIDT", DIS_MEM);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c823;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c824;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c825;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c48; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: case 3: case 5: case 6: 
                                      goto MATCH_label_c48; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c826; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c828;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c827;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c829; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 419 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SMSW", DIS_EADDR32);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c827;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c828;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c829;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c826; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  { 
                                                    unsigned Mem = 
                                                      2 + 
                                                      addressToPC(MATCH_p);
                                                    nextPC = 3 + MATCH_p; 
                                                    
#line 1090 "frontend/machine/pentium/decoder.m"
                                                    

                                                            stmts = instantiate(pc,  "INVLPG", DIS_MEM);

                                                    

                                                    
                                                    
                                                    
                                                  }
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c831;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c830;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c832; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 1090 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "INVLPG", DIS_MEM);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c830;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c831;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c832;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c48; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c833; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c835;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c834;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c836; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1077 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LAR.od", DIS_REG32, DIS_EADDR32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c834;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c835;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c836;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c833; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c837; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c839;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c838;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c840; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1041 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LSLod", DIS_REG32, DIS_EADDR32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c838;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c839;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c840;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c837; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: case 5: case 7: 
                              goto MATCH_label_c48; break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1254 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "CLTS");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: case 2: case 4: case 5: case 6: case 7: 
                      case 13: case 14: case 15: 
                        goto MATCH_label_c48; break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 356 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "WRMSR");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 1: case 3: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 591 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RDMSR");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 8: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 251 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Sod", 6, relocd, BRANCH_JMI)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 249 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NSod", 6, relocd, BRANCH_JPOS)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 247 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Pod", 6, relocd, BRANCH_JPAR)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 245 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NPod", 6, relocd, (BRANCH_TYPE)0)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 243 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Lod", 6, relocd, BRANCH_JSL)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 241 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NLod", 6, relocd, BRANCH_JSGE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 239 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.LEod", 6, relocd, BRANCH_JSLE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 237 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NLEod", 6, relocd, BRANCH_JSG)

                                  
                                  
                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 268 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Ood", 6, relocd, (BRANCH_TYPE)0)

                                  

                                  
                                  
                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 265 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NOod", 6, relocd, (BRANCH_TYPE)0)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 2: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 263 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Bod", 6, relocd, BRANCH_JUL)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 261 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NBod", 6, relocd, BRANCH_JUGE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 259 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.Zod", 6, relocd, BRANCH_JE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 5: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 257 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NZod", 6, relocd, BRANCH_JNE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 6: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 255 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.BEod", 6, relocd, BRANCH_JULE)

                                  
                                  
                                  
                                }
                                
                                break;
                              case 7: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned relocd = 
                                    6 + MATCH_w_32_16 /* i32 at 16 */ + 
                                    addressToPC(MATCH_p);
                                  nextPC = 6 + MATCH_p; 
                                  
#line 253 "frontend/machine/pentium/decoder.m"
                                  

                                          COND_JUMP("Jv.NBEod", 6, relocd, BRANCH_JUG)

                                  
                                  
                                  
                                }
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c865; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c867; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.S"; 
                                              goto MATCH_label_c866; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.S"; 
                                            goto MATCH_label_c868; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 292 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JMI)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c866; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c867; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.S"; 
                                        goto MATCH_label_c868; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.S"; 
                                      goto MATCH_label_c865; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c869; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c871; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NS"; 
                                              goto MATCH_label_c870; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NS"; 
                                            goto MATCH_label_c872; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 289 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JPOS)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c870; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c871; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NS"; 
                                        goto MATCH_label_c872; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NS"; 
                                      goto MATCH_label_c869; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: 
                                goto MATCH_label_c48; break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c873; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c875; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.L"; 
                                              goto MATCH_label_c874; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.L"; 
                                            goto MATCH_label_c876; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 280 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JSL)

                                              //| SETb.NP(Eaddr) [name] =>

                                              //  stmts = instantiate(pc, name, DIS_EADDR8);

                                              //  SETS(name, DIS_EADDR8, BRANCH_JSG)

                                              //| SETb.P(Eaddr) [name] =>

                                              //  stmts = instantiate(pc, name, DIS_EADDR8);

                                              //  SETS(name, DIS_EADDR8, BRANCH_JSG)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c874; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c875; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.L"; 
                                        goto MATCH_label_c876; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.L"; 
                                      goto MATCH_label_c873; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c877; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c879; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NL"; 
                                              goto MATCH_label_c878; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NL"; 
                                            goto MATCH_label_c880; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 277 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JSGE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c878; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c879; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NL"; 
                                        goto MATCH_label_c880; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NL"; 
                                      goto MATCH_label_c877; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c881; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c883; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.LE"; 
                                              goto MATCH_label_c882; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.LE"; 
                                            goto MATCH_label_c884; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 274 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JSLE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c882; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c883; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.LE"; 
                                        goto MATCH_label_c884; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.LE"; 
                                      goto MATCH_label_c881; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c885; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c887; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NLE"; 
                                              goto MATCH_label_c886; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NLE"; 
                                            goto MATCH_label_c888; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 271 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JSG)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c886; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c887; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NLE"; 
                                        goto MATCH_label_c888; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NLE"; 
                                      goto MATCH_label_c885; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c48; break;
                              case 2: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c841; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c843; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.B"; 
                                              goto MATCH_label_c842; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.B"; 
                                            goto MATCH_label_c844; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 310 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JUL)

                                              //| SETb.NO(Eaddr) [name] =>

                                              //  stmts = instantiate(pc, name, DIS_EADDR8);

                                              //  SETS(name, DIS_EADDR8, BRANCH_JSG)

                                              //| SETb.O(Eaddr) [name] =>

                                              //  stmts = instantiate(pc, name, DIS_EADDR8);

                                              //  SETS(name, DIS_EADDR8, BRANCH_JSG)

                                          

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c842; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c843; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.B"; 
                                        goto MATCH_label_c844; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.B"; 
                                      goto MATCH_label_c841; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c845; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c847; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NB"; 
                                              goto MATCH_label_c846; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NB"; 
                                            goto MATCH_label_c848; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 307 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JUGE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c846; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c847; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NB"; 
                                        goto MATCH_label_c848; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NB"; 
                                      goto MATCH_label_c845; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c849; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c851; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.Z"; 
                                              goto MATCH_label_c850; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.Z"; 
                                            goto MATCH_label_c852; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 304 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c850; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c851; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.Z"; 
                                        goto MATCH_label_c852; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.Z"; 
                                      goto MATCH_label_c849; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c853; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c855; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NZ"; 
                                              goto MATCH_label_c854; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NZ"; 
                                            goto MATCH_label_c856; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 301 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JNE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c854; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c855; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NZ"; 
                                        goto MATCH_label_c856; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NZ"; 
                                      goto MATCH_label_c853; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c857; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c859; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.BE"; 
                                              goto MATCH_label_c858; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.BE"; 
                                            goto MATCH_label_c860; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 298 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JULE)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c858; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c859; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.BE"; 
                                        goto MATCH_label_c860; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.BE"; 
                                      goto MATCH_label_c857; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c861; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c863; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_name = "SETb.NBE"; 
                                              goto MATCH_label_c862; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_name = "SETb.NBE"; 
                                            goto MATCH_label_c864; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        { 
                                          char *name = MATCH_name;
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 295 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc, name, DIS_EADDR8);

                                                  SETS(name, DIS_EADDR8, BRANCH_JUG)

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c862; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c863; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_name = "SETb.NBE"; 
                                        goto MATCH_label_c864; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_name = "SETb.NBE"; 
                                      goto MATCH_label_c861; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 797 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "PUSH.GS");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 800 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "PUSH.FS");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 851 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "POP.GS");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 854 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "POP.FS");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 468 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RSM");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1227 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "CPUID");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c893; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c895;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c894;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c896; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1308 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "BTSod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c894;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c895;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c896;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c893; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c889; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c891;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c890;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c892; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1344 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "BTod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c890;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c891;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c892;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c889; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c901; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c903; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c902; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              getByte(7 + MATCH_p); 
                                            goto MATCH_label_c904; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = getByte(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 443 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

                                          

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                        goto MATCH_label_c902; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = getByte(8 + MATCH_p); 
                                        goto MATCH_label_c903; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                        goto MATCH_label_c904; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c901; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c897; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c899; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c898; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              getByte(7 + MATCH_p); 
                                            goto MATCH_label_c900; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = getByte(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          unsigned count = 
                                            (MATCH_w_8_40 & 0xff) 
                                                  /* i8 at 40 */;
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 437 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

                                          

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                        goto MATCH_label_c898; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = getByte(8 + MATCH_p); 
                                        goto MATCH_label_c899; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                        goto MATCH_label_c900; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c897; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c909; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c911;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c910;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c912; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 431 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SHRD.CLod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c910;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c911;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c912;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c909; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c905; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c907;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c906;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c908; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 425 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SHLD.CLod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c906;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c907;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c908;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c905; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 6: 
                              goto MATCH_label_c48; break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c913; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c915;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c914;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c916; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1161 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "IMULrmod", DIS_REG32, DIS_EADDR32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c914;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c915;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c916;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c913; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: case 1: 
                                goto MATCH_label_c48; break;
                              case 2: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: case 1: case 2: case 3: 
                                      goto MATCH_label_c48; break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c946; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c948; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c947; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c949; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1338 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "BTiod", DIS_EADDR32, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c947; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c948; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c949; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c946; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c950; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c952; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c951; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c953; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1302 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "BTSiod", DIS_I8, DIS_EADDR32);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c951; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c952; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c953; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c950; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c954; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c956; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c955; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c957; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1314 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "BTRiod", DIS_EADDR32, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c955; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c956; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c957; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c954; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c958; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c960; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c959; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c961; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1326 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "BTCiod", DIS_EADDR32, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c959; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c960; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c961; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c958; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c962; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c964;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c963;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c965; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1332 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "BTCod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c963;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c964;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c965;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c962; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c966; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c968;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c967;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c969; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1364 "frontend/machine/pentium/decoder.m"
                                        

                                                //stmts = instantiate(pc,  "BSFod", DIS_REG32, DIS_EADDR32);

                                                genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC-hostPC);

                                                return result;

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c967;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c968;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c969;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c966; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c970; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c972;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c971;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c973; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1353 "frontend/machine/pentium/decoder.m"
                                        

                                                //stmts = instantiate(pc,  "BSRod", DIS_REG32, DIS_EADDR32);

                                                // Bit Scan Forward: need helper function

                                                genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC-hostPC);

                                                return result;

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c971;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c972;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c973;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c970; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c974; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c976;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c975;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c977; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 944 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c975;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c976;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c977;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c974; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c978; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c980;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c979;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c981; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 941 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c979;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c980;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c981;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c978; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c917; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c919;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c918;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c920; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1239 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c918;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c919;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c920;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c917; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c921; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c923;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c922;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c924; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1233 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c922;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c923;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c924;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c921; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1038 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "LSS", DIS_REG32, DIS_MEM);

                                              

                                              
                                              
                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c926;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c925;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c927; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1038 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LSS", DIS_REG32, DIS_MEM);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c925;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c926;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c927;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c48; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c928; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c930;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c929;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c931; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1320 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "BTRod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c929;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c930;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c931;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c928; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1059 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "LFS", DIS_REG32, DIS_MEM);

                                              

                                              
                                              
                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c933;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c932;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c934; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1059 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LFS", DIS_REG32, DIS_MEM);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c932;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c933;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c934;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c48; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 5: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1056 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "LGS", DIS_REG32, DIS_MEM);

                                              

                                              
                                              
                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c936;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c935;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c937; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1056 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LGS", DIS_REG32, DIS_MEM);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c935;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c936;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c937;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c48; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 6: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c938; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c940;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c939;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c941; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 935 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c939;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c940;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c941;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c938; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c942; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c944;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c943;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c945; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned r32 = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 932 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c943;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c944;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c945;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c942; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      case 12: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1350 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "BSWAP", DIS_R32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c982; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c984;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c983;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c985; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 353 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c983;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c984;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c985;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c982; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c986; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c988;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c987;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c989; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 347 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c987;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c988;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c989;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c986; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: 
                                goto MATCH_label_c48; break;
                              case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 1) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              { 
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 3 + MATCH_p; 
                                                
#line 1230 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "CMPXCHG8B", DIS_MEM);

                                                

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c991;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c990;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c992; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1230 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "CMPXCHG8B", DIS_MEM);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c990;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c991;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c992;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c48; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c48;  /*opt-block+*/
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c993; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c995;  /*opt-block+*/
                              else 
                                goto MATCH_label_c994;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c996; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1529 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SBBmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c994;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c995;  /*opt-block+*/
                        else 
                          goto MATCH_label_c996;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c993; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c997; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c999;  /*opt-block+*/
                              else 
                                goto MATCH_label_c998;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1000; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1493 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SBBmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c998;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c999;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1000;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c997; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1001; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1003;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1002;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1004; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1457 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SBBrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1002;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1003;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1004;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1001; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1005; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1007;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1006;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1008; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1421 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SBBrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1006;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1007;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1008;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1005; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1724 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "SBBiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1676 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "SBBiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 806 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "PUSH.DS");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 857 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "POP.DS");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1009; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1011;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1010;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1012; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1523 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SUBmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1010;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1011;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1012;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1009; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1013; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1015;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1014;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1016; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1481 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SUBmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1014;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1015;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1016;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1013; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1017; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1019;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1018;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1020; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1451 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SUBrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1018;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1019;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1020;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1017; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1021; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1023;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1022;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1024; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1409 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "SUBrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1022;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1023;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1024;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1021; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1718 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "SUBiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1670 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "SUBiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  goto MATCH_label_c48; break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1215 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "DAS");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1025; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1027;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1026;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1028; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1517 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "CMPmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1026;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1027;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1028;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1025; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1029; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1031;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1030;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1032; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1469 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "CMPmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1030;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1031;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1032;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1029; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1033; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1035;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1034;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1036; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1445 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "CMPrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1034;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1035;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1036;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1033; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1037; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1039;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1038;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1040; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1397 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "CMPrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1038;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1039;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1040;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1037; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1712 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "CMPiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1664 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "CMPiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: case 7: 
                  goto MATCH_label_c48; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1200 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "DECod", DIS_R32);

              

              
              
              
            }
            
            break;
          case 5: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 866 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "POPod", DIS_R32);

              

              
              
              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 815 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "PUSH.Ivod", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c1041; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c1043; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c1042; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_32_48 = getDword(6 + MATCH_p); 
                              goto MATCH_label_c1044; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_32 = getDword(4 + MATCH_p); 
                          { 
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 8 + MATCH_p; 
                            
#line 1149 "frontend/machine/pentium/decoder.m"
                            

                                    stmts = instantiate(pc,  "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);

                            

                            
                            
                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_24 = getDword(3 + MATCH_p); 
                          goto MATCH_label_c1042; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_32_56 = getDword(7 + MATCH_p); 
                          goto MATCH_label_c1043; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_32_48 = getDword(6 + MATCH_p); 
                          goto MATCH_label_c1044; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_32_16 = getDword(2 + MATCH_p); 
                        goto MATCH_label_c1041; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 821 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "PUSH.Ixob", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c1045; 
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c1047; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c1046; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              MATCH_w_8_48 = getByte(6 + MATCH_p); 
                              goto MATCH_label_c1048; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_32 = getByte(4 + MATCH_p); 
                          { 
                            unsigned Eaddr = 1 + addressToPC(MATCH_p);
                            int /* [~128..127] */ i8 = 
                              sign_extend((MATCH_w_8_32 & 0xff) 
                                                /* i8 at 32 */, 8);
                            unsigned reg = 
                              (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                            nextPC = 5 + MATCH_p; 
                            
#line 1155 "frontend/machine/pentium/decoder.m"
                            

                                    stmts = instantiate(pc,  "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);

                            

                            
                            
                            
                          }
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_24 = getByte(3 + MATCH_p); 
                          goto MATCH_label_c1046; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          MATCH_w_8_56 = getByte(7 + MATCH_p); 
                          goto MATCH_label_c1047; 
                          
                        } /*opt-block*/
                        else { 
                          MATCH_w_8_48 = getByte(6 + MATCH_p); 
                          goto MATCH_label_c1048; 
                          
                        } /*opt-block*/
                        
                        break;
                      case 3: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        goto MATCH_label_c1045; 
                        
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c48; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 179 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.S", 2, relocd, BRANCH_JMI)

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 177 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NS", 2, relocd, BRANCH_JPOS)

                    
                    
                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 175 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.P", 2, relocd, BRANCH_JPAR)

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 173 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NP", 2, relocd, (BRANCH_TYPE)0)

                    
                    
                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 171 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.L", 2, relocd, BRANCH_JSL)

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 169 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NL", 2, relocd, BRANCH_JSGE)

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 167 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.LE", 2, relocd, BRANCH_JSLE)

                    
                    
                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 165 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NLE", 2, relocd, BRANCH_JSG)

                    
                    
                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1049; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1051;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1050;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1052; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1032 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "MOVmrb", DIS_EADDR8, DIS_REG8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1050;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1051;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1052;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1049; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1053; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1055;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1054;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1056; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1026 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "MOVmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1054;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1055;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1056;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1053; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1057; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1059;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1058;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1060; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1023 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "MOVrmb", DIS_REG8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1058;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1059;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1060;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1057; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c1061; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1063;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1062;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1064; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1017 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "MOVrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1062;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1063;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1064;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c1061; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: case 6: 
                  goto MATCH_label_c48; break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1068 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "LEA.od", DIS_REG32, DIS_MEM);

                                

                                
                                
                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1066;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1065;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c1067; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1068 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "LEA.od", DIS_REG32, DIS_MEM);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1065;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c1066;  /*opt-block+*/
                        else 
                          goto MATCH_label_c1067;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                { 
                                  unsigned Mem = 1 + addressToPC(MATCH_p);
                                  nextPC = 2 + MATCH_p; 
                                  
#line 872 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "POP.Evod", DIS_MEM);

                                  

                                  
                                  
                                  
                                }
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) 
                                  goto MATCH_label_c1069;  /*opt-block+*/
                                else 
                                  goto MATCH_label_c1068;  /*opt-block+*/
                                
                                break;
                              case 5: 
                                goto MATCH_label_c1070; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            unsigned Mem = 1 + addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 872 "frontend/machine/pentium/decoder.m"
                            

                                    stmts = instantiate(pc,  "POP.Evod", DIS_MEM);

                            

                            
                            
                            
                          } /*opt-block*//*opt-block+*/
                          else 
                            goto MATCH_label_c1068;  /*opt-block+*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                            goto MATCH_label_c1069;  /*opt-block+*/
                          else 
                            goto MATCH_label_c1070;  /*opt-block+*/
                          
                          break;
                        case 3: 
                          goto MATCH_label_c48; break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c48;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1266 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CWDE");

                  

                  
                  
                  
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1221 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CDQ");

                  

                  
                  
                  
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  MATCH_w_16_40 = getWord(5 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    unsigned seg = (MATCH_w_16_40 & 0xffff) /* i16 at 40 */;
                    nextPC = 7 + MATCH_p; 
                    
#line 1274 "frontend/machine/pentium/decoder.m"
                    

                            unused(seg); unused(off);

                            stmts = instantiate(pc, "NOP");

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 362 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "WAIT");

                  

                  
                  
                  
                  
                  break;
                case 4: case 5: 
                  goto MATCH_label_c48; break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 465 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "SAHF");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1083 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "LAHF");

                  

                      /* Branches have been handled in decodeInstruction() now */

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned i8 = (MATCH_w_8_8 & 0xff) /* i8 at 8 */;
                    nextPC = 2 + MATCH_p; 
                    
#line 395 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "TEST.AL.Ib", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 389 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "TEST.eAX.Ivod", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 2: 
                  nextPC = 1 + MATCH_p; 
                  
#line 407 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "STOSB");

                  

                  
                  
                  
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 401 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "STOSvod");

                  

                  
                  
                  
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1742 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "LODSB");

                  

                      /* Floating point instructions */

                  
                  
                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1736 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "LODSvod");

                  

                  
                  
                  
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 462 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "SCASB");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 456 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "SCASvod");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_32_8 = getDword(1 + MATCH_p); 
            { 
              unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 5 + MATCH_p; 
              
#line 984 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "MOVid", DIS_R32, DIS_I32);

              

              
              
              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_16_8 = getWord(1 + MATCH_p); 
                  MATCH_w_8_24 = getByte(3 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
                    nextPC = 4 + MATCH_p; 
                    
#line 1188 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ENTER", DIS_I16, DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1065 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "LEAVE");

                  

                  
                  
                  
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = getWord(1 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 471 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "RET.far.Iw", DIS_I16);

                    		ReturnStatement *ret = new ReturnStatement;

                    		ret->setNumBytesPopped(DIS_I16->getAddr());

                    		result.rtl = new RTL(pc, stmts);

                            result.rtl->appendStmt(ret);

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 485 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "RET.far");

                  		result.rtl = new RTL(pc, stmts);

                          result.rtl->appendStmt(new ReturnStatement);

                  

                  
                  
                  
                  
                  break;
                case 4: 
                  goto MATCH_label_c48; break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1099 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "INT.Ib", DIS_I8);

                    

                    // Removing because an invalid instruction is better than trying to

                    // instantiate this. -trent

                    //    | INT3() =>

                    //        stmts = instantiate(pc,  "INT3");

                    

                    //    | INSvod() =>

                    //        stmts = instantiate(pc,  "INSvod");

                    

                    //    | INSvow() =>

                    //        stmts = instantiate(pc,  "INSvow");

                    

                    //    | INSB() =>

                    //        stmts = instantiate(pc,  "INSB");

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1096 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "INTO");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1087 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "IRET");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1752 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FADD.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1072;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1071;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1073; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1752 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FADD.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1071;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1072;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1073;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1758 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FADD.St.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1946 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FMUL.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1075;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1074;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1076; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1946 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FMUL.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1074;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1075;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1076;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1952 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FMUL.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1785 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FCOM.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1078;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1077;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1079; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1785 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOM.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1077;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1078;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1079;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1803 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOM.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1797 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FCOMP.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1081;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1080;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1082; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1797 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOMP.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1080;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1081;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1082;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1806 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOMP.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2036 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSUB.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1084;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1083;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1085; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2036 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUB.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1083;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1084;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1085;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2042 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUB.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2057 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSUBR.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1087;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1086;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1088; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2057 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBR.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1086;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1087;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1088;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2063 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBR.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1830 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FDIV.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1090;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1089;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1091; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1830 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIV.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1089;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1090;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1091;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1836 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIV.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1851 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FDIVR.R32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1093;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1092;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1094; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1851 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVR.R32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1092;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1093;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1094;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1857 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVR.ST.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1902 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FLD.lsR32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1096;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1095;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1097; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1902 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLD.lsR32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1095;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1096;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1097;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1916 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLD.STi", DIS_IDXP1);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 2099 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "FXCH", DIS_IDX);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2003 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FST.lsR32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1099;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1098;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1100; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2003 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FST.lsR32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1098;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1099;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1100;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1967 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FNOP");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2009 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTP.lsR32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1102;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1101;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1103; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2009 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTP.lsR32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1101;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1102;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1103;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1943 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FLDENV", DIS_MEM);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1105;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1104;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1106; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1943 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLDENV", DIS_MEM);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1104;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1105;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1106;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1779 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FCHS");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1749 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FABS");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 2: case 3: case 6: case 7: 
                                    goto MATCH_label_c48; break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2078 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FTST");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2096 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FXAM");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1940 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FLDCW", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1108;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1107;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1109; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1940 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLDCW", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1107;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1108;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1109;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1919 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLD1");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1922 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDL2T");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1925 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDL2E");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1928 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDPI");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1931 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDLG2");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1934 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDLN2");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1937 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FLDZ");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c48; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2027 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTENV", DIS_MEM);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1111;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1110;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1112; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2027 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTENV", DIS_MEM);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1110;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1111;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1112;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1746 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "F2XM1");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2105 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FYL2X");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1979 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FPTAN");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1970 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FPATAN");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2102 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FXTRACT");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1976 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FPREM1");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1827 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FDECSTP");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 7: 
                                    goto MATCH_label_c48; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2024 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTCW", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1114;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1113;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1115; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2024 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTCW", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1113;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1114;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1115;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1973 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FPREM");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 1: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2108 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FYL2XP1");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 2: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 2000 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FSQRT");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 3: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1997 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FSINCOS");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 4: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1982 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FRNDINT");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 5: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1991 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FSCALE");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 6: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1994 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FSIN");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  case 7: 
                                    nextPC = 2 + MATCH_p; 
                                    
#line 1824 "frontend/machine/pentium/decoder.m"
                                    

                                            stmts = instantiate(pc,  "FCOS");

                                    

                                    
                                    
                                    
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1767 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIADD.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1117;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1116;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1118; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1767 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIADD.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1116;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1117;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1118;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1961 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIMUL.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1120;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1119;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1121; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1961 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIMUL.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1119;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1120;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1121;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1791 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FICOM.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1123;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1122;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1124; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1791 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FICOM.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1122;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1123;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1124;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1809 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FICOMP.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1126;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1125;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1127; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1809 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FICOMP.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1125;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1126;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1127;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2048 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISUB.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1129;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1128;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1130; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2048 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISUB.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1128;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1129;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1130;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2069 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISUBR.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1132;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1131;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1133; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2069 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISUBR.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1131;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1132;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1133;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 2087 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FUCOMPP");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1845 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIDIV.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1135;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1134;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1136; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1845 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIDIV.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1134;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1135;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1136;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1863 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIDIVR.I32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1138;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1137;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1139; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1863 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIDIVR.I32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1137;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1138;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1139;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1878 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FILD.lsI32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1141;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1140;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1142; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1878 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FILD.lsI32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1140;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1141;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1142;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c48; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1890 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIST.lsI32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1144;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1143;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1145; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1890 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIST.lsI32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1143;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1144;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1145;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem32 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1896 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISTP.lsI32", DIS_MEM32);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1147;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1146;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1148; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem32 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1896 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISTP.lsI32", DIS_MEM32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1146;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1147;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1148;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1782 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FNCLEX");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 6 & 0x3) 
                                      /* mod at 8 */ == 3) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1884 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FINIT");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1908 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FLD80", DIS_MEM80);

                                      

                                      /* This is a bit tricky. The FPUSH logically comes between the read of STi and

                                      # the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.

                                      # This problem only happens with this load instruction, so there is a work

                                      # around here that gives us the SSL a value of i that is one more than in

                                      # the instruction */

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1150;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1149;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1151; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1908 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLD80", DIS_MEM80);

                                

                                /* This is a bit tricky. The FPUSH logically comes between the read of STi and

                                # the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.

                                # This problem only happens with this load instruction, so there is a work

                                # around here that gives us the SSL a value of i that is one more than in

                                # the instruction */

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1149;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1150;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1151;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FUCOMI.ST.STi"; 
                              { 
                                char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2090 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc, name, DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          MATCH_name = "FCOMI.ST.STi"; 
                          { 
                            char *name = MATCH_name;
                            unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                            nextPC = 2 + MATCH_p; 
                            
#line 1818 "frontend/machine/pentium/decoder.m"
                            

                                    stmts = instantiate(pc, name, DIS_IDX);

                            

                            
                            
                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2015 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTP80", DIS_MEM80);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1153;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1152;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1154; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2015 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTP80", DIS_MEM80);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1152;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1153;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1154;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1755 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FADD.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1156;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1155;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1157; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1755 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FADD.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1155;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1156;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1157;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1761 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FADD.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1949 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FMUL.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1159;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1158;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1160; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1949 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FMUL.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1158;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1159;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1160;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1955 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FMUL.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1788 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FCOM.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1162;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1161;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1163; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1788 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOM.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1161;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1162;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1163;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1800 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FCOMP.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1165;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1164;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1166; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1800 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOMP.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1164;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1165;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1166;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2039 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSUB.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1168;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1167;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1169; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2039 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUB.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1167;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1168;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1169;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2066 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBR.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2060 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSUBR.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1171;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1170;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1172; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2060 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBR.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1170;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1171;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1172;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2045 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUB.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1833 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FDIV.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1174;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1173;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1175; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1833 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIV.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1173;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1174;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1175;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1860 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVR.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1854 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FDIVR.R64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1177;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1176;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1178; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1854 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVR.R64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1176;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1177;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1178;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1839 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIV.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1905 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FLD.lsR64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1180;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1179;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1181; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1905 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FLD.lsR64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1179;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1180;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1181;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1872 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FFREE", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c48; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2006 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FST.lsR64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1183;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1182;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1184; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2006 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FST.lsR64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1182;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1183;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1184;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2018 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FST.st.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2012 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTP.lsR64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1186;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1185;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1187; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2012 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTP.lsR64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1185;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1186;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1187;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2021 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTP.st.STi", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1985 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FRSTOR", DIS_MEM);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1189;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1188;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1190; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1985 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FRSTOR", DIS_MEM);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1188;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1189;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1190;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2081 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FUCOM", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */ == 3) { 
                          unsigned idx = (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 2084 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "FUCOMP", DIS_IDX);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem = 1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1988 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FNSAVE", DIS_MEM);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1192;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1191;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1193; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1988 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FNSAVE", DIS_MEM);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1191;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1192;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1193;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2030 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FSTSW", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1195;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1194;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1196; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2030 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTSW", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1194;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1195;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1196;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1770 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIADD.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1198;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1197;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1199; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1770 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIADD.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1197;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1198;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1199;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1764 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FADDP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1964 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIMUL.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1201;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1200;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1202; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1964 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIMUL.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1200;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1201;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1202;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1958 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FMULP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1794 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FICOM.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1204;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1203;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1205; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1794 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FICOM.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1203;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1204;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1205;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1812 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FICOMP.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1207;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1206;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1208; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1812 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FICOMP.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1206;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1207;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1208;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1815 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FCOMPP");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2051 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISUB.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1210;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1209;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1211; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2051 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISUB.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1209;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1210;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1211;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2075 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBRP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 2072 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISUBR.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1213;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1212;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1214; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 2072 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISUBR.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1212;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1213;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1214;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2054 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSUBP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1848 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIDIV.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1216;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1215;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1217; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1848 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIDIV.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1215;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1216;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1217;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1869 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVRP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1866 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIDIVR.I16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1219;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1218;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1220; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1866 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIDIVR.I16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1218;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1219;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1220;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              { 
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1842 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FDIVP.STi.ST", DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1875 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FILD.lsI16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1222;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1221;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1223; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1875 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FILD.lsI16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1221;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1222;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1223;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c48; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1887 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FIST.lsI16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1225;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1224;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1226; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1887 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FIST.lsI16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1224;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1225;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1226;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem16 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1893 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISTP.lsI16", DIS_MEM16);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1228;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1227;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1229; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem16 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1893 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISTP.lsI16", DIS_MEM16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1227;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1228;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1229;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1773 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FBLD", DIS_MEM80);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1231;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1230;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1232; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1773 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FBLD", DIS_MEM80);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1230;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1231;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1232;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 0) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 2033 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FSTSW.AX");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1881 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FILD.lsI64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1234;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1233;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1235; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1881 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FILD.lsI64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1233;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1234;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1235;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FUCOMIP.ST.STi"; 
                              { 
                                char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 2093 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc, name, DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem80 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1776 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FBSTP", DIS_MEM80);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1237;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1236;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1238; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem80 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1776 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FBSTP", DIS_MEM80);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1236;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1237;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1238;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              MATCH_name = "FCOMIP.ST.STi"; 
                              { 
                                char *name = MATCH_name;
                                unsigned idx = 
                                  (MATCH_w_8_8 & 0x7) /* r_m at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1821 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc, name, DIS_IDX);

                                

                                
                                
                                
                              }
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    { 
                                      unsigned Mem64 = 
                                        1 + addressToPC(MATCH_p);
                                      nextPC = 2 + MATCH_p; 
                                      
#line 1899 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  "FISTP64", DIS_MEM64);

                                      

                                      
                                      
                                      
                                    }
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1240;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1239;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1241; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Mem64 = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1899 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "FISTP64", DIS_MEM64);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1239;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1240;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1241;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c48; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 1278 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "CALL.Jvod", dis_Num(relocd));

                            // Fix the last assignment, which is %pc := %pc + K + reloc

                            Assign* last = (Assign*)stmts->back();

                            Const*& reloc = (Const*&)((Binary*)last->getRight())->refSubExp2();

                            assert(reloc->isIntConst());

                            assert(reloc->getInt() == (int)relocd);

                            // Subtract off the host pc

                            reloc->setInt(reloc->getInt() - hostPC);

                            

                            if (relocd-delta == pc+5) {

                                // This is a call $+5

                                // Use the standard semantics, except for the last statement

                                // (just updates %pc)

                                stmts->pop_back();

                                // And don't make it a call statement

                            } else {

                                CallStatement* call = new CallStatement;

                                // Set the destination

                                call->setDest(relocd-delta);

                                stmts->push_back(call);

                            }

                            result.rtl = new RTL(pc, stmts);

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_59[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    char *name = MATCH_name;
                    unsigned relocd = 
                      5 + MATCH_w_32_8 /* i32 at 8 */ + addressToPC(MATCH_p);
                    nextPC = 5 + MATCH_p; 
                    
#line 153 "frontend/machine/pentium/decoder.m"
                    

                            unused((int) name);

                            unconditionalJump(name, 5, relocd, delta, pc, stmts, result);

                    
                    
                    
                  }
                  
                  break;
                case 2: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c48; break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  MATCH_name = 
                    MATCH_name_col_59[(MATCH_w_8_0 & 0x7) /* col at 0 */]; 
                  { 
                    char *name = MATCH_name;
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 159 "frontend/machine/pentium/decoder.m"
                    

                            unused((int) name);

                            unconditionalJump(name, 2, relocd, delta, pc, stmts, result);

                    

                        /*

                         * Conditional branches, 8 bit offset: 7X XX

                         */

                    
                    
                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1263 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CLC");

                  

                  
                  
                  
                  
                  break;
                case 1: 
                  nextPC = 1 + MATCH_p; 
                  
#line 416 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "STC");

                  

                  
                  
                  
                  
                  break;
                case 2: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1257 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CLI");

                  

                  
                  
                  
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 410 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "STI");

                  

                  
                  
                  
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1260 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CLD");

                  

                  
                  
                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 413 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "STD");

                  

                  
                  
                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1242; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1244;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1243;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1245; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1128 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "INC.Eb", DIS_EADDR8);

                                

                                //    | IN.eAX.DXod() =>

                                //        stmts = instantiate(pc,  "IN.eAX.DXod");

                                

                                //    | IN.eAX.DXow() =>

                                //        stmts = instantiate(pc,  "IN.eAX.DXow");

                                

                                //    | IN.AL.DX() =>

                                //        stmts = instantiate(pc,  "IN.AL.DX");

                                

                                //    | IN.eAX.Ibod(i8) =>

                                //        stmts = instantiate(pc,  "IN.eAX.Ibod", DIS_I8);

                                

                                //    | IN.eAX.Ibow(i8) =>

                                //        stmts = instantiate(pc,  "IN.eAX.Ibow", DIS_I8);

                                

                                //    | IN.AL.Ib(i8) =>

                                //        stmts = instantiate(pc,  "IN.AL.Ib", DIS_I8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1243;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1244;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1245;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1242; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1246; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1248;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1247;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1249; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1212 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "DEC.Eb", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1247;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1248;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1249;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1246; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: case 3: case 4: case 5: case 6: case 7: 
                        goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1250; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1252;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1251;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1253; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1122 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "INC.Evod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1251;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1252;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1253;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1250; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1254; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1256;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1255;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1257; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1206 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "DEC.Evod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1255;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1256;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1257;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1254; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1258; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1260;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1259;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1261; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 120 "frontend/machine/pentium/decoder.m"
                                

                                        /*

                                         * Register call

                                         */

                                        // Mike: there should probably be a HLNwayCall class for this!

                                        stmts = instantiate(pc,  "CALL.Evod", DIS_EADDR32);

                                        CallStatement* newCall = new CallStatement;

                                        // Record the fact that this is a computed call

                                        newCall->setIsComputed();

                                        // Set the destination expression

                                        newCall->setDest(DIS_EADDR32);

                                        result.rtl = new RTL(pc, stmts);

                                        result.rtl->appendStmt(newCall);

                                        // Only one instruction, so size of result is size of this decode

                                        //result.numBytes = nextPC - hostPC;

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1259;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1260;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1261;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1258; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: case 5: case 7: 
                        goto MATCH_label_c48; break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1262; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1264;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1263;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1265; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 136 "frontend/machine/pentium/decoder.m"
                                

                                        /*

                                         * Register jump

                                         */

                                        CaseStatement* newJump = new CaseStatement;

                                        // Record the fact that this is a computed call

                                        newJump->setIsComputed();

                                        // Set the destination expression

                                        newJump->setDest(DIS_EADDR32);

                                        result.rtl = new RTL(pc, stmts);

                                        result.rtl->appendStmt(newJump);

                                        // Only one instruction, so size of result is size of this decode

                                        //result.numBytes = nextPC - hostPC;

                                    

                                    /*

                                     * Unconditional branches

                                     */

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1263;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1264;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1265;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1262; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c1266; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c1268;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c1267;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c1269; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 833 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "PUSH.Evod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c1267;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c1268;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1269;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c1266; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    else 
      
        switch((MATCH_w_8_0 >> 4 & 0xf) /* row at 0 */) {
          case 0: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c0; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c2;  /*opt-block+*/
                              else 
                                goto MATCH_label_c1;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c3; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1538 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADDmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c1;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c2;  /*opt-block+*/
                        else 
                          goto MATCH_label_c3;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c0; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c4; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c6;  /*opt-block+*/
                              else 
                                goto MATCH_label_c5;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c7; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1511 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADDmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c5;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c6;  /*opt-block+*/
                        else 
                          goto MATCH_label_c7;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c4; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c8; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c10;  /*opt-block+*/
                              else 
                                goto MATCH_label_c9;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c11; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1466 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADDrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c9;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c10;  /*opt-block+*/
                        else 
                          goto MATCH_label_c11;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c8; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c12; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c14;  /*opt-block+*/
                              else 
                                goto MATCH_label_c13;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c15; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1439 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADDrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c13;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c14;  /*opt-block+*/
                        else 
                          goto MATCH_label_c15;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c12; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1733 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ADDiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1685 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ADDiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 803 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "PUSH.ES");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 863 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "POP.ES");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 1: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c16; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c18;  /*opt-block+*/
                              else 
                                goto MATCH_label_c17;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c19; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1532 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADCmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c17;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c18;  /*opt-block+*/
                        else 
                          goto MATCH_label_c19;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c16; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c20; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c22;  /*opt-block+*/
                              else 
                                goto MATCH_label_c21;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c23; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1499 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADCmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c21;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c22;  /*opt-block+*/
                        else 
                          goto MATCH_label_c23;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c20; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c24; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c26;  /*opt-block+*/
                              else 
                                goto MATCH_label_c25;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c27; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1460 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADCrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c25;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c26;  /*opt-block+*/
                        else 
                          goto MATCH_label_c27;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c24; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c28; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c30;  /*opt-block+*/
                              else 
                                goto MATCH_label_c29;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c31; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1427 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ADCrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c29;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c30;  /*opt-block+*/
                        else 
                          goto MATCH_label_c31;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c28; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1727 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ADCiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1679 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ADCiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 809 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "PUSH.SS");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 860 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "POP.SS");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 2: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c32; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c34;  /*opt-block+*/
                              else 
                                goto MATCH_label_c33;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c35; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1526 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ANDmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c33;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c34;  /*opt-block+*/
                        else 
                          goto MATCH_label_c35;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c32; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c36; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c38;  /*opt-block+*/
                              else 
                                goto MATCH_label_c37;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c39; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1487 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ANDmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c37;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c38;  /*opt-block+*/
                        else 
                          goto MATCH_label_c39;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c36; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c40; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c42;  /*opt-block+*/
                              else 
                                goto MATCH_label_c41;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c43; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1454 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ANDrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c41;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c42;  /*opt-block+*/
                        else 
                          goto MATCH_label_c43;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c40; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c44; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c46;  /*opt-block+*/
                              else 
                                goto MATCH_label_c45;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c47; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1415 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "ANDrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c45;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c46;  /*opt-block+*/
                        else 
                          goto MATCH_label_c47;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c44; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1721 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ANDiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1673 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "ANDiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  goto MATCH_label_c48; break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1218 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "DAA");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 3: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c49; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c51;  /*opt-block+*/
                              else 
                                goto MATCH_label_c50;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c52; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1520 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XORmrb", DIS_EADDR8, DIS_R8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c50;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c51;  /*opt-block+*/
                        else 
                          goto MATCH_label_c52;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c49; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c53; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c55;  /*opt-block+*/
                              else 
                                goto MATCH_label_c54;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c56; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1475 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XORmrod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c54;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c55;  /*opt-block+*/
                        else 
                          goto MATCH_label_c56;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c53; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c57; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c59;  /*opt-block+*/
                              else 
                                goto MATCH_label_c58;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c60; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned r8 = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1448 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XORrmb", DIS_R8, DIS_EADDR8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c58;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c59;  /*opt-block+*/
                        else 
                          goto MATCH_label_c60;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c57; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c61; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c63;  /*opt-block+*/
                              else 
                                goto MATCH_label_c62;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c64; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1403 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XORrmod", DIS_REG32, DIS_EADDR32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c62;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c63;  /*opt-block+*/
                        else 
                          goto MATCH_label_c64;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c61; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    int /* [~128..127] */ i8 = 
                      sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
                    nextPC = 2 + MATCH_p; 
                    
#line 1715 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "XORiAL", DIS_I8);

                    

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned i32 = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1667 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "XORiEAX", DIS_I32);

                    

                    
                    
                    
                  }
                  
                  break;
                case 6: case 7: 
                  goto MATCH_label_c48; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 4: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 1116 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "INCod", DIS_R32);

              

              
              
              
            }
            
            break;
          case 5: 
            { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 827 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "PUSHod", DIS_R32);

              

              
              
              
            }
            
            break;
          case 6: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 2: case 3: case 7: 
                  goto MATCH_label_c48; break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 335 "frontend/machine/pentium/decoder.m"
                          // For now, treat as a 1 byte NOP

                          stmts = instantiate(pc,  "NOP");

                  

                  
                  
                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 338 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "NOP");

                  

                  
                  
                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c69; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c71;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c70;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c72; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1508 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ORmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c70;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c71;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c72;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c69; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c65; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c67;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c66;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c68; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1514 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ADDmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c66;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c67;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c68;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c65; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c77; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c79;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c78;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c80; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1436 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ORrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c78;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c79;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c80;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c77; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c73; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c75;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c74;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c76; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1442 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ADDrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c74;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c75;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c76;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c73; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1706 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ORiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1709 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADDiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 4 & 0xf) 
                                        /* row at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 4: case 5: 
                                          case 6: case 7: 
                                            goto MATCH_label_c48; break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c81; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c83;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c82;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c84; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1080 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "LAR.ow", DIS_REG16, DIS_EADDR16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c82;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c83;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c84;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c81; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c85; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c87;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c86;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c88; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1044 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "LSLow", DIS_REG16, DIS_EADDR16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c86;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c87;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c88;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c85; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 1: case 2: case 3: case 4: case 5: 
                                    case 6: case 7: case 9: case 13: case 14: 
                                    case 15: 
                                      goto MATCH_label_c48; break;
                                    case 8: 
                                      if ((MATCH_w_8_16 >> 3 & 0x1) 
                                              /* page at 16 */ == 1) 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 215 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Sow", 4, relocd, BRANCH_JMI)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 213 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NSow", 4, relocd, BRANCH_JPOS)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 211 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Pow", 4, relocd, BRANCH_JPAR)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 209 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NPow", 4, relocd, (BRANCH_TYPE)0)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 207 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Low", 4, relocd, BRANCH_JSL)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 205 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NLow", 4, relocd, BRANCH_JSGE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 203 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.LEow", 4, relocd, BRANCH_JSLE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 201 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NLEow", 4, relocd, BRANCH_JSG)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      else 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* col at 16 */) {
                                            case 0: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 232 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Oow", 4, relocd, (BRANCH_TYPE)0)

                                                

                                                    /*

                                                     * Conditional branches, 32 bit offset: 0F 8X XX XX XX XX

                                                     */

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 1: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 229 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NOow", 4, relocd, (BRANCH_TYPE)0)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 2: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 227 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Bow", 4, relocd, BRANCH_JUL)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 3: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 225 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NBow", 4, relocd, BRANCH_JUGE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 223 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.Zow", 4, relocd, BRANCH_JE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 221 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NZow", 4, relocd, BRANCH_JNE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 6: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 219 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.BEow", 4, relocd, BRANCH_JULE)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 7: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              { 
                                                unsigned relocd = 
                                                  5 + 
                                                  sign_extend((MATCH_w_16_24 & 0xffff) 
                                                                    /* i16 at 24 */, 
                                                              16) + 
                                                  addressToPC(MATCH_p);
                                                nextPC = 5 + MATCH_p; 
                                                
#line 217 "frontend/machine/pentium/decoder.m"
                                                

                                                        COND_JUMP("Jv.NBEow", 4, relocd, BRANCH_JUG)

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- col at 16 --*/  
                                      break;
                                    case 10: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 1: case 2: case 6: 
                                            goto MATCH_label_c48; break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c93; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c95;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c94;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c96; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1311 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "BTSow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c94;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c95;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c96;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c93; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c89; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c91;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c90;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c92; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1347 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "BTow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c90;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c91;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c92;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c89; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c101; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c103; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c102; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            getByte(8 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c104; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        getByte(6 + MATCH_p); 
                                                      { 
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 446 "frontend/machine/pentium/decoder.m"
                                                        

                                                                stmts = instantiate(pc,  "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

                                                        

                                                        
                                                        
                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        getByte(5 + MATCH_p); 
                                                      goto MATCH_label_c102; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        getByte(9 + MATCH_p); 
                                                      goto MATCH_label_c103; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        getByte(8 + MATCH_p); 
                                                      goto MATCH_label_c104; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c101; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c97; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c99; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c98; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 5: 
                                                          MATCH_w_8_64 = 
                                                            getByte(8 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c100; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_48 = 
                                                        getByte(6 + MATCH_p); 
                                                      { 
                                                        unsigned Eaddr = 
                                                          3 + 
                                                          addressToPC(MATCH_p);
                                                        unsigned count = 
                                                          (MATCH_w_8_48 & 0xff) 
                                                                /* i8 at 48 */;
                                                        unsigned reg = 
                                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                                /* reg_opcode at 24 */;
                                                        nextPC = 7 + MATCH_p; 
                                                        
#line 440 "frontend/machine/pentium/decoder.m"
                                                        

                                                                stmts = instantiate(pc,  "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

                                                        

                                                        
                                                        
                                                        
                                                      }
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_40 = 
                                                        getByte(5 + MATCH_p); 
                                                      goto MATCH_label_c98; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      MATCH_w_8_72 = 
                                                        getByte(9 + MATCH_p); 
                                                      goto MATCH_label_c99; 
                                                      
                                                    } /*opt-block*/
                                                    else { 
                                                      MATCH_w_8_64 = 
                                                        getByte(8 + MATCH_p); 
                                                      goto MATCH_label_c100; 
                                                      
                                                    } /*opt-block*/
                                                    
                                                    break;
                                                  case 3: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c97; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c109; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c111;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c110;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c112; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 434 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "SHRD.CLow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c110;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c111;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c112;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c109; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c105; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c107;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c106;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c108; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 428 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "SHLD.CLow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c106;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c107;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c108;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c105; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 7: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c113; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c115;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c114;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c116; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1164 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "IMULrmow", DIS_REG16, DIS_EADDR16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c114;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c115;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c116;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c113; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 11: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */) {
                                          case 0: case 7: 
                                            goto MATCH_label_c48; break;
                                          case 1: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c117; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c119;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c118;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c120; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1236 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c118;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c119;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c120;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c117; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 2: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* reg_opcode at 24 */) {
                                                  case 0: case 1: case 2: 
                                                  case 3: 
                                                    goto MATCH_label_c48; 
                                                    
                                                    break;
                                                  case 4: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c121; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    getByte(9 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c123; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    getByte(5 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c122; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  getByte(8 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c124; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              getByte(6 + 
                                                                    MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend((MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1341 "frontend/machine/pentium/decoder.m"
                                                              

                                                                      stmts = instantiate(pc,  "BTiow", DIS_EADDR16, DIS_I8);

                                                              

                                                              
                                                              
                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c122; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c123; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              getByte(8 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c124; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c121; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 5: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c125; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    getByte(9 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c127; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    getByte(5 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c126; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  getByte(8 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c128; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              getByte(6 + 
                                                                    MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend((MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1305 "frontend/machine/pentium/decoder.m"
                                                              

                                                                      stmts = instantiate(pc,  "BTSiow", DIS_I8, DIS_EADDR16);

                                                              

                                                              
                                                              
                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c126; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c127; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              getByte(8 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c128; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c125; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 6: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c129; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    getByte(9 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c131; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    getByte(5 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c130; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  getByte(8 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c132; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              getByte(6 + 
                                                                    MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend((MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1317 "frontend/machine/pentium/decoder.m"
                                                              

                                                                      stmts = instantiate(pc,  "BTRiow", DIS_EADDR16, DIS_I8);

                                                              

                                                              
                                                              
                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c130; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c131; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              getByte(8 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c132; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c129; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  case 7: 
                                                    
                                                      switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                            /* mod at 24 */) {
                                                        case 0: 
                                                          
                                                            switch((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */) {
                                                              case 0: case 1: 
                                                              case 2: case 3: 
                                                              case 6: case 7: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c133; 
                                                                
                                                                break;
                                                              case 4: 
                                                                MATCH_w_8_32 = 
                                                                  getByte(4 + 
                                                                        MATCH_p); 
                                                                if ((MATCH_w_8_32 & 0x7) 
                                                                        /* base at 32 */ == 5 && 
                                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ && 
                                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                                        /* index at 32 */ < 8)) { 
                                                                  MATCH_w_8_72 = 
                                                                    getByte(9 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c135; 
                                                                  
                                                                } /*opt-block*/
                                                                else { 
                                                                  MATCH_w_8_40 = 
                                                                    getByte(5 + 
                                                                          MATCH_p); 
                                                                  goto MATCH_label_c134; 
                                                                  
                                                                } /*opt-block*/
                                                                
                                                                break;
                                                              case 5: 
                                                                MATCH_w_8_64 = 
                                                                  getByte(8 + 
                                                                        MATCH_p); 
                                                                goto MATCH_label_c136; 
                                                                
                                                                break;
                                                              default: assert(0);
                                                            } /* (MATCH_w_8_24 & 0x7) 
                                                                  -- r_m at 24 --*/ 
                                                          break;
                                                        case 1: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_48 = 
                                                              getByte(6 + 
                                                                    MATCH_p); 
                                                            { 
                                                              unsigned Eaddr = 
                                                                3 + 
                                                                addressToPC(MATCH_p);
                                                              int /* [~128..127] */ i8 = 
                                                                sign_extend((MATCH_w_8_48 & 0xff) 
                                                                                  /* i8 at 48 */, 
                                                                            8);
                                                              nextPC = 7 + 
                                                              MATCH_p; 
                                                              
#line 1329 "frontend/machine/pentium/decoder.m"
                                                              

                                                                      stmts = instantiate(pc,  "BTCiow", DIS_EADDR16, DIS_I8);

                                                              

                                                              
                                                              
                                                              
                                                            }
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_40 = 
                                                              getByte(5 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c134; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 2: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_24 & 0x7) 
                                                                  /* r_m at 24 */ == 4 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) { 
                                                            MATCH_w_8_72 = 
                                                              getByte(9 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c135; 
                                                            
                                                          } /*opt-block*/
                                                          else { 
                                                            MATCH_w_8_64 = 
                                                              getByte(8 + 
                                                                    MATCH_p); 
                                                            goto MATCH_label_c136; 
                                                            
                                                          } /*opt-block*/
                                                          
                                                          break;
                                                        case 3: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          goto MATCH_label_c133; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                            -- mod at 24 --*/ 
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 3 & 0x7) 
                                                      -- reg_opcode at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            break;
                                          case 3: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c141; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c143;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c142;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c144; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1335 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "BTCow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c142;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c143;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c144;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c141; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c137; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c139;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c138;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c140; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1323 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "BTRow", DIS_EADDR16, DIS_REG16);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c138;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c139;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c140;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c137; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          case 4: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c145; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c147;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c146;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c148; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1369 "frontend/machine/pentium/decoder.m"
                                                      

                                                              //stmts = instantiate(pc,  "BSFow", DIS_REG16, DIS_EADDR16);

                                                              genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC-hostPC);

                                                              return result;

                                                      

                                                          // Not "user" instructions:

                                                      //  | BOUNDod(reg, Mem) =>

                                                      //      stmts = instantiate(pc,  "BOUNDod", DIS_REG32, DIS_MEM);

                                                      

                                                      //  | BOUNDow(reg, Mem) =>

                                                      //      stmts = instantiate(pc,  "BOUNDow", DIS_REG16, DIS_MEM);

                                                      

                                                      //    | ARPL(Eaddr, reg ) =>

                                                      //        unused(Eaddr); unused(reg);

                                                      //        stmts = instantiate(pc,  "UNIMP");

                                                      

                                                      //    | AAS() =>

                                                      //        stmts = instantiate(pc,  "AAS");

                                                      

                                                      //    | AAM() =>

                                                      //        stmts = instantiate(pc,  "AAM");

                                                      

                                                      //    | AAD() =>

                                                      //        stmts = instantiate(pc,  "AAD");

                                                      

                                                      //    | AAA() =>

                                                      //        stmts = instantiate(pc,  "AAA");

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c146;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c147;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c148;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c145; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            break;
                                          case 5: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c149; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c151;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c150;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c152; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned reg = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 1359 "frontend/machine/pentium/decoder.m"
                                                      

                                                              //stmts = instantiate(pc,  "BSRow", DIS_REG16, DIS_EADDR16);

                                                              genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC-hostPC);

                                                              return result;

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c150;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c151;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c152;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c149; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else 
                                              goto MATCH_label_c48;  /*opt-block+*/
                                            break;
                                          case 6: 
                                            if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                    /* page at 16 */ == 1) { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c157; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c159;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c158;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c160; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned r16 = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 947 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c158;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c159;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c160;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c157; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              
                                                switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                      /* mod at 24 */) {
                                                  case 0: 
                                                    
                                                      switch((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */) {
                                                        case 0: case 1: 
                                                        case 2: case 3: 
                                                        case 6: case 7: 
                                                          goto MATCH_label_c153; 
                                                          
                                                          break;
                                                        case 4: 
                                                          MATCH_w_8_32 = 
                                                            getByte(4 + 
                                                                  MATCH_p); 
                                                          if ((MATCH_w_8_32 & 0x7) 
                                                                  /* base at 32 */ == 5 && 
                                                            (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ && 
                                                            (MATCH_w_8_32 >> 3 & 0x7) 
                                                                  /* index at 32 */ < 8)) 
                                                            goto MATCH_label_c155;  /*opt-block+*/
                                                          else 
                                                            goto MATCH_label_c154;  /*opt-block+*/
                                                          
                                                          break;
                                                        case 5: 
                                                          goto MATCH_label_c156; 
                                                          
                                                          break;
                                                        default: assert(0);
                                                      } /* (MATCH_w_8_24 & 0x7) 
                                                            -- r_m at 24 --*/ 
                                                    break;
                                                  case 1: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) { 
                                                      unsigned Eaddr = 
                                                        3 + 
                                                        addressToPC(MATCH_p);
                                                      unsigned r16 = 
                                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                                              /* reg_opcode at 24 */;
                                                      nextPC = 6 + MATCH_p; 
                                                      
#line 938 "frontend/machine/pentium/decoder.m"
                                                      

                                                              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

                                                      

                                                      
                                                      
                                                      
                                                    } /*opt-block*//*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c154;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 2: 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    if ((MATCH_w_8_24 & 0x7) 
                                                            /* r_m at 24 */ == 4 && 
                                                      (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ && 
                                                      (MATCH_w_8_32 >> 3 & 0x7) 
                                                            /* index at 32 */ < 8)) 
                                                      goto MATCH_label_c155;  /*opt-block+*/
                                                    else 
                                                      goto MATCH_label_c156;  /*opt-block+*/
                                                    
                                                    break;
                                                  case 3: 
                                                    goto MATCH_label_c153; 
                                                    
                                                    break;
                                                  default: assert(0);
                                                } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                      -- mod at 24 --*/ 
                                              
                                            } /*opt-block*/
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- col at 16 --*/ 
                                      break;
                                    case 12: 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* col at 16 */ == 1) 
                                        if ((MATCH_w_8_16 >> 3 & 0x1) 
                                                /* page at 16 */ == 1) 
                                          goto MATCH_label_c48;  /*opt-block+*/
                                        else { 
                                          MATCH_w_8_24 = 
                                            getByte(3 + MATCH_p); 
                                          
                                            switch((MATCH_w_8_24 >> 6 & 0x3) 
                                                  /* mod at 24 */) {
                                              case 0: 
                                                
                                                  switch((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */) {
                                                    case 0: case 1: case 2: 
                                                    case 3: case 6: case 7: 
                                                      goto MATCH_label_c161; 
                                                      
                                                      break;
                                                    case 4: 
                                                      MATCH_w_8_32 = 
                                                        getByte(4 + MATCH_p); 
                                                      if ((MATCH_w_8_32 & 0x7) 
                                                              /* base at 32 */ == 5 && 
                                                        (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ && 
                                                        (MATCH_w_8_32 >> 3 & 0x7) 
                                                              /* index at 32 */ < 8)) 
                                                        goto MATCH_label_c163;  /*opt-block+*/
                                                      else 
                                                        goto MATCH_label_c162;  /*opt-block+*/
                                                      
                                                      break;
                                                    case 5: 
                                                      goto MATCH_label_c164; 
                                                      
                                                      break;
                                                    default: assert(0);
                                                  } /* (MATCH_w_8_24 & 0x7) 
                                                        -- r_m at 24 --*/ 
                                                break;
                                              case 1: 
                                                MATCH_w_8_32 = 
                                                  getByte(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) { 
                                                  unsigned Eaddr = 
                                                    3 + addressToPC(MATCH_p);
                                                  unsigned reg = 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* reg_opcode at 24 */;
                                                  nextPC = 6 + MATCH_p; 
                                                  
#line 350 "frontend/machine/pentium/decoder.m"
                                                  

                                                          stmts = instantiate(pc,  "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);

                                                  

                                                  
                                                  
                                                  
                                                } /*opt-block*//*opt-block+*/
                                                else 
                                                  goto MATCH_label_c162;  /*opt-block+*/
                                                
                                                break;
                                              case 2: 
                                                MATCH_w_8_32 = 
                                                  getByte(4 + MATCH_p); 
                                                if ((MATCH_w_8_24 & 0x7) 
                                                        /* r_m at 24 */ == 4 && 
                                                  (0 <= (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ && 
                                                  (MATCH_w_8_32 >> 3 & 0x7) 
                                                        /* index at 32 */ < 8)) 
                                                  goto MATCH_label_c163;  /*opt-block+*/
                                                else 
                                                  goto MATCH_label_c164;  /*opt-block+*/
                                                
                                                break;
                                              case 3: 
                                                goto MATCH_label_c161; break;
                                              default: assert(0);
                                            } /* (MATCH_w_8_24 >> 6 & 0x3) 
                                                  -- mod at 24 --*/ 
                                          
                                        } /*opt-block*/ 
                                      else 
                                        goto MATCH_label_c48;  /*opt-block+*/
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 4 & 0xf) 
                                        -- row at 16 --*/ 
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c169; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c171;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c170;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c172; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1496 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SBBmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c170;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c171;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c172;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c169; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c165; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c167;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c166;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c168; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1502 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ADCmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c166;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c167;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c168;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c165; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c177; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c179;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c178;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c180; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1424 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SBBrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c178;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c179;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c180;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c177; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c173; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c175;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c174;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c176; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1430 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ADCrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c174;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c175;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c176;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c173; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1700 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SBBiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1703 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADCiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c185; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c187;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c186;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c188; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1484 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SUBmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c186;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c187;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c188;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c185; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c181; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c183;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c182;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c184; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1490 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ANDmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c182;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c183;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c184;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c181; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c193; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c195;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c194;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c196; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1412 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "SUBrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c194;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c195;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c196;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c193; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c189; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c191;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c190;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c192; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1418 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "ANDrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c190;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c191;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c192;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c189; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1694 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SUBiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1697 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ANDiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c201; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c203;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c202;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c204; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1472 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "CMPmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c202;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c203;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c204;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c201; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c197; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c199;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c198;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c200; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1478 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "XORmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c198;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c199;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c200;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c197; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c209; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c211;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c210;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c212; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1400 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "CMPrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c210;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c211;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c212;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c209; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c205; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c207;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c206;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c208; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1406 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "XORrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c206;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c207;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c208;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c205; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1688 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "CMPiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 1691 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "XORiAX", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 4: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1203 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "DECow", DIS_R32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 1119 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "INCow", DIS_R32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        
                        break;
                      case 5: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 869 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "POPow", DIS_R32);   // Check!

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 830 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "PUSHow", DIS_R32);  // Check!

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        
                        break;
                      case 6: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  int /* [~32768..32767] */ i16 = 
                                    sign_extend((MATCH_w_16_16 & 0xffff) 
                                                      /* i16 at 16 */, 16);
                                  nextPC = 4 + MATCH_p; 
                                  
#line 818 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "PUSH.Ivow", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                                break;
                              case 1: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c213; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c215; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c214; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_16_56 = 
                                              getWord(7 + MATCH_p); 
                                            goto MATCH_label_c216; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_40 = getWord(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~32768..32767] */ i16 = 
                                            sign_extend((MATCH_w_16_40 & 0xffff) 
                                                              /* i16 at 40 */, 
                                                        16);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 7 + MATCH_p; 
                                          
#line 1152 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);

                                          

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_32 = getWord(4 + MATCH_p); 
                                        goto MATCH_label_c214; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_16_64 = getWord(8 + MATCH_p); 
                                        goto MATCH_label_c215; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_16_56 = getWord(7 + MATCH_p); 
                                        goto MATCH_label_c216; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_16_24 = getWord(3 + MATCH_p); 
                                      goto MATCH_label_c213; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 2: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                { 
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_16 & 0xff) 
                                                      /* i8 at 16 */, 8);
                                  nextPC = 3 + MATCH_p; 
                                  
#line 824 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "PUSH.Ixow", DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                                break;
                              case 3: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c217; 
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c219; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c218; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 5: 
                                            MATCH_w_8_56 = 
                                              getByte(7 + MATCH_p); 
                                            goto MATCH_label_c220; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_40 = getByte(5 + MATCH_p); 
                                        { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          int /* [~128..127] */ i8 = 
                                            sign_extend((MATCH_w_8_40 & 0xff) 
                                                              /* i8 at 40 */, 
                                                        8);
                                          unsigned reg = 
                                            (MATCH_w_8_16 >> 3 & 0x7) 
                                                  /* reg_opcode at 16 */;
                                          nextPC = 6 + MATCH_p; 
                                          
#line 1158 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);

                                          

                                          
                                          
                                          
                                        }
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                        goto MATCH_label_c218; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        MATCH_w_8_64 = getByte(8 + MATCH_p); 
                                        goto MATCH_label_c219; 
                                        
                                      } /*opt-block*/
                                      else { 
                                        MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                        goto MATCH_label_c220; 
                                        
                                      } /*opt-block*/
                                      
                                      break;
                                    case 3: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c217; 
                                      
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                                break;
                              case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c48; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        break;
                      case 7: 
                        goto MATCH_label_c48; break;
                      case 8: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c253; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c255;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c254;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c256; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1029 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVmrow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c254;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c255;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c256;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c253; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c221; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c223; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c222; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c224; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1637 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ADDiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c222; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c223; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c224; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c221; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c225; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c227; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c226; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c228; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1634 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ORiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c226; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c227; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c228; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c225; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c229; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c231; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c230; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c232; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1631 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ADCiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c230; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c231; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c232; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c229; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c233; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c235; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c234; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c236; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1628 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SBBiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c234; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c235; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c236; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c233; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c237; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c239; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c238; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c240; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1625 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ANDiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c238; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c239; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c240; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c237; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c241; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c243; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c242; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c244; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1622 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SUBiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c242; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c243; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c244; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c241; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c245; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c247; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c246; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c248; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1619 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "XORiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c246; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c247; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c248; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c245; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_16_24 = 
                                                    getWord(3 + MATCH_p); 
                                                  goto MATCH_label_c249; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_16_64 = 
                                                      getWord(8 + MATCH_p); 
                                                    goto MATCH_label_c251; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_16_32 = 
                                                      getWord(4 + MATCH_p); 
                                                    goto MATCH_label_c250; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_16_56 = 
                                                    getWord(7 + MATCH_p); 
                                                  goto MATCH_label_c252; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_40 = 
                                                getWord(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~32768..32767] */ i16 = 
                                                  sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                    /* i16 at 40 */, 
                                                              16);
                                                nextPC = 7 + MATCH_p; 
                                                
#line 1616 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "CMPiw", DIS_EADDR16, DIS_I16);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_32 = 
                                                getWord(4 + MATCH_p); 
                                              goto MATCH_label_c250; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_16_64 = 
                                                getWord(8 + MATCH_p); 
                                              goto MATCH_label_c251; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c252; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_16_24 = 
                                              getWord(3 + MATCH_p); 
                                            goto MATCH_label_c249; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c289; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c291;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c290;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c292; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1020 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "MOVrmow", DIS_REG16, DIS_EADDR16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c290;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c291;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c292;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c289; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c257; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c259; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c258; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c260; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1589 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ADDiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c258; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c259; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c260; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c257; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c261; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c263; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c262; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c264; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1583 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ORiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c262; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c263; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c264; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c261; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c265; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c267; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c266; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c268; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1577 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ADCiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c266; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c267; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c268; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c265; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c269; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c271; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c270; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c272; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1571 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SBBiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c270; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c271; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c272; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c269; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c273; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c275; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c274; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c276; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1565 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ANDiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c274; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c275; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c276; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c273; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c277; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c279; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c278; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c280; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1556 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SUBiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c278; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c279; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c280; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c277; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c281; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c283; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c282; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c284; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1550 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "XORiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c282; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c283; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c284; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c281; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c285; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c287; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c286; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c288; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 1544 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "CMPiowb", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c286; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c287; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c288; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c285; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            { 
                                              unsigned Mem = 
                                                2 + addressToPC(MATCH_p);
                                              unsigned reg = 
                                                (MATCH_w_8_16 >> 3 & 0x7) 
                                                      /* reg_opcode at 16 */;
                                              nextPC = 3 + MATCH_p; 
                                              
#line 1071 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "LEA.ow", DIS_REG16, DIS_MEM);

                                              

                                              
                                              
                                              
                                            }
                                            
                                            break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c298;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c297;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c299; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Mem = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 1071 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "LEA.ow", DIS_REG16, DIS_MEM);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c297;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c298;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c299;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c48; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c293; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c295;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c294;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c296; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 374 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c294;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c295;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c296;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c293; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              { 
                                                unsigned Mem = 
                                                  2 + addressToPC(MATCH_p);
                                                nextPC = 3 + MATCH_p; 
                                                
#line 875 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "POP.Evow", DIS_MEM);

                                                

                                                //    | OUTSvod() =>

                                                //        stmts = instantiate(pc,  "OUTSvod");

                                                

                                                //    | OUTSvow() =>

                                                //        stmts = instantiate(pc,  "OUTSvow");

                                                

                                                //    | OUTSB() =>

                                                //        stmts = instantiate(pc,  "OUTSB");

                                                

                                                //    | OUT.DX.eAXod() =>

                                                //        stmts = instantiate(pc,  "OUT.DX.eAXod");

                                                

                                                //    | OUT.DX.eAXow() =>

                                                //        stmts = instantiate(pc,  "OUT.DX.eAXow");

                                                

                                                //    | OUT.DX.AL() =>

                                                //        stmts = instantiate(pc,  "OUT.DX.AL");

                                                

                                                //    | OUT.Ib.eAXod(i8) =>

                                                //        stmts = instantiate(pc,  "OUT.Ib.eAXod", DIS_I8);

                                                

                                                //    | OUT.Ib.eAXow(i8) =>

                                                //        stmts = instantiate(pc,  "OUT.Ib.eAXow", DIS_I8);

                                                

                                                //    | OUT.Ib.AL(i8) =>

                                                //        stmts = instantiate(pc,  "OUT.Ib.AL", DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c305;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c304;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c306; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Mem = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 875 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "POP.Evow", DIS_MEM);

                                          

                                          //    | OUTSvod() =>

                                          //        stmts = instantiate(pc,  "OUTSvod");

                                          

                                          //    | OUTSvow() =>

                                          //        stmts = instantiate(pc,  "OUTSvow");

                                          

                                          //    | OUTSB() =>

                                          //        stmts = instantiate(pc,  "OUTSB");

                                          

                                          //    | OUT.DX.eAXod() =>

                                          //        stmts = instantiate(pc,  "OUT.DX.eAXod");

                                          

                                          //    | OUT.DX.eAXow() =>

                                          //        stmts = instantiate(pc,  "OUT.DX.eAXow");

                                          

                                          //    | OUT.DX.AL() =>

                                          //        stmts = instantiate(pc,  "OUT.DX.AL");

                                          

                                          //    | OUT.Ib.eAXod(i8) =>

                                          //        stmts = instantiate(pc,  "OUT.Ib.eAXod", DIS_I8);

                                          

                                          //    | OUT.Ib.eAXow(i8) =>

                                          //        stmts = instantiate(pc,  "OUT.Ib.eAXow", DIS_I8);

                                          

                                          //    | OUT.Ib.AL(i8) =>

                                          //        stmts = instantiate(pc,  "OUT.Ib.AL", DIS_I8);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c304;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c305;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c306;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c48; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c48;  /*opt-block+*/
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 6 & 0x3) 
                                        /* mod at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */) {
                                          case 0: case 1: case 2: case 3: 
                                          case 6: case 7: 
                                            goto MATCH_label_c300; break;
                                          case 4: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_24 & 0x7) 
                                                    /* base at 24 */ == 5 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c302;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c301;  /*opt-block+*/
                                            
                                            break;
                                          case 5: 
                                            goto MATCH_label_c303; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 & 0x7) 
                                              -- r_m at 16 --*/ 
                                      break;
                                    case 1: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) { 
                                        unsigned Eaddr = 
                                          2 + addressToPC(MATCH_p);
                                        unsigned reg = 
                                          (MATCH_w_8_16 >> 3 & 0x7) 
                                                /* reg_opcode at 16 */;
                                        nextPC = 5 + MATCH_p; 
                                        
#line 326 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

                                        

                                        
                                        
                                        
                                      } /*opt-block*//*opt-block+*/
                                      else 
                                        goto MATCH_label_c301;  /*opt-block+*/
                                      
                                      break;
                                    case 2: 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      if ((MATCH_w_8_16 & 0x7) 
                                              /* r_m at 16 */ == 4 && 
                                        (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ && 
                                        (MATCH_w_8_24 >> 3 & 0x7) 
                                              /* index at 24 */ < 8)) 
                                        goto MATCH_label_c302;  /*opt-block+*/
                                      else 
                                        goto MATCH_label_c303;  /*opt-block+*/
                                      
                                      break;
                                    case 3: 
                                      goto MATCH_label_c300; break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                        -- mod at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 9: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                          
                            switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                              case 0: 
                                nextPC = 2 + MATCH_p; 
                                
#line 1269 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "CBW");

                                

                                    /* Decode the following as a NOP. We see these in startup code, and anywhere

                                        that calls the OS (as lcall 7, 0) */

                                
                                
                                
                                
                                break;
                              case 1: 
                                nextPC = 2 + MATCH_p; 
                                
#line 1224 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "CWD");

                                

                                
                                
                                
                                
                                break;
                              case 2: case 3: case 4: case 5: case 6: case 7: 
                                goto MATCH_label_c48; break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/  
                        else { 
                          unsigned r32 = (MATCH_w_8_8 & 0x7) /* r32 at 8 */;
                          nextPC = 2 + MATCH_p; 
                          
#line 344 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XCHGeAXow", DIS_R32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 6: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_w_16_16 = getWord(2 + MATCH_p); 
                                { 
                                  unsigned i16 = 
                                    (MATCH_w_16_16 & 0xffff) /* i16 at 16 */;
                                  nextPC = 4 + MATCH_p; 
                                  
#line 392 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "TEST.eAX.Ivow", DIS_I16);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 1005 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "MOV.eAX.Ovow", DIS_OFF);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 404 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "STOSvow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                { 
                                  unsigned off = 
                                    MATCH_w_32_16 /* i32 at 16 */;
                                  nextPC = 6 + MATCH_p; 
                                  
#line 996 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "MOV.Ov.eAXow", DIS_OFF);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1739 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "LODSvow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 953 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "MOVSvow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                nextPC = 2 + MATCH_p; 
                                
#line 459 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SCASvow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else { 
                                nextPC = 2 + MATCH_p; 
                                
#line 1245 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "CMPSvow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 11: 
                        if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = getWord(2 + MATCH_p); 
                          { 
                            int /* [~32768..32767] */ i16 = 
                              sign_extend((MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16);
                            unsigned r16 = (MATCH_w_8_8 & 0x7) /* r16 at 8 */;
                            nextPC = 4 + MATCH_p; 
                            
#line 987 "frontend/machine/pentium/decoder.m"
                            

                                    stmts = instantiate(pc,  "MOViw", DIS_R16, DIS_I16);  // Check!

                            

                            
                            
                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        
                        break;
                      case 12: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 3: case 4: case 5: case 6: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c307; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c309; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c308; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c310; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 633 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c308; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c309; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c310; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c307; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c311; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c313; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c312; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c314; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 627 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c312; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c313; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c314; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c311; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c315; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c317; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c316; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c318; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 621 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c316; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c317; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c318; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c315; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c319; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c321; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c320; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c322; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 615 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c320; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c321; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c322; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c319; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c323; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c325; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c324; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c326; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 609 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c324; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c325; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c326; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c323; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c327; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c329; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c328; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c330; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 603 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c328; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c329; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c330; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c327; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c48; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  goto MATCH_label_c331; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) { 
                                                    MATCH_w_8_64 = 
                                                      getByte(8 + MATCH_p); 
                                                    goto MATCH_label_c333; 
                                                    
                                                  } /*opt-block*/
                                                  else { 
                                                    MATCH_w_8_32 = 
                                                      getByte(4 + MATCH_p); 
                                                    goto MATCH_label_c332; 
                                                    
                                                  } /*opt-block*/
                                                  
                                                  break;
                                                case 5: 
                                                  MATCH_w_8_56 = 
                                                    getByte(7 + MATCH_p); 
                                                  goto MATCH_label_c334; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_40 = 
                                                getByte(5 + MATCH_p); 
                                              { 
                                                unsigned Eaddr = 
                                                  2 + addressToPC(MATCH_p);
                                                int /* [~128..127] */ i8 = 
                                                  sign_extend((MATCH_w_8_40 & 0xff) 
                                                                    /* i8 at 40 */, 
                                                              8);
                                                nextPC = 6 + MATCH_p; 
                                                
#line 597 "frontend/machine/pentium/decoder.m"
                                                

                                                        stmts = instantiate(pc,  "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);

                                                

                                                
                                                
                                                
                                              }
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_32 = 
                                                getByte(4 + MATCH_p); 
                                              goto MATCH_label_c332; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              MATCH_w_8_64 = 
                                                getByte(8 + MATCH_p); 
                                              goto MATCH_label_c333; 
                                              
                                            } /*opt-block*/
                                            else { 
                                              MATCH_w_8_56 = 
                                                getByte(7 + MATCH_p); 
                                              goto MATCH_label_c334; 
                                              
                                            } /*opt-block*/
                                            
                                            break;
                                          case 3: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            goto MATCH_label_c331; 
                                            
                                            break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */ == 0) 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              goto MATCH_label_c335; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  getWord(8 + MATCH_p); 
                                                goto MATCH_label_c337; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  getWord(4 + MATCH_p); 
                                                goto MATCH_label_c336; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c338; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            getWord(5 + MATCH_p); 
                                          { 
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            int /* [~32768..32767] */ i16 = 
                                              sign_extend((MATCH_w_16_40 & 0xffff) 
                                                                /* i16 at 40 */, 
                                                          16);
                                            nextPC = 7 + MATCH_p; 
                                            
#line 978 "frontend/machine/pentium/decoder.m"
                                            

                                                    stmts = instantiate(pc,  "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);

                                            

                                            
                                            
                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            getWord(4 + MATCH_p); 
                                          goto MATCH_label_c336; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            getWord(8 + MATCH_p); 
                                          goto MATCH_label_c337; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            getWord(7 + MATCH_p); 
                                          goto MATCH_label_c338; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = getWord(3 + MATCH_p); 
                                        goto MATCH_label_c335; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/  
                                else 
                                  goto MATCH_label_c48;  /*opt-block+*/
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 13: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 2: case 4: case 5: case 6: case 7: 
                              goto MATCH_label_c48; break;
                            case 1: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c339; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c341;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c340;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c342; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 738 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "ROLB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c340;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c341;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c342;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c339; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c343; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c345;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c344;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c346; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 726 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "ORB.Ev.1owR", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c344;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c345;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c346;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c343; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c347; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c349;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c348;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c350; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 714 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "RCLB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c348;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c349;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c350;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c347; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c351; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c353;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c352;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c354; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 702 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "RCRB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c352;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c353;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c354;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c351; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c355; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c357;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c356;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c358; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 690 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SHLSALB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c356;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c357;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c358;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c355; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c359; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c361;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c360;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c362; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 678 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SHRB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c360;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c361;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c362;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c359; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c48; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c363; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c365;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c364;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c366; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 666 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SARB.Ev.1ow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c364;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c365;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c366;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c363; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) 
                                goto MATCH_label_c48;  /*opt-block+*/
                              else { 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                
                                  switch((MATCH_w_8_16 >> 3 & 0x7) 
                                        /* reg_opcode at 16 */) {
                                    case 0: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c367; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c369;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c368;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c370; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 732 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "ROLB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c368;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c369;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c370;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c367; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 1: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c371; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c373;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c372;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c374; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 720 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "RORB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c372;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c373;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c374;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c371; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 2: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c375; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c377;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c376;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c378; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 708 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "RCLB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c376;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c377;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c378;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c375; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 3: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c379; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c381;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c380;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c382; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 696 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "RCRB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c380;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c381;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c382;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c379; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 4: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c383; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c385;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c384;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c386; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 684 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SHLSALB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c384;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c385;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c386;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c383; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 5: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c387; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c389;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c388;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c390; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 672 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SHRB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c388;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c389;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c390;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c387; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    case 6: 
                                      goto MATCH_label_c48; break;
                                    case 7: 
                                      
                                        switch((MATCH_w_8_16 >> 6 & 0x3) 
                                              /* mod at 16 */) {
                                          case 0: 
                                            
                                              switch((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */) {
                                                case 0: case 1: case 2: 
                                                case 3: case 6: case 7: 
                                                  goto MATCH_label_c391; 
                                                  
                                                  break;
                                                case 4: 
                                                  MATCH_w_8_24 = 
                                                    getByte(3 + MATCH_p); 
                                                  if ((MATCH_w_8_24 & 0x7) 
                                                          /* base at 24 */ == 5 && 
                                                    (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ && 
                                                    (MATCH_w_8_24 >> 3 & 0x7) 
                                                          /* index at 24 */ < 8)) 
                                                    goto MATCH_label_c393;  /*opt-block+*/
                                                  else 
                                                    goto MATCH_label_c392;  /*opt-block+*/
                                                  
                                                  break;
                                                case 5: 
                                                  goto MATCH_label_c394; 
                                                  
                                                  break;
                                                default: assert(0);
                                              } /* (MATCH_w_8_16 & 0x7) 
                                                    -- r_m at 16 --*/ 
                                            break;
                                          case 1: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) { 
                                              unsigned Eaddr = 
                                                2 + addressToPC(MATCH_p);
                                              nextPC = 5 + MATCH_p; 
                                              
#line 660 "frontend/machine/pentium/decoder.m"
                                              

                                                      stmts = instantiate(pc,  "SARB.Ev.CLow", DIS_EADDR16);

                                              

                                              
                                              
                                              
                                            } /*opt-block*//*opt-block+*/
                                            else 
                                              goto MATCH_label_c392;  /*opt-block+*/
                                            
                                            break;
                                          case 2: 
                                            MATCH_w_8_24 = 
                                              getByte(3 + MATCH_p); 
                                            if ((MATCH_w_8_16 & 0x7) 
                                                    /* r_m at 16 */ == 4 && 
                                              (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ && 
                                              (MATCH_w_8_24 >> 3 & 0x7) 
                                                    /* index at 24 */ < 8)) 
                                              goto MATCH_label_c393;  /*opt-block+*/
                                            else 
                                              goto MATCH_label_c394;  /*opt-block+*/
                                            
                                            break;
                                          case 3: 
                                            goto MATCH_label_c391; break;
                                          default: assert(0);
                                        } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                              -- mod at 16 --*/ 
                                      break;
                                    default: assert(0);
                                  } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                        -- reg_opcode at 16 --*/ 
                                
                              } /*opt-block*/
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      case 14: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 1 && 
                          (MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) { 
                          MATCH_w_16_16 = getWord(2 + MATCH_p); 
                          MATCH_name = 
                            MATCH_name_page_0[(MATCH_w_8_8 >> 3 & 0x1) 
                                /* page at 8 */]; 
                          { 
                            char *name = MATCH_name;
                            unsigned relocd = 
                              4 + sign_extend((MATCH_w_16_16 & 0xffff) 
                                                /* i16 at 16 */, 16) + 
                              addressToPC(MATCH_p);
                            nextPC = 4 + MATCH_p; 
                            
#line 156 "frontend/machine/pentium/decoder.m"
                            

                                    unused((int) name);

                                    unconditionalJump(name, 3, relocd, delta, pc, stmts, result);

                            
                            
                            
                          }
                          
                        } /*opt-block*/
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        
                        break;
                      case 15: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 7) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) 
                                  /* page at 8 */ == 1) { 
                            MATCH_w_8_16 = getByte(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c423; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c425;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c424;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c426; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1125 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "INC.Evow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c424;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c425;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c426;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c423; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c427; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c429;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c428;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c430; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1209 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "DEC.Evow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c428;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c429;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c430;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c427; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 2: case 3: case 4: case 5: case 7: 
                                  goto MATCH_label_c48; break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c431; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c433;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c432;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c434; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 836 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "PUSH.Evow", DIS_EADDR16);

                                          

                                          //    | POPFod() =>

                                          //        stmts = instantiate(pc,  "POPFod");

                                          

                                          //    | POPFow() =>

                                          //        stmts = instantiate(pc,  "POPFow");

                                          

                                          //    | POPAod() =>

                                          //        stmts = instantiate(pc,  "POPAod");

                                          

                                          //    | POPAow() =>

                                          //        stmts = instantiate(pc,  "POPAow");

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c432;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c433;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c434;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c431; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_16 = getByte(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 >> 3 & 0x7) 
                                    /* reg_opcode at 16 */) {
                                case 0: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              MATCH_w_16_24 = 
                                                getWord(3 + MATCH_p); 
                                              goto MATCH_label_c395; 
                                              
                                              break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) { 
                                                MATCH_w_16_64 = 
                                                  getWord(8 + MATCH_p); 
                                                goto MATCH_label_c397; 
                                                
                                              } /*opt-block*/
                                              else { 
                                                MATCH_w_16_32 = 
                                                  getWord(4 + MATCH_p); 
                                                goto MATCH_label_c396; 
                                                
                                              } /*opt-block*/
                                              
                                              break;
                                            case 5: 
                                              MATCH_w_16_56 = 
                                                getWord(7 + MATCH_p); 
                                              goto MATCH_label_c398; 
                                              
                                              break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_40 = 
                                            getWord(5 + MATCH_p); 
                                          { 
                                            unsigned Eaddr = 
                                              2 + addressToPC(MATCH_p);
                                            unsigned i16 = 
                                              (MATCH_w_16_40 & 0xffff) 
                                                    /* i16 at 40 */;
                                            nextPC = 7 + MATCH_p; 
                                            
#line 383 "frontend/machine/pentium/decoder.m"
                                            

                                                    stmts = instantiate(pc,  "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);

                                            

                                            
                                            
                                            
                                          }
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_32 = 
                                            getWord(4 + MATCH_p); 
                                          goto MATCH_label_c396; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          MATCH_w_16_64 = 
                                            getWord(8 + MATCH_p); 
                                          goto MATCH_label_c397; 
                                          
                                        } /*opt-block*/
                                        else { 
                                          MATCH_w_16_56 = 
                                            getWord(7 + MATCH_p); 
                                          goto MATCH_label_c398; 
                                          
                                        } /*opt-block*/
                                        
                                        break;
                                      case 3: 
                                        MATCH_w_16_24 = getWord(3 + MATCH_p); 
                                        goto MATCH_label_c395; 
                                        
                                        break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 1: 
                                  goto MATCH_label_c48; break;
                                case 2: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c399; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c401;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c400;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c402; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 908 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "NOTow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c400;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c401;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c402;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c399; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 3: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c403; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c405;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c404;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c406; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 917 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "NEGow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c404;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c405;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c406;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c403; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 4: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c407; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c409;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c408;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c410; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 926 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "MUL.AXow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c408;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c409;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c410;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c407; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 5: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c411; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c413;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c412;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c414; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1170 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "IMULow", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c412;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c413;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c414;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c411; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 6: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c415; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c417;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c416;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c418; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1194 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "DIVAX", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c416;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c417;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c418;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c415; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                case 7: 
                                  
                                    switch((MATCH_w_8_16 >> 6 & 0x3) 
                                          /* mod at 16 */) {
                                      case 0: 
                                        
                                          switch((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */) {
                                            case 0: case 1: case 2: case 3: 
                                            case 6: case 7: 
                                              goto MATCH_label_c419; break;
                                            case 4: 
                                              MATCH_w_8_24 = 
                                                getByte(3 + MATCH_p); 
                                              if ((MATCH_w_8_24 & 0x7) 
                                                      /* base at 24 */ == 5 && 
                                                (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ && 
                                                (MATCH_w_8_24 >> 3 & 0x7) 
                                                      /* index at 24 */ < 8)) 
                                                goto MATCH_label_c421;  /*opt-block+*/
                                              else 
                                                goto MATCH_label_c420;  /*opt-block+*/
                                              
                                              break;
                                            case 5: 
                                              goto MATCH_label_c422; break;
                                            default: assert(0);
                                          } /* (MATCH_w_8_16 & 0x7) 
                                                -- r_m at 16 --*/ 
                                        break;
                                      case 1: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) { 
                                          unsigned Eaddr = 
                                            2 + addressToPC(MATCH_p);
                                          nextPC = 5 + MATCH_p; 
                                          
#line 1179 "frontend/machine/pentium/decoder.m"
                                          

                                                  stmts = instantiate(pc,  "IDIVAX", DIS_EADDR16);

                                          

                                          
                                          
                                          
                                        } /*opt-block*//*opt-block+*/
                                        else 
                                          goto MATCH_label_c420;  /*opt-block+*/
                                        
                                        break;
                                      case 2: 
                                        MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                        if ((MATCH_w_8_16 & 0x7) 
                                                /* r_m at 16 */ == 4 && 
                                          (0 <= (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ && 
                                          (MATCH_w_8_24 >> 3 & 0x7) 
                                                /* index at 24 */ < 8)) 
                                          goto MATCH_label_c421;  /*opt-block+*/
                                        else 
                                          goto MATCH_label_c422;  /*opt-block+*/
                                        
                                        break;
                                      case 3: 
                                        goto MATCH_label_c419; break;
                                      default: assert(0);
                                    } /* (MATCH_w_8_16 >> 6 & 0x3) 
                                          -- mod at 16 --*/ 
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 >> 3 & 0x7) 
                                    -- reg_opcode at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 7: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 196 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.O", 2, relocd, (BRANCH_TYPE)0)

                    

                        /*

                         * Conditional branches, 16 bit offset: 66 0F 8X XX XX

                         */

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 193 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NO", 2, relocd, (BRANCH_TYPE)0)

                    
                    
                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 191 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.B", 2, relocd, BRANCH_JUL)

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 189 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NB", 2, relocd, BRANCH_JUGE)

                    
                    
                    
                  }
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 187 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.Z", 2, relocd, BRANCH_JE)

                    
                    
                    
                  }
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 185 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NZ", 2, relocd, BRANCH_JNE)

                    
                    
                    
                  }
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 183 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.BE", 2, relocd, BRANCH_JULE)

                    
                    
                    
                  }
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 181 "frontend/machine/pentium/decoder.m"
                    

                            COND_JUMP("Jb.NBE", 2, relocd, BRANCH_JUG)

                    
                    
                    
                  }
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 8: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c435; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c437; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c436; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c438; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1661 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADDib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c436; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c437; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c438; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c435; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c439; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c441; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c440; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c442; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1658 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ORib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c440; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c441; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c442; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c439; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c443; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c445; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c444; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c446; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1655 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADCib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c444; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c445; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c446; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c443; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c447; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c449; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c448; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c450; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1652 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SBBib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c448; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c449; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c450; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c447; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c451; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c453; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c452; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c454; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1649 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ANDib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c452; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c453; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c454; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c451; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c455; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c457; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c456; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c458; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1646 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SUBib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c456; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c457; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c458; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c455; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c459; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c461; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c460; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c462; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1643 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "XORib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c460; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c461; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c462; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c459; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c463; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c465; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c464; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c466; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1640 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "CMPib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c464; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c465; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c466; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c463; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c467; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c469; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c468; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c470; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1613 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADDid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c468; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c469; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c470; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c467; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c471; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c473; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c472; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c474; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1610 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ORid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c472; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c473; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c474; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c471; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c475; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c477; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c476; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c478; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1607 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADCid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c476; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c477; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c478; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c475; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c479; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c481; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c480; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c482; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1604 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SBBid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c480; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c481; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c482; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c479; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c483; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c485; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c484; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c486; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1601 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ANDid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c484; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c485; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c486; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c483; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c487; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c489; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c488; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c490; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1598 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SUBid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c488; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c489; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c490; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c487; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c491; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c493; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c492; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c494; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1595 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "XORid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c492; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c493; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c494; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c491; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c495; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c497; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c496; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c498; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 1592 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "CMPid", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c496; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c497; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c498; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c495; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  goto MATCH_label_c48; break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c499; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c501; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c500; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c502; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1586 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADDiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c500; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c501; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c502; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c499; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c503; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c505; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c504; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c506; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1580 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ORiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c504; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c505; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c506; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c503; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c507; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c509; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c508; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c510; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1574 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ADCiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c508; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c509; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c510; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c507; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c511; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c513; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c512; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c514; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1568 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SBBiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c512; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c513; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c514; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c511; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c515; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c517; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c516; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c518; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1559 "frontend/machine/pentium/decoder.m"
                                  

                                          // Special hack to ignore and $0xfffffff0, %esp

                                          Exp* oper = dis_Eaddr(Eaddr, 32);

                                          if (i8 != -16 || !(*oper == *Location::regOf(28)))

                                              stmts = instantiate(pc,  "ANDiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c516; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c517; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c518; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c515; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c519; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c521; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c520; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c522; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1553 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SUBiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c520; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c521; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c522; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c519; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c523; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c525; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c524; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c526; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1547 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "XORiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c524; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c525; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c526; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c523; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c527; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c529; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c528; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c530; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 1541 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "CMPiodb", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c528; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c529; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c530; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c527; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c531; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c533;  /*opt-block+*/
                              else 
                                goto MATCH_label_c532;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c534; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 377 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c532;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c533;  /*opt-block+*/
                        else 
                          goto MATCH_label_c534;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c531; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c535; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c537;  /*opt-block+*/
                              else 
                                goto MATCH_label_c536;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c538; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 371 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c536;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c537;  /*opt-block+*/
                        else 
                          goto MATCH_label_c538;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c535; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c539; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c541;  /*opt-block+*/
                              else 
                                goto MATCH_label_c540;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c542; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 329 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c540;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c541;  /*opt-block+*/
                        else 
                          goto MATCH_label_c542;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c539; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              goto MATCH_label_c543; break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c545;  /*opt-block+*/
                              else 
                                goto MATCH_label_c544;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c546; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Eaddr = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 323 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c544;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c545;  /*opt-block+*/
                        else 
                          goto MATCH_label_c546;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c543; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 9: 
            if ((MATCH_w_8_0 & 0x7) /* col at 0 */ == 0) { 
              nextPC = 1 + MATCH_p; 
              
#line 332 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "NOP");

              

              
              
              
            } /*opt-block*//*opt-block+*/
            else { 
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r32 at 0 */;
              nextPC = 1 + MATCH_p; 
              
#line 341 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "XCHGeAXod", DIS_R32);

              

              
              
              
            } /*opt-block*//*opt-block+*/
            
            break;
          case 10: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1008 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "MOV.AL.Ob", DIS_OFF);

                    

                    //    | MOV.Sw.Ew(Mem, sr16) =>

                    //        stmts = instantiate(pc,  "MOV.Sw.Ew", DIS_MEM, DIS_SR16);

                    

                    //    | MOV.Ew.Sw(Mem, sr16) =>

                    //        stmts = instantiate(pc,  "MOV.Ew.Sw", DIS_MEM, DIS_SR16);

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 1002 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "MOV.eAX.Ovod", DIS_OFF);

                    

                    
                    
                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 999 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "MOV.Ob.AL", DIS_OFF);

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  MATCH_w_32_8 = getDword(1 + MATCH_p); 
                  { 
                    unsigned off = MATCH_w_32_8 /* i32 at 8 */;
                    nextPC = 5 + MATCH_p; 
                    
#line 993 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "MOV.Ov.eAXod", DIS_OFF);

                    

                    
                    
                    
                  }
                  
                  break;
                case 4: 
                  nextPC = 1 + MATCH_p; 
                  
#line 956 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "MOVSB");

                  

                  //    | MOV.Rd.Dd(reg, dr) => 

                  //        unused(reg); unused(dr);

                  //        stmts = instantiate(pc,  "UNIMP");

                  

                  //    | MOV.Dd.Rd(dr, reg) =>

                  //        unused(reg); unused(dr);

                  //        stmts = instantiate(pc,  "UNIMP");

                  

                  //    | MOV.Rd.Cd(reg, cr) =>

                  //        unused(reg); unused(cr);

                  //        stmts = instantiate(pc,  "UNIMP");

                  

                  //    | MOV.Cd.Rd(cr, reg) =>

                  //        unused(reg); unused(cr);

                  //        stmts = instantiate(pc,  "UNIMP");

                  

                  
                  
                  
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 950 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "MOVSvod");

                  

                  
                  
                  
                  
                  break;
                case 6: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1248 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CMPSB");

                  

                  
                  
                  
                  
                  break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1242 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CMPSvod");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 11: 
            MATCH_w_8_8 = getByte(1 + MATCH_p); 
            { 
              int /* [~128..127] */ i8 = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r8 = (MATCH_w_8_0 & 0x7) /* r8 at 0 */;
              nextPC = 2 + MATCH_p; 
              
#line 990 "frontend/machine/pentium/decoder.m"
              

                      stmts = instantiate(pc,  "MOVib", DIS_R8, DIS_I8);

              

              
              
              
            }
            
            break;
          case 12: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c547; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c549; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c548; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c550; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 654 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c548; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c549; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c550; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c547; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c551; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c553; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c552; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c554; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 651 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c552; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c553; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c554; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c551; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c555; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c557; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c556; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c558; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 648 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c556; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c557; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c558; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c555; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c559; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c561; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c560; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c562; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 645 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c560; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c561; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c562; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c559; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c563; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c565; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c564; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c566; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 642 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c564; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c565; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c566; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c563; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c567; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c569; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c568; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c570; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 639 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c568; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c569; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c570; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c567; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c571; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c573; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c572; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c574; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 636 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c572; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c573; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c574; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c571; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c575; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c577; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c576; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c578; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 630 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c576; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c577; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c578; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c575; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c579; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c581; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c580; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c582; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 624 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c580; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c581; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c582; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c579; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c583; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c585; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c584; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c586; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 618 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c584; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c585; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c586; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c583; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c587; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c589; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c588; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c590; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 612 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c588; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c589; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c590; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c587; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c591; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c593; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c592; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c594; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 606 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c592; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c593; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c594; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c591; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c595; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c597; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c596; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c598; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 600 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c596; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c597; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c598; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c595; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c599; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c601; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c600; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c602; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  int /* [~128..127] */ i8 = 
                                    sign_extend((MATCH_w_8_32 & 0xff) 
                                                      /* i8 at 32 */, 8);
                                  nextPC = 5 + MATCH_p; 
                                  
#line 594 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c600; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c601; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c602; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c599; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_16_8 = getWord(1 + MATCH_p); 
                  { 
                    unsigned i16 = (MATCH_w_16_8 & 0xffff) /* i16 at 8 */;
                    nextPC = 3 + MATCH_p; 
                    
#line 478 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "RET.Iw", DIS_I16);

                    		ReturnStatement *ret = new ReturnStatement;

                    		ret->setNumBytesPopped(DIS_I16->getAddr());

                    		result.rtl = new RTL(pc, stmts);

                            result.rtl->appendStmt(ret);

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: 
                  nextPC = 1 + MATCH_p; 
                  
#line 490 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "RET");

                          result.rtl = new RTL(pc, stmts);

                          result.rtl->appendStmt(new ReturnStatement);

                  

                  //   | REPNE() =>

                  //      stmts = instantiate(pc,  "REPNE");

                  

                  //  | REP() =>

                  //      stmts = instantiate(pc,  "REP");

                  

                  
                  
                  
                  
                  break;
                case 4: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1062 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "LES", DIS_REG32, DIS_MEM);

                                

                                
                                
                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c604;  /*opt-block+*/
                              else 
                                goto MATCH_label_c603;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c605; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1062 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "LES", DIS_REG32, DIS_MEM);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c603;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c604;  /*opt-block+*/
                        else 
                          goto MATCH_label_c605;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 5: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                            case 0: case 1: case 2: case 3: case 6: case 7: 
                              { 
                                unsigned Mem = 1 + addressToPC(MATCH_p);
                                unsigned reg = 
                                  (MATCH_w_8_8 >> 3 & 0x7) 
                                        /* reg_opcode at 8 */;
                                nextPC = 2 + MATCH_p; 
                                
#line 1074 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "LDS", DIS_REG32, DIS_MEM);

                                

                                
                                
                                
                              }
                              
                              break;
                            case 4: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_16 & 0x7) 
                                      /* base at 16 */ == 5 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c607;  /*opt-block+*/
                              else 
                                goto MATCH_label_c606;  /*opt-block+*/
                              
                              break;
                            case 5: 
                              goto MATCH_label_c608; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                        break;
                      case 1: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) { 
                          unsigned Mem = 1 + addressToPC(MATCH_p);
                          unsigned reg = 
                            (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
                          nextPC = 4 + MATCH_p; 
                          
#line 1074 "frontend/machine/pentium/decoder.m"
                          

                                  stmts = instantiate(pc,  "LDS", DIS_REG32, DIS_MEM);

                          

                          
                          
                          
                        } /*opt-block*//*opt-block+*/
                        else 
                          goto MATCH_label_c606;  /*opt-block+*/
                        
                        break;
                      case 2: 
                        MATCH_w_8_16 = getByte(2 + MATCH_p); 
                        if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                          (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                /* index at 16 */ && 
                          (MATCH_w_8_16 >> 3 & 0x7) /* index at 16 */ < 8)) 
                          goto MATCH_label_c607;  /*opt-block+*/
                        else 
                          goto MATCH_label_c608;  /*opt-block+*/
                        
                        break;
                      case 3: 
                        goto MATCH_label_c48; break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                goto MATCH_label_c609; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                  goto MATCH_label_c611; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                  goto MATCH_label_c610; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c612; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_32 = getByte(4 + MATCH_p); 
                            { 
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              int /* [~128..127] */ i8 = 
                                sign_extend((MATCH_w_8_32 & 0xff) 
                                                  /* i8 at 32 */, 8);
                              nextPC = 5 + MATCH_p; 
                              
#line 981 "frontend/machine/pentium/decoder.m"
                              

                                      stmts = instantiate(pc,  "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);

                              

                              
                              
                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_24 = getByte(3 + MATCH_p); 
                            goto MATCH_label_c610; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_8_56 = getByte(7 + MATCH_p); 
                            goto MATCH_label_c611; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_8_48 = getByte(6 + MATCH_p); 
                            goto MATCH_label_c612; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          goto MATCH_label_c609; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c48;  /*opt-block+*/
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */ == 0) 
                    
                      switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                        case 0: 
                          
                            switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                              case 0: case 1: case 2: case 3: case 6: case 7: 
                                MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                goto MATCH_label_c613; 
                                
                                break;
                              case 4: 
                                MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                if ((MATCH_w_8_16 & 0x7) 
                                        /* base at 16 */ == 5 && 
                                  (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ && 
                                  (MATCH_w_8_16 >> 3 & 0x7) 
                                        /* index at 16 */ < 8)) { 
                                  MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                  goto MATCH_label_c615; 
                                  
                                } /*opt-block*/
                                else { 
                                  MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                  goto MATCH_label_c614; 
                                  
                                } /*opt-block*/
                                
                                break;
                              case 5: 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c616; 
                                
                                break;
                              default: assert(0);
                            } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                          break;
                        case 1: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_32 = getDword(4 + MATCH_p); 
                            { 
                              unsigned Eaddr = 1 + addressToPC(MATCH_p);
                              unsigned i32 = MATCH_w_32_32 /* i32 at 32 */;
                              nextPC = 8 + MATCH_p; 
                              
#line 975 "frontend/machine/pentium/decoder.m"
                              

                                      stmts = instantiate(pc,  "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);

                              

                              
                              
                              
                            }
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_24 = getDword(3 + MATCH_p); 
                            goto MATCH_label_c614; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 2: 
                          MATCH_w_8_16 = getByte(2 + MATCH_p); 
                          if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                            (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ && 
                            (MATCH_w_8_16 >> 3 & 0x7) 
                                  /* index at 16 */ < 8)) { 
                            MATCH_w_32_56 = getDword(7 + MATCH_p); 
                            goto MATCH_label_c615; 
                            
                          } /*opt-block*/
                          else { 
                            MATCH_w_32_48 = getDword(6 + MATCH_p); 
                            goto MATCH_label_c616; 
                            
                          } /*opt-block*/
                          
                          break;
                        case 3: 
                          MATCH_w_32_16 = getDword(2 + MATCH_p); 
                          goto MATCH_label_c613; 
                          
                          break;
                        default: assert(0);
                      } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/  
                  else 
                    goto MATCH_label_c48;  /*opt-block+*/
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 13: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c617; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c619;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c618;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c620; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 780 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "ROLB.Eb.1", DIS_EADDR8);

                                

                                    // There is no SSL for these, so don't call instantiate, it will only

                                    // cause an assert failure. Also, may as well treat these as invalid instr

                                //    | PUSHFod() =>

                                //        stmts = instantiate(pc,  "PUSHFod");

                                

                                //    | PUSHFow() =>

                                //        stmts = instantiate(pc,  "PUSHFow");

                                

                                //    | PUSHAod() =>

                                //        stmts = instantiate(pc,  "PUSHAod");

                                

                                //    | PUSHAow() =>

                                //        stmts = instantiate(pc,  "PUSHAow");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c618;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c619;  /*opt-block+*/
                              else 
                                goto MATCH_label_c620;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c617; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c621; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c623;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c622;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c624; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 774 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RORB.Eb.1", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c622;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c623;  /*opt-block+*/
                              else 
                                goto MATCH_label_c624;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c621; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c625; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c627;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c626;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c628; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 768 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCLB.Eb.1", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c626;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c627;  /*opt-block+*/
                              else 
                                goto MATCH_label_c628;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c625; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c629; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c631;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c630;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c632; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 762 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCRB.Eb.1", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c630;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c631;  /*opt-block+*/
                              else 
                                goto MATCH_label_c632;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c629; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c633; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c635;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c634;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c636; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 756 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHLSALB.Eb.1", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c634;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c635;  /*opt-block+*/
                              else 
                                goto MATCH_label_c636;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c633; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c637; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c639;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c638;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c640; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 750 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHRB.Eb.1", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c638;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c639;  /*opt-block+*/
                              else 
                                goto MATCH_label_c640;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c637; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c641; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c643;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c642;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c644; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 744 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SARB.Eb.1", DIS_EADDR16);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c642;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c643;  /*opt-block+*/
                              else 
                                goto MATCH_label_c644;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c641; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c645; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c647;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c646;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c648; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 735 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "ROLB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c646;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c647;  /*opt-block+*/
                              else 
                                goto MATCH_label_c648;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c645; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c649; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c651;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c650;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c652; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 723 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RORB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c650;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c651;  /*opt-block+*/
                              else 
                                goto MATCH_label_c652;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c649; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c653; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c655;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c654;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c656; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 711 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCLB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c654;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c655;  /*opt-block+*/
                              else 
                                goto MATCH_label_c656;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c653; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c657; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c659;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c658;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c660; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 699 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCRB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c658;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c659;  /*opt-block+*/
                              else 
                                goto MATCH_label_c660;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c657; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c661; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c663;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c662;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c664; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 687 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHLSALB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c662;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c663;  /*opt-block+*/
                              else 
                                goto MATCH_label_c664;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c661; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c665; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c667;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c666;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c668; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 675 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHRB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c666;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c667;  /*opt-block+*/
                              else 
                                goto MATCH_label_c668;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c665; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c669; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c671;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c670;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c672; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 663 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SARB.Ev.1od", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c670;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c671;  /*opt-block+*/
                              else 
                                goto MATCH_label_c672;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c669; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c673; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c675;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c674;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c676; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 777 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "ROLB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c674;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c675;  /*opt-block+*/
                              else 
                                goto MATCH_label_c676;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c673; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c677; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c679;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c678;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c680; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 771 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RORB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c678;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c679;  /*opt-block+*/
                              else 
                                goto MATCH_label_c680;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c677; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c681; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c683;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c682;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c684; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 765 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCLB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c682;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c683;  /*opt-block+*/
                              else 
                                goto MATCH_label_c684;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c681; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c685; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c687;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c686;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c688; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 759 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCRB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c686;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c687;  /*opt-block+*/
                              else 
                                goto MATCH_label_c688;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c685; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c689; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c691;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c690;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c692; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 753 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHLSALB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c690;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c691;  /*opt-block+*/
                              else 
                                goto MATCH_label_c692;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c689; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c693; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c695;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c694;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c696; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 747 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHRB.Eb.CL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c694;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c695;  /*opt-block+*/
                              else 
                                goto MATCH_label_c696;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c693; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c697; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c699;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c698;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c700; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 741 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SARB.Eb.CL", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c698;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c699;  /*opt-block+*/
                              else 
                                goto MATCH_label_c700;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c697; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c701; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c703;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c702;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c704; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 729 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "ROLB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c702;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c703;  /*opt-block+*/
                              else 
                                goto MATCH_label_c704;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c701; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c705; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c707;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c706;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c708; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 717 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RORB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c706;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c707;  /*opt-block+*/
                              else 
                                goto MATCH_label_c708;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c705; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c709; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c711;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c710;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c712; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 705 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCLB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c710;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c711;  /*opt-block+*/
                              else 
                                goto MATCH_label_c712;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c709; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c713; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c715;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c714;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c716; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 693 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "RCRB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c714;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c715;  /*opt-block+*/
                              else 
                                goto MATCH_label_c716;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c713; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c717; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c719;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c718;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c720; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 681 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHLSALB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c718;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c719;  /*opt-block+*/
                              else 
                                goto MATCH_label_c720;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c717; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c721; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c723;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c722;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c724; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 669 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SHRB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c722;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c723;  /*opt-block+*/
                              else 
                                goto MATCH_label_c724;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c721; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        goto MATCH_label_c48; break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c725; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c727;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c726;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c728; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 657 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "SARB.Ev.CLod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c726;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c727;  /*opt-block+*/
                              else 
                                goto MATCH_label_c728;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c725; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 4: case 5: case 6: 
                  goto MATCH_label_c48; break;
                case 7: 
                  nextPC = 1 + MATCH_p; 
                  
#line 320 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "XLATB");

                  

                  
                  
                  
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 14: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1047 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "LOOPNE", dis_Num(relocd - hostPC - 2));

                    

                    
                    
                    
                  }
                  
                  break;
                case 1: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1050 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "LOOPE", dis_Num(relocd-hostPC-2));

                    

                    
                    
                    
                  }
                  
                  break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  { 
                    unsigned relocd = 
                      2 + sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 
                                  8) + addressToPC(MATCH_p);
                    nextPC = 2 + MATCH_p; 
                    
#line 1053 "frontend/machine/pentium/decoder.m"
                    

                            stmts = instantiate(pc,  "LOOP", dis_Num(relocd-hostPC-2));

                    

                    
                    
                    
                  }
                  
                  break;
                case 3: case 4: case 5: case 6: case 7: 
                  goto MATCH_label_c48; break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          case 15: 
            
              switch((MATCH_w_8_0 & 0x7) /* col at 0 */) {
                case 0: case 1: case 4: 
                  goto MATCH_label_c48; break;
                case 2: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c48; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c48;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = getByte(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c48; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_1[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 585 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  name);

                                      

                                      
                                      
                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_2[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 558 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_1[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 567 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = 
                                        MATCH_name_page_3[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 576 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_2[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 549 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c48; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_4[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 582 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_5[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 588 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_6[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 555 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_0[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 564 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_7[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 561 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_4[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 570 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_8[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 573 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_5[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 546 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_9[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 579 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_6[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 552 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 3: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 4 & 0xf) /* row at 8 */) {
                      case 0: case 1: case 2: case 3: case 4: case 5: case 7: 
                      case 8: case 9: case 11: case 12: case 13: case 14: 
                      case 15: 
                        goto MATCH_label_c48; break;
                      case 6: 
                        if ((MATCH_w_8_8 & 0x7) /* col at 8 */ == 6) 
                          if ((MATCH_w_8_8 >> 3 & 0x1) /* page at 8 */ == 1) 
                            goto MATCH_label_c48;  /*opt-block+*/
                          else { 
                            MATCH_w_8_16 = getByte(2 + MATCH_p); 
                            
                              switch((MATCH_w_8_16 & 0x7) /* col at 16 */) {
                                case 0: case 1: case 2: case 4: case 6: 
                                  goto MATCH_label_c48; break;
                                case 3: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10 && 
                                    (MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */ == 1) { 
                                    MATCH_name = 
                                      MATCH_name_page_10[(MATCH_w_8_16 >> 3 & 0x1) 
                                          /* page at 16 */]; 
                                    { 
                                      char *name = MATCH_name;
                                      nextPC = 3 + MATCH_p; 
                                      
#line 540 "frontend/machine/pentium/decoder.m"
                                      

                                              stmts = instantiate(pc,  name);

                                      

                                      
                                      
                                      
                                    }
                                    
                                  } /*opt-block*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  
                                  break;
                                case 5: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.LODSvow"; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 513 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_3[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 522 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  break;
                                case 7: 
                                  if ((MATCH_w_8_16 >> 4 & 0xf) 
                                          /* row at 16 */ == 10) 
                                    if ((MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */ == 1) { 
                                      MATCH_name = "REP.SCASvow"; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 531 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_name = 
                                        MATCH_name_page_10[(MATCH_w_8_16 >> 3 & 0x1) 
                                            /* page at 16 */]; 
                                      { 
                                        char *name = MATCH_name;
                                        nextPC = 3 + MATCH_p; 
                                        
#line 504 "frontend/machine/pentium/decoder.m"
                                        

                                                stmts = instantiate(pc,  name);

                                        

                                        
                                        
                                        
                                      }
                                      
                                    } /*opt-block*/ /*opt-block+*/
                                  else 
                                    goto MATCH_label_c48;  /*opt-block+*/
                                  break;
                                default: assert(0);
                              } /* (MATCH_w_8_16 & 0x7) -- col at 16 --*/ 
                            
                          } /*opt-block*/ 
                        else 
                          goto MATCH_label_c48;  /*opt-block+*/
                        break;
                      case 10: 
                        
                          switch((MATCH_w_8_8 & 0x7) /* col at 8 */) {
                            case 0: case 1: 
                              goto MATCH_label_c48; break;
                            case 2: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = 
                                  MATCH_name_page_13[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 537 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.STOSvod"; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 543 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else 
                                goto MATCH_label_c48;  /*opt-block+*/
                              
                              break;
                            case 4: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.LODSB"; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 510 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_7[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 519 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 5: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.LODSvod"; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 516 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_8[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 525 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 6: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.SCASB"; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 528 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_9[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 501 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            case 7: 
                              if ((MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */ == 1) { 
                                MATCH_name = "REP.SCASvod"; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 534 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_name = 
                                  MATCH_name_page_13[(MATCH_w_8_8 >> 3 & 0x1) 
                                      /* page at 8 */]; 
                                { 
                                  char *name = MATCH_name;
                                  nextPC = 2 + MATCH_p; 
                                  
#line 507 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  name);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 & 0x7) -- col at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 4 & 0xf) -- row at 8 --*/ 
                  
                  break;
                case 5: 
                  nextPC = 1 + MATCH_p; 
                  
#line 1251 "frontend/machine/pentium/decoder.m"
                  

                          stmts = instantiate(pc,  "CMC");

                  

                  
                  
                  
                  
                  break;
                case 6: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    goto MATCH_label_c729; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                      goto MATCH_label_c731; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                      goto MATCH_label_c730; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                    goto MATCH_label_c732; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_32 = getByte(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i8 = 
                                    (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
                                  nextPC = 5 + MATCH_p; 
                                  
#line 386 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_24 = getByte(3 + MATCH_p); 
                                goto MATCH_label_c730; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_8_56 = getByte(7 + MATCH_p); 
                                goto MATCH_label_c731; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_8_48 = getByte(6 + MATCH_p); 
                                goto MATCH_label_c732; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              goto MATCH_label_c729; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c48; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c733; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c735;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c734;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c736; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 911 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "NOTb", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c734;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c735;  /*opt-block+*/
                              else 
                                goto MATCH_label_c736;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c733; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c737; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c739;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c738;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c740; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 920 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "NEGb", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c738;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c739;  /*opt-block+*/
                              else 
                                goto MATCH_label_c740;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c737; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c741; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c743;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c742;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c744; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 929 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "MUL.AL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c742;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c743;  /*opt-block+*/
                              else 
                                goto MATCH_label_c744;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c741; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c745; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c747;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c746;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c748; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1173 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "IMULb", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c746;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c747;  /*opt-block+*/
                              else 
                                goto MATCH_label_c748;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c745; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c749; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c751;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c750;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c752; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1197 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "DIVAL", DIS_EADDR8);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c750;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c751;  /*opt-block+*/
                              else 
                                goto MATCH_label_c752;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c749; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c753; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c755;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c754;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c756; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1182 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "IDIV", DIS_EADDR8); /* ?? */

                                

                                //  | HLT() =>

                                //      stmts = instantiate(pc,  "HLT");

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c754;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c755;  /*opt-block+*/
                              else 
                                goto MATCH_label_c756;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c753; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                case 7: 
                  MATCH_w_8_8 = getByte(1 + MATCH_p); 
                  
                    switch((MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */) {
                      case 0: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                                    goto MATCH_label_c757; 
                                    
                                    break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) { 
                                      MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                      goto MATCH_label_c759; 
                                      
                                    } /*opt-block*/
                                    else { 
                                      MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                      goto MATCH_label_c758; 
                                      
                                    } /*opt-block*/
                                    
                                    break;
                                  case 5: 
                                    MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                    goto MATCH_label_c760; 
                                    
                                    break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_32 = getDword(4 + MATCH_p); 
                                { 
                                  unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                  unsigned i32 = 
                                    MATCH_w_32_32 /* i32 at 32 */;
                                  nextPC = 8 + MATCH_p; 
                                  
#line 380 "frontend/machine/pentium/decoder.m"
                                  

                                          stmts = instantiate(pc,  "TEST.Ed.Id", DIS_EADDR32, DIS_I32);

                                  

                                  
                                  
                                  
                                }
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_24 = getDword(3 + MATCH_p); 
                                goto MATCH_label_c758; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                MATCH_w_32_56 = getDword(7 + MATCH_p); 
                                goto MATCH_label_c759; 
                                
                              } /*opt-block*/
                              else { 
                                MATCH_w_32_48 = getDword(6 + MATCH_p); 
                                goto MATCH_label_c760; 
                                
                              } /*opt-block*/
                              
                              break;
                            case 3: 
                              MATCH_w_32_16 = getDword(2 + MATCH_p); 
                              goto MATCH_label_c757; 
                              
                              break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 1: 
                        goto MATCH_label_c48; break;
                      case 2: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c761; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c763;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c762;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c764; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 905 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "NOTod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c762;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c763;  /*opt-block+*/
                              else 
                                goto MATCH_label_c764;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c761; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 3: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c765; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c767;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c766;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c768; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 914 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "NEGod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c766;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c767;  /*opt-block+*/
                              else 
                                goto MATCH_label_c768;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c765; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 4: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c769; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c771;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c770;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c772; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 923 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "MUL.AXod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c770;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c771;  /*opt-block+*/
                              else 
                                goto MATCH_label_c772;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c769; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 5: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c773; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c775;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c774;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c776; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1167 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "IMULod", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c774;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c775;  /*opt-block+*/
                              else 
                                goto MATCH_label_c776;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c773; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 6: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c777; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c779;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c778;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c780; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1191 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "DIVeAX", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c778;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c779;  /*opt-block+*/
                              else 
                                goto MATCH_label_c780;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c777; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      case 7: 
                        
                          switch((MATCH_w_8_8 >> 6 & 0x3) /* mod at 8 */) {
                            case 0: 
                              
                                switch((MATCH_w_8_8 & 0x7) /* r_m at 8 */) {
                                  case 0: case 1: case 2: case 3: case 6: 
                                  case 7: 
                                    goto MATCH_label_c781; break;
                                  case 4: 
                                    MATCH_w_8_16 = getByte(2 + MATCH_p); 
                                    if ((MATCH_w_8_16 & 0x7) 
                                            /* base at 16 */ == 5 && 
                                      (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ && 
                                      (MATCH_w_8_16 >> 3 & 0x7) 
                                            /* index at 16 */ < 8)) 
                                      goto MATCH_label_c783;  /*opt-block+*/
                                    else 
                                      goto MATCH_label_c782;  /*opt-block+*/
                                    
                                    break;
                                  case 5: 
                                    goto MATCH_label_c784; break;
                                  default: assert(0);
                                } /* (MATCH_w_8_8 & 0x7) -- r_m at 8 --*/ 
                              break;
                            case 1: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) { 
                                unsigned Eaddr = 1 + addressToPC(MATCH_p);
                                nextPC = 4 + MATCH_p; 
                                
#line 1176 "frontend/machine/pentium/decoder.m"
                                

                                        stmts = instantiate(pc,  "IDIVeAX", DIS_EADDR32);

                                

                                
                                
                                
                              } /*opt-block*//*opt-block+*/
                              else 
                                goto MATCH_label_c782;  /*opt-block+*/
                              
                              break;
                            case 2: 
                              MATCH_w_8_16 = getByte(2 + MATCH_p); 
                              if ((MATCH_w_8_8 & 0x7) /* r_m at 8 */ == 4 && 
                                (0 <= (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ && 
                                (MATCH_w_8_16 >> 3 & 0x7) 
                                      /* index at 16 */ < 8)) 
                                goto MATCH_label_c783;  /*opt-block+*/
                              else 
                                goto MATCH_label_c784;  /*opt-block+*/
                              
                              break;
                            case 3: 
                              goto MATCH_label_c781; break;
                            default: assert(0);
                          } /* (MATCH_w_8_8 >> 6 & 0x3) -- mod at 8 --*/ 
                        break;
                      default: assert(0);
                    } /* (MATCH_w_8_8 >> 3 & 0x7) -- reg_opcode at 8 --*/ 
                  
                  break;
                default: assert(0);
              } /* (MATCH_w_8_0 & 0x7) -- col at 0 --*/ 
            break;
          default: assert(0);
        } /* (MATCH_w_8_0 >> 4 & 0xf) -- row at 0 --*/  
    
  }goto MATCH_finished_c; 
  
  MATCH_label_c0: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1538 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1538 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c2: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1538 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c3: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1538 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c4: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1511 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c5: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1511 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c6: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1511 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c7: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1511 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c8: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1466 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c9: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1466 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c10: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1466 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c11: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1466 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c12: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1439 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c13: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1439 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c14: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1439 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c15: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1439 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c16: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1532 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c17: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1532 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c18: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1532 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c19: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1532 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c20: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1499 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c21: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1499 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c22: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1499 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c23: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1499 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c24: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1460 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c25: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1460 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c26: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1460 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c27: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1460 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c28: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1427 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c29: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1427 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c30: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1427 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c31: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1427 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c32: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1526 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c33: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1526 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c34: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1526 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c35: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1526 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c36: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1487 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c37: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1487 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c38: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1487 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c39: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1487 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c40: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1454 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c41: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1454 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c42: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1454 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c43: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1454 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c44: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1415 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c45: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1415 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c46: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1415 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c47: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1415 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c48: (void)0; /*placeholder for label*/ 
    { 
      nextPC = MATCH_p; 
      
#line 2111 "frontend/machine/pentium/decoder.m"
      
              result.valid = false;       // Invalid instruction

              result.rtl = NULL;

              result.numBytes = 0;

              return result;

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c49: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1520 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c50: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1520 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c51: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1520 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c52: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1520 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c53: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1475 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c54: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1475 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c55: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1475 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c56: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1475 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c57: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1448 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c58: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1448 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c59: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1448 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c60: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1448 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c61: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1403 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c62: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1403 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c63: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1403 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c64: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1403 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c65: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1514 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c66: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1514 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c67: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1514 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c68: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1514 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c69: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1508 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c70: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1508 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c71: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1508 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c72: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1508 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c73: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1442 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c74: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1442 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c75: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1442 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c76: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1442 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c77: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1436 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c78: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1436 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c79: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1436 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c80: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1436 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c81: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1080 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.ow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c82: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1080 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.ow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c83: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1080 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.ow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c84: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1080 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.ow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c85: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1044 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c86: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1044 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c87: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1044 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c88: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1044 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c89: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c90: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c91: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c92: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c93: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1311 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c94: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1311 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c95: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1311 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c96: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1311 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c97: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 440 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c98: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 440 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c99: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 440 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c100: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 440 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c101: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 446 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c102: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_40 & 0xff) /* i8 at 40 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 6 + MATCH_p; 
      
#line 446 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c103: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_72 & 0xff) /* i8 at 72 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 10 + MATCH_p; 
      
#line 446 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c104: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 446 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibow", DIS_EADDR16, DIS_REG16, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c105: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 428 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c106: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 428 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c107: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 428 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c108: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 428 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c109: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 434 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c110: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 434 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c111: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 434 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c112: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 434 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c113: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1164 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c114: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1164 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c115: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1164 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c116: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1164 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c117: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1236 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c118: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1236 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c119: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1236 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c120: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1236 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c121: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1341 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c122: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1341 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c123: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1341 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c124: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1341 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c125: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1305 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiow", DIS_I8, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c126: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1305 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiow", DIS_I8, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c127: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1305 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiow", DIS_I8, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c128: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1305 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiow", DIS_I8, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c129: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1317 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c130: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1317 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c131: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1317 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c132: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1317 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c133: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c134: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_40 & 0xff) /* i8 at 40 */, 8);
      nextPC = 6 + MATCH_p; 
      
#line 1329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c135: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_72 & 0xff) /* i8 at 72 */, 8);
      nextPC = 10 + MATCH_p; 
      
#line 1329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c136: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c137: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c138: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c139: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c140: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c141: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1335 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c142: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1335 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c143: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1335 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c144: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1335 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1369 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC-hostPC);

              return result;

      

          // Not "user" instructions:

      //  | BOUNDod(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDod", DIS_REG32, DIS_MEM);

      

      //  | BOUNDow(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDow", DIS_REG16, DIS_MEM);

      

      //    | ARPL(Eaddr, reg ) =>

      //        unused(Eaddr); unused(reg);

      //        stmts = instantiate(pc,  "UNIMP");

      

      //    | AAS() =>

      //        stmts = instantiate(pc,  "AAS");

      

      //    | AAM() =>

      //        stmts = instantiate(pc,  "AAM");

      

      //    | AAD() =>

      //        stmts = instantiate(pc,  "AAD");

      

      //    | AAA() =>

      //        stmts = instantiate(pc,  "AAA");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1369 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC-hostPC);

              return result;

      

          // Not "user" instructions:

      //  | BOUNDod(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDod", DIS_REG32, DIS_MEM);

      

      //  | BOUNDow(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDow", DIS_REG16, DIS_MEM);

      

      //    | ARPL(Eaddr, reg ) =>

      //        unused(Eaddr); unused(reg);

      //        stmts = instantiate(pc,  "UNIMP");

      

      //    | AAS() =>

      //        stmts = instantiate(pc,  "AAS");

      

      //    | AAM() =>

      //        stmts = instantiate(pc,  "AAM");

      

      //    | AAD() =>

      //        stmts = instantiate(pc,  "AAD");

      

      //    | AAA() =>

      //        stmts = instantiate(pc,  "AAA");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1369 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC-hostPC);

              return result;

      

          // Not "user" instructions:

      //  | BOUNDod(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDod", DIS_REG32, DIS_MEM);

      

      //  | BOUNDow(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDow", DIS_REG16, DIS_MEM);

      

      //    | ARPL(Eaddr, reg ) =>

      //        unused(Eaddr); unused(reg);

      //        stmts = instantiate(pc,  "UNIMP");

      

      //    | AAS() =>

      //        stmts = instantiate(pc,  "AAS");

      

      //    | AAM() =>

      //        stmts = instantiate(pc,  "AAM");

      

      //    | AAD() =>

      //        stmts = instantiate(pc,  "AAD");

      

      //    | AAA() =>

      //        stmts = instantiate(pc,  "AAA");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1369 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, -1, 16, opPlus, nextPC-hostPC);

              return result;

      

          // Not "user" instructions:

      //  | BOUNDod(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDod", DIS_REG32, DIS_MEM);

      

      //  | BOUNDow(reg, Mem) =>

      //      stmts = instantiate(pc,  "BOUNDow", DIS_REG16, DIS_MEM);

      

      //    | ARPL(Eaddr, reg ) =>

      //        unused(Eaddr); unused(reg);

      //        stmts = instantiate(pc,  "UNIMP");

      

      //    | AAS() =>

      //        stmts = instantiate(pc,  "AAS");

      

      //    | AAM() =>

      //        stmts = instantiate(pc,  "AAM");

      

      //    | AAD() =>

      //        stmts = instantiate(pc,  "AAD");

      

      //    | AAA() =>

      //        stmts = instantiate(pc,  "AAA");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 1359 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 1359 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 1359 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 1359 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRow", DIS_REG16, DIS_EADDR16);

              genBSFR(pc, DIS_REG16, DIS_EADDR16, 16, 16, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c153: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 938 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c154: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 938 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c155: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 938 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c156: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 938 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c157: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 947 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c158: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 947 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c159: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 947 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c160: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned r16 = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 947 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebow", DIS_R16, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c161: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 350 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c162: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 350 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c163: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 9 + MATCH_p; 
      
#line 350 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c164: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 3 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_24 >> 3 & 0x7) /* reg_opcode at 24 */;
      nextPC = 8 + MATCH_p; 
      
#line 350 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c165: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1502 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c166: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1502 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c167: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1502 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c168: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1502 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c169: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1496 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c170: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1496 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c171: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1496 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c172: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1496 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c173: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1430 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c174: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1430 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c175: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1430 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c176: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1430 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c177: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1424 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c178: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1424 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c179: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1424 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c180: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1424 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c181: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1490 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c182: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1490 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c183: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1490 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c184: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1490 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c185: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1484 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c186: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1484 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c187: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1484 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c188: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1484 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c189: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1418 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c190: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1418 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c191: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1418 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c192: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1418 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c193: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1412 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c194: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1412 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c195: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1412 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c196: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1412 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c197: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1478 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c198: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1478 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c199: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1478 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c200: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1478 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c201: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1472 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c202: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1472 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c203: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1472 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c204: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1472 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c205: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1406 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c206: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1406 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c207: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1406 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c208: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1406 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c209: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1400 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c210: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1400 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c211: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1400 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c212: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1400 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c213: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1152 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c214: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1152 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c215: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 10 + MATCH_p; 
      
#line 1152 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c216: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1152 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivw", DIS_REG16, DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c217: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1158 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c218: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 1158 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c219: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 1158 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c220: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1158 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibow", DIS_REG16, DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c221: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1637 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c222: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1637 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c223: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1637 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c224: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1637 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c225: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1634 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c226: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1634 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c227: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1634 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c228: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1634 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c229: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1631 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c230: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1631 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c231: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1631 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c232: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1631 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c233: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1628 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c234: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1628 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c235: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1628 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c236: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1628 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c237: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1625 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c238: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1625 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c239: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1625 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c240: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1625 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c241: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1622 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c242: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1622 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c243: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1622 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c244: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1622 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c245: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1619 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c246: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1619 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c247: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1619 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c248: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1619 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c249: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 1616 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c250: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 1616 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c251: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 1616 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c252: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 1616 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c253: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1029 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c254: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1029 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c255: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1029 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c256: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1029 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c257: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1589 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c258: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1589 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c259: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1589 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c260: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1589 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c261: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1583 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c262: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1583 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c263: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1583 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c264: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1583 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c265: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1577 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c266: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1577 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c267: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1577 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c268: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1577 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c269: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1571 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c270: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1571 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c271: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1571 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c272: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1571 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c273: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1565 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c274: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1565 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c275: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1565 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c276: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1565 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c277: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1556 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c278: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1556 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c279: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1556 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c280: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1556 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c281: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1550 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c282: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1550 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c283: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1550 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c284: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1550 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c285: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1544 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c286: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1544 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c287: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1544 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c288: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1544 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiowb", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c289: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1020 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c290: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1020 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c291: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1020 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c292: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1020 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmow", DIS_REG16, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c293: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 374 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c294: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 374 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c295: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 374 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c296: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 374 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c297: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1071 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.ow", DIS_REG16, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c298: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1071 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.ow", DIS_REG16, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c299: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1071 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.ow", DIS_REG16, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c300: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c301: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c302: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c303: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvow", DIS_EADDR16, DIS_REG16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c304: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evow", DIS_MEM);

      

      //    | OUTSvod() =>

      //        stmts = instantiate(pc,  "OUTSvod");

      

      //    | OUTSvow() =>

      //        stmts = instantiate(pc,  "OUTSvow");

      

      //    | OUTSB() =>

      //        stmts = instantiate(pc,  "OUTSB");

      

      //    | OUT.DX.eAXod() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXod");

      

      //    | OUT.DX.eAXow() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXow");

      

      //    | OUT.DX.AL() =>

      //        stmts = instantiate(pc,  "OUT.DX.AL");

      

      //    | OUT.Ib.eAXod(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXod", DIS_I8);

      

      //    | OUT.Ib.eAXow(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXow", DIS_I8);

      

      //    | OUT.Ib.AL(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.AL", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c305: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evow", DIS_MEM);

      

      //    | OUTSvod() =>

      //        stmts = instantiate(pc,  "OUTSvod");

      

      //    | OUTSvow() =>

      //        stmts = instantiate(pc,  "OUTSvow");

      

      //    | OUTSB() =>

      //        stmts = instantiate(pc,  "OUTSB");

      

      //    | OUT.DX.eAXod() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXod");

      

      //    | OUT.DX.eAXow() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXow");

      

      //    | OUT.DX.AL() =>

      //        stmts = instantiate(pc,  "OUT.DX.AL");

      

      //    | OUT.Ib.eAXod(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXod", DIS_I8);

      

      //    | OUT.Ib.eAXow(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXow", DIS_I8);

      

      //    | OUT.Ib.AL(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.AL", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c306: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evow", DIS_MEM);

      

      //    | OUTSvod() =>

      //        stmts = instantiate(pc,  "OUTSvod");

      

      //    | OUTSvow() =>

      //        stmts = instantiate(pc,  "OUTSvow");

      

      //    | OUTSB() =>

      //        stmts = instantiate(pc,  "OUTSB");

      

      //    | OUT.DX.eAXod() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXod");

      

      //    | OUT.DX.eAXow() =>

      //        stmts = instantiate(pc,  "OUT.DX.eAXow");

      

      //    | OUT.DX.AL() =>

      //        stmts = instantiate(pc,  "OUT.DX.AL");

      

      //    | OUT.Ib.eAXod(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXod", DIS_I8);

      

      //    | OUT.Ib.eAXow(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.eAXow", DIS_I8);

      

      //    | OUT.Ib.AL(i8) =>

      //        stmts = instantiate(pc,  "OUT.Ib.AL", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c307: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 633 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c308: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 633 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c309: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 633 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c310: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 633 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c311: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 627 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c312: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 627 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c313: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 627 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c314: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 627 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c315: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 621 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c316: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 621 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c317: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 621 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c318: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 621 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c319: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 615 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c320: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 615 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c321: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 615 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c322: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 615 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c323: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 609 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c324: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 609 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c325: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 609 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c326: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 609 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c327: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 603 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c328: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 603 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c329: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 603 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c330: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 603 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c331: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 597 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c332: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 597 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c333: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 597 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c334: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 597 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibow", DIS_EADDR16, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c335: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_24 & 0xffff) /* i16 at 24 */, 16);
      nextPC = 5 + MATCH_p; 
      
#line 978 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c336: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_32 & 0xffff) /* i16 at 32 */, 16);
      nextPC = 6 + MATCH_p; 
      
#line 978 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c337: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_64 & 0xffff) /* i16 at 64 */, 16);
      nextPC = 10 + MATCH_p; 
      
#line 978 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c338: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~32768..32767] */ i16 = 
        sign_extend((MATCH_w_16_56 & 0xffff) /* i16 at 56 */, 16);
      nextPC = 9 + MATCH_p; 
      
#line 978 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ew.Ivow", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c339: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 738 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c340: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 738 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c341: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 738 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c342: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 738 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c343: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 726 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORB.Ev.1owR", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c344: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 726 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORB.Ev.1owR", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c345: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 726 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORB.Ev.1owR", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c346: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 726 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORB.Ev.1owR", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c347: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 714 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c348: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 714 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c349: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 714 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c350: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 714 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c351: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 702 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c352: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 702 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c353: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 702 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c354: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 702 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c355: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 690 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c356: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 690 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c357: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 690 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c358: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 690 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c359: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 678 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c360: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 678 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c361: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 678 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c362: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 678 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c363: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 666 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c364: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 666 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c365: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 666 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c366: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 666 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1ow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c367: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 732 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c368: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 732 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c369: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 732 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c370: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 732 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c371: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 720 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c372: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 720 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c373: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 720 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c374: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 720 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c375: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 708 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c376: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 708 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c377: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 708 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c378: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 708 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c379: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 696 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c380: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 696 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c381: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 696 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c382: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 696 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c383: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 684 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c384: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 684 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c385: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 684 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c386: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 684 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c387: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 672 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c388: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 672 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c389: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 672 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c390: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 672 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c391: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 660 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c392: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 660 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c393: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 660 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c394: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 660 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c395: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_24 & 0xffff) /* i16 at 24 */;
      nextPC = 5 + MATCH_p; 
      
#line 383 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c396: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_32 & 0xffff) /* i16 at 32 */;
      nextPC = 6 + MATCH_p; 
      
#line 383 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c397: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_64 & 0xffff) /* i16 at 64 */;
      nextPC = 10 + MATCH_p; 
      
#line 383 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c398: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned i16 = (MATCH_w_16_56 & 0xffff) /* i16 at 56 */;
      nextPC = 9 + MATCH_p; 
      
#line 383 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ew.Iw", DIS_EADDR16, DIS_I16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c399: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c400: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c401: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c402: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c403: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 917 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c404: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 917 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c405: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 917 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c406: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 917 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c407: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 926 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c408: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 926 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c409: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 926 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c410: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 926 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c411: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1170 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c412: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1170 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c413: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1170 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c414: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1170 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c415: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1194 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c416: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1194 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c417: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1194 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c418: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1194 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c419: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1179 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c420: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1179 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c421: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1179 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c422: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1179 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVAX", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c423: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1125 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c424: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1125 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c425: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1125 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c426: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1125 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c427: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1209 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c428: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1209 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c429: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1209 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c430: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1209 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evow", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c431: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 836 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evow", DIS_EADDR16);

      

      //    | POPFod() =>

      //        stmts = instantiate(pc,  "POPFod");

      

      //    | POPFow() =>

      //        stmts = instantiate(pc,  "POPFow");

      

      //    | POPAod() =>

      //        stmts = instantiate(pc,  "POPAod");

      

      //    | POPAow() =>

      //        stmts = instantiate(pc,  "POPAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c432: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 836 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evow", DIS_EADDR16);

      

      //    | POPFod() =>

      //        stmts = instantiate(pc,  "POPFod");

      

      //    | POPFow() =>

      //        stmts = instantiate(pc,  "POPFow");

      

      //    | POPAod() =>

      //        stmts = instantiate(pc,  "POPAod");

      

      //    | POPAow() =>

      //        stmts = instantiate(pc,  "POPAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c433: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 836 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evow", DIS_EADDR16);

      

      //    | POPFod() =>

      //        stmts = instantiate(pc,  "POPFod");

      

      //    | POPFow() =>

      //        stmts = instantiate(pc,  "POPFow");

      

      //    | POPAod() =>

      //        stmts = instantiate(pc,  "POPAod");

      

      //    | POPAow() =>

      //        stmts = instantiate(pc,  "POPAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c434: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 836 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evow", DIS_EADDR16);

      

      //    | POPFod() =>

      //        stmts = instantiate(pc,  "POPFod");

      

      //    | POPFow() =>

      //        stmts = instantiate(pc,  "POPFow");

      

      //    | POPAod() =>

      //        stmts = instantiate(pc,  "POPAod");

      

      //    | POPAow() =>

      //        stmts = instantiate(pc,  "POPAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c435: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1661 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c436: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1661 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c437: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1661 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c438: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1661 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c439: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1658 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c440: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1658 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c441: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1658 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c442: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1658 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c443: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1655 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c444: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1655 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c445: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1655 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c446: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1655 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c447: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1652 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c448: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1652 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c449: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1652 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c450: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1652 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c451: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1649 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c452: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1649 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c453: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1649 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c454: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1649 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c455: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1646 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c456: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1646 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c457: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1646 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c458: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1646 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c459: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1643 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c460: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1643 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c461: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1643 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c462: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1643 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c463: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1640 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c464: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1640 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c465: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1640 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c466: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1640 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c467: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1613 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c468: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1613 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c469: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1613 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c470: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1613 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c471: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1610 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c472: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1610 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c473: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1610 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c474: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1610 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c475: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1607 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c476: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1607 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c477: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1607 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c478: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1607 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c479: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1604 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c480: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1604 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c481: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1604 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c482: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1604 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c483: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1601 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c484: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1601 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c485: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1601 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c486: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1601 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ANDid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c487: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1598 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c488: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1598 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c489: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1598 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c490: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1598 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c491: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1595 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c492: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1595 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c493: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1595 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c494: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1595 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c495: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 1592 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c496: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 1592 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c497: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 1592 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c498: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 1592 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPid", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c499: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1586 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c500: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1586 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c501: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1586 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c502: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1586 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c503: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1580 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c504: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1580 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c505: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1580 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c506: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1580 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c507: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1574 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c508: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1574 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c509: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1574 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c510: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1574 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ADCiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c511: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1568 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c512: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1568 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c513: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1568 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c514: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1568 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c515: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1559 "frontend/machine/pentium/decoder.m"
      

              // Special hack to ignore and $0xfffffff0, %esp

              Exp* oper = dis_Eaddr(Eaddr, 32);

              if (i8 != -16 || !(*oper == *Location::regOf(28)))

                  stmts = instantiate(pc,  "ANDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c516: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1559 "frontend/machine/pentium/decoder.m"
      

              // Special hack to ignore and $0xfffffff0, %esp

              Exp* oper = dis_Eaddr(Eaddr, 32);

              if (i8 != -16 || !(*oper == *Location::regOf(28)))

                  stmts = instantiate(pc,  "ANDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c517: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1559 "frontend/machine/pentium/decoder.m"
      

              // Special hack to ignore and $0xfffffff0, %esp

              Exp* oper = dis_Eaddr(Eaddr, 32);

              if (i8 != -16 || !(*oper == *Location::regOf(28)))

                  stmts = instantiate(pc,  "ANDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c518: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1559 "frontend/machine/pentium/decoder.m"
      

              // Special hack to ignore and $0xfffffff0, %esp

              Exp* oper = dis_Eaddr(Eaddr, 32);

              if (i8 != -16 || !(*oper == *Location::regOf(28)))

                  stmts = instantiate(pc,  "ANDiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c519: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1553 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c520: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1553 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c521: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1553 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c522: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1553 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c523: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1547 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c524: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1547 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c525: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1547 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c526: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1547 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XORiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c527: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 1541 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c528: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1541 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c529: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1541 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c530: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 1541 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPiodb", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c531: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 377 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c532: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 377 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c533: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 377 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c534: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 377 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c535: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 371 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c536: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 371 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c537: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 371 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c538: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 371 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c539: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c540: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c541: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c542: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 329 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c543: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c544: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c545: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c546: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 323 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c547: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 654 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c548: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 654 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c549: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 654 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c550: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 654 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c551: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 651 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c552: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 651 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c553: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 651 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c554: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 651 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c555: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 648 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c556: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 648 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c557: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 648 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c558: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 648 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c559: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 645 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c560: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 645 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c561: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 645 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c562: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 645 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c563: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 642 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c564: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 642 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c565: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 642 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c566: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 642 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c567: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 639 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c568: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 639 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c569: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 639 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c570: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 639 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c571: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 636 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c572: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 636 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c573: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 636 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c574: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 636 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c575: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 630 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c576: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 630 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c577: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 630 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c578: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 630 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c579: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 624 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c580: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 624 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c581: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 624 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c582: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 624 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c583: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 618 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c584: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 618 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c585: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 618 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c586: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 618 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c587: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 612 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c588: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 612 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c589: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 612 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c590: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 612 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c591: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 606 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c592: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 606 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c593: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 606 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c594: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 606 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c595: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 600 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c596: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 600 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c597: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 600 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c598: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 600 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c599: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 594 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c600: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 594 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c601: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 594 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c602: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 594 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.Ibod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c603: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1062 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LES", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c604: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1062 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LES", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c605: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1062 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LES", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c606: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1074 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LDS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c607: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1074 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LDS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c608: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1074 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LDS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c609: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      nextPC = 3 + MATCH_p; 
      
#line 981 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c610: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 981 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c611: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 981 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c612: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      nextPC = 7 + MATCH_p; 
      
#line 981 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c613: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 975 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c614: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 975 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c615: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 975 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c616: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 975 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOV.Ed.Ivod", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c617: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 780 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.1", DIS_EADDR8);

      

          // There is no SSL for these, so don't call instantiate, it will only

          // cause an assert failure. Also, may as well treat these as invalid instr

      //    | PUSHFod() =>

      //        stmts = instantiate(pc,  "PUSHFod");

      

      //    | PUSHFow() =>

      //        stmts = instantiate(pc,  "PUSHFow");

      

      //    | PUSHAod() =>

      //        stmts = instantiate(pc,  "PUSHAod");

      

      //    | PUSHAow() =>

      //        stmts = instantiate(pc,  "PUSHAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c618: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 780 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.1", DIS_EADDR8);

      

          // There is no SSL for these, so don't call instantiate, it will only

          // cause an assert failure. Also, may as well treat these as invalid instr

      //    | PUSHFod() =>

      //        stmts = instantiate(pc,  "PUSHFod");

      

      //    | PUSHFow() =>

      //        stmts = instantiate(pc,  "PUSHFow");

      

      //    | PUSHAod() =>

      //        stmts = instantiate(pc,  "PUSHAod");

      

      //    | PUSHAow() =>

      //        stmts = instantiate(pc,  "PUSHAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c619: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 780 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.1", DIS_EADDR8);

      

          // There is no SSL for these, so don't call instantiate, it will only

          // cause an assert failure. Also, may as well treat these as invalid instr

      //    | PUSHFod() =>

      //        stmts = instantiate(pc,  "PUSHFod");

      

      //    | PUSHFow() =>

      //        stmts = instantiate(pc,  "PUSHFow");

      

      //    | PUSHAod() =>

      //        stmts = instantiate(pc,  "PUSHAod");

      

      //    | PUSHAow() =>

      //        stmts = instantiate(pc,  "PUSHAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c620: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 780 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.1", DIS_EADDR8);

      

          // There is no SSL for these, so don't call instantiate, it will only

          // cause an assert failure. Also, may as well treat these as invalid instr

      //    | PUSHFod() =>

      //        stmts = instantiate(pc,  "PUSHFod");

      

      //    | PUSHFow() =>

      //        stmts = instantiate(pc,  "PUSHFow");

      

      //    | PUSHAod() =>

      //        stmts = instantiate(pc,  "PUSHAod");

      

      //    | PUSHAow() =>

      //        stmts = instantiate(pc,  "PUSHAow");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c621: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 774 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c622: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 774 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c623: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 774 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c624: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 774 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c625: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 768 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c626: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 768 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c627: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 768 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c628: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 768 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c629: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 762 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c630: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 762 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c631: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 762 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c632: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 762 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c633: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 756 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c634: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 756 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c635: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 756 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c636: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 756 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c637: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 750 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c638: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 750 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c639: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 750 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c640: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 750 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.1", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c641: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 744 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.1", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c642: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 744 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.1", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c643: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 744 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.1", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c644: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 744 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.1", DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c645: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 735 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c646: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 735 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c647: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 735 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c648: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 735 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c649: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 723 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c650: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 723 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c651: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 723 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c652: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 723 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c653: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 711 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c654: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 711 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c655: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 711 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c656: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 711 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c657: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 699 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c658: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 699 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c659: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 699 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c660: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 699 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c661: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 687 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c662: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 687 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c663: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 687 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c664: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 687 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c665: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 675 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c666: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 675 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c667: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 675 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c668: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 675 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c669: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 663 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c670: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 663 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c671: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 663 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c672: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 663 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.1od", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c673: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 777 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c674: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 777 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c675: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 777 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c676: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 777 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c677: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 771 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c678: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 771 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c679: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 771 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c680: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 771 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c681: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 765 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c682: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 765 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c683: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 765 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c684: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 765 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c685: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 759 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c686: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 759 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c687: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 759 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c688: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 759 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c689: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 753 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c690: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 753 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c691: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 753 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c692: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 753 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c693: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 747 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c694: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 747 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c695: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 747 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c696: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 747 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Eb.CL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c697: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 741 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.CL", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c698: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 741 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.CL", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c699: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 741 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.CL", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c700: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 741 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Eb.CL", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c701: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 729 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c702: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 729 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c703: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 729 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c704: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 729 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ROLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c705: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 717 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c706: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 717 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c707: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 717 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c708: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 717 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RORB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c709: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 705 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c710: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 705 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c711: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 705 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c712: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 705 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCLB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c713: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 693 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c714: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 693 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c715: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 693 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c716: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 693 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "RCRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c717: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 681 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c718: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 681 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c719: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 681 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c720: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 681 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLSALB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c721: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 669 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c722: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 669 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c723: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 669 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c724: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 669 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c725: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 657 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c726: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 657 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c727: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 657 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c728: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 657 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SARB.Ev.CLod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c729: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 386 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c730: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      nextPC = 4 + MATCH_p; 
      
#line 386 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c731: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      nextPC = 8 + MATCH_p; 
      
#line 386 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c732: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i8 = (MATCH_w_8_48 & 0xff) /* i8 at 48 */;
      nextPC = 7 + MATCH_p; 
      
#line 386 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Eb.Ib", DIS_EADDR8, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c733: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 911 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c734: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 911 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c735: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 911 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c736: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 911 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c737: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 920 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c738: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 920 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c739: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 920 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c740: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 920 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c741: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 929 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c742: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 929 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c743: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 929 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c744: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 929 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c745: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1173 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c746: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1173 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c747: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1173 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c748: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1173 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c749: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1197 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c750: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1197 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c751: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1197 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c752: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1197 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVAL", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c753: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1182 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIV", DIS_EADDR8); /* ?? */

      

      //  | HLT() =>

      //      stmts = instantiate(pc,  "HLT");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c754: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1182 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIV", DIS_EADDR8); /* ?? */

      

      //  | HLT() =>

      //      stmts = instantiate(pc,  "HLT");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c755: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1182 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIV", DIS_EADDR8); /* ?? */

      

      //  | HLT() =>

      //      stmts = instantiate(pc,  "HLT");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c756: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1182 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIV", DIS_EADDR8); /* ?? */

      

      //  | HLT() =>

      //      stmts = instantiate(pc,  "HLT");

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c757: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      nextPC = 6 + MATCH_p; 
      
#line 380 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ed.Id", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c758: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      nextPC = 7 + MATCH_p; 
      
#line 380 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ed.Id", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c759: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      nextPC = 11 + MATCH_p; 
      
#line 380 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ed.Id", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c760: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      nextPC = 10 + MATCH_p; 
      
#line 380 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "TEST.Ed.Id", DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c761: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c762: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c763: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c764: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NOTod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c765: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 914 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c766: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 914 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c767: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 914 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c768: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 914 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "NEGod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c769: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 923 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c770: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 923 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c771: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 923 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c772: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 923 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MUL.AXod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c773: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1167 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c774: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1167 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c775: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1167 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c776: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1167 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c777: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1191 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c778: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1191 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c779: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1191 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c780: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1191 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c781: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1176 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c782: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1176 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c783: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1176 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c784: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1176 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IDIVeAX", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c785: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1535 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c786: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1535 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c787: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1535 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c788: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1535 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c789: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1505 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c790: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1505 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c791: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1505 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c792: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1505 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c793: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1463 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c794: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1463 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c795: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1463 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c796: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1463 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c797: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1433 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c798: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1433 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c799: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1433 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c800: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1433 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "ORrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c801: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 422 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SLDT", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c802: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 422 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SLDT", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c803: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 422 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SLDT", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c804: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 422 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SLDT", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c805: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 398 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "STR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c806: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 398 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "STR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c807: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 398 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "STR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c808: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1035 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LTR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c809: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1035 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LTR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c810: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1035 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LTR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c811: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1035 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LTR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c812: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 368 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c813: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 368 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c814: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 368 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c815: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 368 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERR", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c816: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 365 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c817: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 365 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c818: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 365 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c819: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 365 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "VERW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c820: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 452 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SGDT", DIS_MEM);

      

          // Sets are now in the high level instructions

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c821: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 452 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SGDT", DIS_MEM);

      

          // Sets are now in the high level instructions

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c822: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 452 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SGDT", DIS_MEM);

      

          // Sets are now in the high level instructions

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c823: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 449 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SIDT", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c824: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 449 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SIDT", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c825: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 449 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SIDT", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c826: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 419 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SMSW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c827: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 419 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SMSW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c828: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 419 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SMSW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c829: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 419 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SMSW", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c830: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1090 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INVLPG", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c831: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1090 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INVLPG", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c832: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1090 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INVLPG", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c833: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1077 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.od", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c834: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1077 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.od", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c835: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1077 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.od", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c836: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1077 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LAR.od", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c837: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1041 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c838: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1041 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c839: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1041 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c840: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1041 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSLod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c841: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 310 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUL)

          //| SETb.NO(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.O(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c842: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 310 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUL)

          //| SETb.NO(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.O(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c843: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 310 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUL)

          //| SETb.NO(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.O(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c844: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 310 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUL)

          //| SETb.NO(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.O(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c845: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 307 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c846: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 307 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c847: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 307 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c848: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 307 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c849: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 304 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c850: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 304 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c851: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 304 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c852: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 304 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c853: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 301 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JNE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c854: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 301 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JNE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c855: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 301 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JNE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c856: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 301 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JNE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c857: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 298 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JULE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c858: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 298 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JULE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c859: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 298 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JULE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c860: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 298 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JULE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c861: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 295 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c862: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 295 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c863: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 295 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c864: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 295 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JUG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c865: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 292 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JMI)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c866: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 292 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JMI)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c867: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 292 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JMI)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c868: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 292 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JMI)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c869: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 289 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JPOS)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c870: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 289 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JPOS)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c871: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 289 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JPOS)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c872: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 289 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JPOS)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c873: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 280 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSL)

          //| SETb.NP(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.P(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c874: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 280 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSL)

          //| SETb.NP(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.P(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c875: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 280 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSL)

          //| SETb.NP(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.P(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c876: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 280 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSL)

          //| SETb.NP(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

          //| SETb.P(Eaddr) [name] =>

          //  stmts = instantiate(pc, name, DIS_EADDR8);

          //  SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c877: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 277 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c878: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 277 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c879: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 277 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c880: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 277 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSGE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c881: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 274 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSLE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c882: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 274 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSLE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c883: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 274 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSLE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c884: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 274 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSLE)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c885: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 271 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c886: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 271 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c887: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 271 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c888: (void)0; /*placeholder for label*/ 
    { 
      char *name = MATCH_name;
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 271 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc, name, DIS_EADDR8);

              SETS(name, DIS_EADDR8, BRANCH_JSG)

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c889: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1344 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c890: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1344 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c891: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1344 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c892: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1344 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c893: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1308 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c894: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1308 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c895: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1308 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c896: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1308 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c897: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 437 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c898: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 437 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c899: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 437 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c900: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 437 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c901: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_24 & 0xff) /* i8 at 24 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 443 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c902: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_32 & 0xff) /* i8 at 32 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 5 + MATCH_p; 
      
#line 443 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c903: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_64 & 0xff) /* i8 at 64 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 9 + MATCH_p; 
      
#line 443 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c904: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned count = (MATCH_w_8_56 & 0xff) /* i8 at 56 */;
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 443 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.Ibod", DIS_EADDR32, DIS_REG32, DIS_COUNT);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c905: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 425 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c906: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 425 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c907: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 425 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c908: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 425 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHLD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c909: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 431 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c910: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 431 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c911: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 431 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c912: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 431 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SHRD.CLod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c913: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1161 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c914: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1161 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c915: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1161 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c916: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1161 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMULrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c917: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1239 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c918: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1239 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c919: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1239 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c920: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1239 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c921: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1233 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c922: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1233 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c923: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1233 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c924: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1233 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c925: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1038 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c926: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1038 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c927: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1038 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LSS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c928: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1320 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c929: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1320 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c930: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1320 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c931: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1320 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c932: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1059 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LFS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c933: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1059 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LFS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c934: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1059 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LFS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c935: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1056 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LGS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c936: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1056 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LGS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c937: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1056 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LGS", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c938: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 935 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c939: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 935 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c940: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 935 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c941: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 935 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c942: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 932 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c943: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 932 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c944: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 932 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c945: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 932 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVZX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c946: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1338 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c947: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1338 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c948: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1338 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c949: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1338 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c950: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1302 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiod", DIS_I8, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c951: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1302 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiod", DIS_I8, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c952: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1302 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiod", DIS_I8, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c953: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1302 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTSiod", DIS_I8, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c954: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1314 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c955: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1314 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c956: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1314 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c957: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1314 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTRiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c958: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      nextPC = 4 + MATCH_p; 
      
#line 1326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c959: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_32 & 0xff) /* i8 at 32 */, 8);
      nextPC = 5 + MATCH_p; 
      
#line 1326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c960: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_64 & 0xff) /* i8 at 64 */, 8);
      nextPC = 9 + MATCH_p; 
      
#line 1326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c961: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      nextPC = 8 + MATCH_p; 
      
#line 1326 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCiod", DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c962: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1332 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c963: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1332 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c964: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1332 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c965: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1332 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "BTCod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c966: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1364 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFod", DIS_REG32, DIS_EADDR32);

              genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c967: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1364 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFod", DIS_REG32, DIS_EADDR32);

              genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c968: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1364 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFod", DIS_REG32, DIS_EADDR32);

              genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c969: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1364 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSFod", DIS_REG32, DIS_EADDR32);

              genBSFR(pc, DIS_REG32, DIS_EADDR32, -1, 32, opPlus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c970: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 1353 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRod", DIS_REG32, DIS_EADDR32);

              // Bit Scan Forward: need helper function

              genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c971: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 1353 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRod", DIS_REG32, DIS_EADDR32);

              // Bit Scan Forward: need helper function

              genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c972: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 1353 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRod", DIS_REG32, DIS_EADDR32);

              // Bit Scan Forward: need helper function

              genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c973: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 1353 "frontend/machine/pentium/decoder.m"
      

              //stmts = instantiate(pc,  "BSRod", DIS_REG32, DIS_EADDR32);

              // Bit Scan Forward: need helper function

              genBSFR(pc, DIS_REG32, DIS_EADDR32, 32, 32, opMinus, nextPC-hostPC);

              return result;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c974: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 944 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c975: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 944 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c976: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 944 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c977: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 944 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ebod", DIS_R32, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c978: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 941 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c979: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 941 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c980: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 941 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c981: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned r32 = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 941 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVSX.Gv.Ew", DIS_R32, DIS_EADDR16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c982: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 353 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c983: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 353 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c984: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 353 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c985: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 353 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Eb.Gb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c986: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 3 + MATCH_p; 
      
#line 347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c987: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 4 + MATCH_p; 
      
#line 347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c988: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 8 + MATCH_p; 
      
#line 347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c989: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 2 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_16 >> 3 & 0x7) /* reg_opcode at 16 */;
      nextPC = 7 + MATCH_p; 
      
#line 347 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "XADD.Ev.Gvod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c990: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 4 + MATCH_p; 
      
#line 1230 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG8B", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c991: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 8 + MATCH_p; 
      
#line 1230 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG8B", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c992: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 2 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1230 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPXCHG8B", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c993: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1529 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c994: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1529 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c995: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1529 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c996: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1529 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c997: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1493 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c998: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1493 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c999: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1493 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1000: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1493 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1001: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1457 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1002: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1457 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1003: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1457 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1004: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1457 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1005: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1421 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1006: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1421 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1007: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1421 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1008: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1421 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SBBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1009: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1523 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1010: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1523 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1011: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1523 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1012: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1523 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1013: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1481 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1014: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1481 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1015: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1481 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1016: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1481 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1017: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1451 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1018: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1451 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1019: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1451 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1020: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1451 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1021: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1409 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1022: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1409 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1023: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1409 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1024: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1409 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "SUBrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1025: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1517 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1026: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1517 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1027: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1517 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1028: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1517 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrb", DIS_EADDR8, DIS_R8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1029: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1469 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1030: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1469 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1031: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1469 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1032: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1469 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1033: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1445 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1034: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1445 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1035: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1445 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1036: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned r8 = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1445 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmb", DIS_R8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1037: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1397 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1038: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1397 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1039: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1397 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1040: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1397 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "CMPrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1041: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_16 /* i32 at 16 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1149 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1042: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_24 /* i32 at 24 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1149 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1043: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_56 /* i32 at 56 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 11 + MATCH_p; 
      
#line 1149 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1044: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned i32 = MATCH_w_32_48 /* i32 at 48 */;
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 10 + MATCH_p; 
      
#line 1149 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ivd", DIS_REG32, DIS_EADDR32, DIS_I32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1045: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1155 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1046: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_24 & 0xff) /* i8 at 24 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 4 + MATCH_p; 
      
#line 1155 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1047: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_56 & 0xff) /* i8 at 56 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 8 + MATCH_p; 
      
#line 1155 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1048: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      int /* [~128..127] */ i8 = 
        sign_extend((MATCH_w_8_48 & 0xff) /* i8 at 48 */, 8);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1155 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "IMUL.Ibod", DIS_REG32, DIS_EADDR32, DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1049: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1032 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1050: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1032 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1051: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1032 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1052: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1032 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrb", DIS_EADDR8, DIS_REG8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1053: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1026 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1054: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1026 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1055: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1026 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1056: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1026 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVmrod", DIS_EADDR32, DIS_REG32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1057: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1023 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmb", DIS_REG8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1058: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1023 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmb", DIS_REG8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1059: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1023 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmb", DIS_REG8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1060: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1023 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmb", DIS_REG8, DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1061: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 2 + MATCH_p; 
      
#line 1017 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1062: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1017 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1063: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1017 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1064: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1017 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "MOVrmod", DIS_REG32, DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1065: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 3 + MATCH_p; 
      
#line 1068 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.od", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1066: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 7 + MATCH_p; 
      
#line 1068 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.od", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1067: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      unsigned reg = (MATCH_w_8_8 >> 3 & 0x7) /* reg_opcode at 8 */;
      nextPC = 6 + MATCH_p; 
      
#line 1068 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "LEA.od", DIS_REG32, DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1068: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 872 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evod", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1069: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 872 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evod", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1070: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 872 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "POP.Evod", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1071: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1752 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1072: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1752 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1073: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1752 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1074: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1946 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1075: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1946 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1076: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1946 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1077: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1785 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1078: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1785 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1079: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1785 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1080: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1797 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1081: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1797 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1082: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1797 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1083: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2036 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1084: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2036 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1085: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2036 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1086: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2057 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1087: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2057 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1088: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2057 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1089: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1830 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1090: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1830 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1091: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1830 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1092: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1851 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1093: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1851 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1094: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1851 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1095: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1902 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1096: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1902 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1097: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1902 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1098: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2003 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1099: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2003 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1100: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2003 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1101: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2009 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1102: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2009 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1103: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2009 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1104: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1943 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1105: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1943 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1106: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1943 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1107: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1940 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1108: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1940 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1109: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1940 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLDCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1110: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2027 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1111: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2027 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1112: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2027 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTENV", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1113: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2024 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1114: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2024 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1115: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2024 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTCW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1116: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1767 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1117: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1767 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1118: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1767 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1119: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1961 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1120: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1961 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1121: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1961 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1122: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1791 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1123: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1791 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1124: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1791 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1125: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1809 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1126: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1809 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1127: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1809 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1128: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2048 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1129: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2048 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1130: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2048 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1131: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2069 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1132: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2069 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1133: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2069 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1134: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1845 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1135: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1845 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1136: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1845 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1137: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1863 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1138: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1863 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1139: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1863 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1140: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1878 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1141: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1878 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1142: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1878 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1143: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1890 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1144: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1890 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1145: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1890 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1146: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1896 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1147: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1896 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1148: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem32 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1896 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI32", DIS_MEM32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1149: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD80", DIS_MEM80);

      

      /* This is a bit tricky. The FPUSH logically comes between the read of STi and

      # the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.

      # This problem only happens with this load instruction, so there is a work

      # around here that gives us the SSL a value of i that is one more than in

      # the instruction */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1150: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD80", DIS_MEM80);

      

      /* This is a bit tricky. The FPUSH logically comes between the read of STi and

      # the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.

      # This problem only happens with this load instruction, so there is a work

      # around here that gives us the SSL a value of i that is one more than in

      # the instruction */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1151: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1908 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD80", DIS_MEM80);

      

      /* This is a bit tricky. The FPUSH logically comes between the read of STi and

      # the write to ST0. In particular, FLD ST0 is supposed to duplicate the TOS.

      # This problem only happens with this load instruction, so there is a work

      # around here that gives us the SSL a value of i that is one more than in

      # the instruction */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1152: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2015 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP80", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1153: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2015 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP80", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1154: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2015 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP80", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1155: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1755 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1156: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1755 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1157: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1755 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FADD.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1158: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1949 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1159: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1949 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1160: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1949 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FMUL.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1161: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1788 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1162: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1788 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1163: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1788 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOM.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1164: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1800 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1165: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1800 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1166: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1800 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FCOMP.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1167: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2039 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1168: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2039 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1169: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2039 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUB.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1170: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2060 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1171: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2060 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1172: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2060 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSUBR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1173: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1174: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1175: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIV.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1176: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1854 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1177: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1854 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1178: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1854 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FDIVR.R64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1179: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1180: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1181: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1905 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FLD.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1182: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2006 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1183: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2006 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1184: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2006 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FST.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1185: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2012 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1186: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2012 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1187: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2012 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTP.lsR64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1188: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1985 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FRSTOR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1189: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1985 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FRSTOR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1190: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1985 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FRSTOR", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1191: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1988 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FNSAVE", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1192: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1988 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FNSAVE", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1193: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1988 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FNSAVE", DIS_MEM);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1194: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2030 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTSW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1195: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2030 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTSW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1196: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2030 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FSTSW", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1197: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1770 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1198: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1770 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1199: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1770 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIADD.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1200: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1964 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1201: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1964 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1202: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1964 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIMUL.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1203: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1794 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1204: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1794 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1205: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1794 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOM.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1206: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1812 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1207: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1812 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1208: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1812 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FICOMP.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1209: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2051 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1210: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2051 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1211: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2051 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUB.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1212: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 2072 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1213: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 2072 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1214: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 2072 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISUBR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1215: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1848 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1216: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1848 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1217: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1848 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIV.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1218: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1866 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1219: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1866 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1220: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1866 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIDIVR.I16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1221: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1222: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1223: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1875 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1224: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1887 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1225: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1887 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1226: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1887 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FIST.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1227: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1893 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1228: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1893 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1229: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem16 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1893 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP.lsI16", DIS_MEM16);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1230: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1773 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBLD", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1231: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1773 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBLD", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1232: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1773 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBLD", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1233: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1881 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1234: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1881 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1235: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1881 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FILD.lsI64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1236: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1776 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBSTP", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1237: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1776 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBSTP", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1238: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem80 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1776 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FBSTP", DIS_MEM80);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1239: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1899 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1240: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1899 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1241: (void)0; /*placeholder for label*/ 
    { 
      unsigned Mem64 = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1899 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "FISTP64", DIS_MEM64);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1242: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1128 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Eb", DIS_EADDR8);

      

      //    | IN.eAX.DXod() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXod");

      

      //    | IN.eAX.DXow() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXow");

      

      //    | IN.AL.DX() =>

      //        stmts = instantiate(pc,  "IN.AL.DX");

      

      //    | IN.eAX.Ibod(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibod", DIS_I8);

      

      //    | IN.eAX.Ibow(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibow", DIS_I8);

      

      //    | IN.AL.Ib(i8) =>

      //        stmts = instantiate(pc,  "IN.AL.Ib", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1243: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1128 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Eb", DIS_EADDR8);

      

      //    | IN.eAX.DXod() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXod");

      

      //    | IN.eAX.DXow() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXow");

      

      //    | IN.AL.DX() =>

      //        stmts = instantiate(pc,  "IN.AL.DX");

      

      //    | IN.eAX.Ibod(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibod", DIS_I8);

      

      //    | IN.eAX.Ibow(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibow", DIS_I8);

      

      //    | IN.AL.Ib(i8) =>

      //        stmts = instantiate(pc,  "IN.AL.Ib", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1244: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1128 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Eb", DIS_EADDR8);

      

      //    | IN.eAX.DXod() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXod");

      

      //    | IN.eAX.DXow() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXow");

      

      //    | IN.AL.DX() =>

      //        stmts = instantiate(pc,  "IN.AL.DX");

      

      //    | IN.eAX.Ibod(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibod", DIS_I8);

      

      //    | IN.eAX.Ibow(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibow", DIS_I8);

      

      //    | IN.AL.Ib(i8) =>

      //        stmts = instantiate(pc,  "IN.AL.Ib", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1245: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1128 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Eb", DIS_EADDR8);

      

      //    | IN.eAX.DXod() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXod");

      

      //    | IN.eAX.DXow() =>

      //        stmts = instantiate(pc,  "IN.eAX.DXow");

      

      //    | IN.AL.DX() =>

      //        stmts = instantiate(pc,  "IN.AL.DX");

      

      //    | IN.eAX.Ibod(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibod", DIS_I8);

      

      //    | IN.eAX.Ibow(i8) =>

      //        stmts = instantiate(pc,  "IN.eAX.Ibow", DIS_I8);

      

      //    | IN.AL.Ib(i8) =>

      //        stmts = instantiate(pc,  "IN.AL.Ib", DIS_I8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1246: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1212 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Eb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1247: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1212 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Eb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1248: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1212 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Eb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1249: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1212 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Eb", DIS_EADDR8);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1250: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1122 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1251: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1122 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1252: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1122 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1253: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1122 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "INC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1254: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 1206 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1255: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 1206 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1256: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 1206 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1257: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 1206 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "DEC.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1258: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 120 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register call

               */

              // Mike: there should probably be a HLNwayCall class for this!

              stmts = instantiate(pc,  "CALL.Evod", DIS_EADDR32);

              CallStatement* newCall = new CallStatement;

              // Record the fact that this is a computed call

              newCall->setIsComputed();

              // Set the destination expression

              newCall->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newCall);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1259: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 120 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register call

               */

              // Mike: there should probably be a HLNwayCall class for this!

              stmts = instantiate(pc,  "CALL.Evod", DIS_EADDR32);

              CallStatement* newCall = new CallStatement;

              // Record the fact that this is a computed call

              newCall->setIsComputed();

              // Set the destination expression

              newCall->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newCall);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1260: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 120 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register call

               */

              // Mike: there should probably be a HLNwayCall class for this!

              stmts = instantiate(pc,  "CALL.Evod", DIS_EADDR32);

              CallStatement* newCall = new CallStatement;

              // Record the fact that this is a computed call

              newCall->setIsComputed();

              // Set the destination expression

              newCall->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newCall);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1261: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 120 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register call

               */

              // Mike: there should probably be a HLNwayCall class for this!

              stmts = instantiate(pc,  "CALL.Evod", DIS_EADDR32);

              CallStatement* newCall = new CallStatement;

              // Record the fact that this is a computed call

              newCall->setIsComputed();

              // Set the destination expression

              newCall->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newCall);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1262: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 136 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register jump

               */

              CaseStatement* newJump = new CaseStatement;

              // Record the fact that this is a computed call

              newJump->setIsComputed();

              // Set the destination expression

              newJump->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newJump);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

          

          /*

           * Unconditional branches

           */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1263: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 136 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register jump

               */

              CaseStatement* newJump = new CaseStatement;

              // Record the fact that this is a computed call

              newJump->setIsComputed();

              // Set the destination expression

              newJump->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newJump);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

          

          /*

           * Unconditional branches

           */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1264: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 136 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register jump

               */

              CaseStatement* newJump = new CaseStatement;

              // Record the fact that this is a computed call

              newJump->setIsComputed();

              // Set the destination expression

              newJump->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newJump);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

          

          /*

           * Unconditional branches

           */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1265: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 136 "frontend/machine/pentium/decoder.m"
      

              /*

               * Register jump

               */

              CaseStatement* newJump = new CaseStatement;

              // Record the fact that this is a computed call

              newJump->setIsComputed();

              // Set the destination expression

              newJump->setDest(DIS_EADDR32);

              result.rtl = new RTL(pc, stmts);

              result.rtl->appendStmt(newJump);

              // Only one instruction, so size of result is size of this decode

              //result.numBytes = nextPC - hostPC;

          

          /*

           * Unconditional branches

           */

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1266: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 2 + MATCH_p; 
      
#line 833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1267: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 3 + MATCH_p; 
      
#line 833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1268: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 7 + MATCH_p; 
      
#line 833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_label_c1269: (void)0; /*placeholder for label*/ 
    { 
      unsigned Eaddr = 1 + addressToPC(MATCH_p);
      nextPC = 6 + MATCH_p; 
      
#line 833 "frontend/machine/pentium/decoder.m"
      

              stmts = instantiate(pc,  "PUSH.Evod", DIS_EADDR32);

      

      
      
      
    } 
    goto MATCH_finished_c; 
    
  MATCH_finished_c: (void)0; /*placeholder for label*/
  
}

#line 2117 "frontend/machine/pentium/decoder.m"

    if (result.rtl == 0)
        result.rtl = new RTL(pc, stmts);
    result.numBytes = nextPC - hostPC;
    return result;
}

/*==============================================================================
 * These are machine specific functions used to decode instruction
 * operands into Exp*s.
 *============================================================================*/

/*==============================================================================
 * FUNCTION:        dis_Mem
 * OVERVIEW:        Converts a dynamic address to a Exp* expression.
 *                  E.g. [1000] --> m[, 1000
 * PARAMETERS:      pc - the address of the Eaddr part of the instr
 *                  expr - the expression that will be built
 * RETURNS:         the Exp* representation of the given Eaddr
 *============================================================================*/
Exp* PentiumDecoder::dis_Mem(ADDRESS pc)
{
    Exp* expr = NULL;



#line 2140 "frontend/machine/pentium/decoder.m"
{ 
  dword MATCH_p = 
    
#line 2140 "frontend/machine/pentium/decoder.m"
    pc
    ;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  unsigned MATCH_w_32_8;
  unsigned /* [0..255] */ MATCH_w_8_16;
  unsigned MATCH_w_32_16;
  { 
    MATCH_w_8_0 = getByte(MATCH_p); 
    
      switch((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */) {
        case 0: 
          
            switch((MATCH_w_8_0 & 0x7) /* r_m at 0 */) {
              case 0: case 1: case 2: case 3: case 6: case 7: 
                { 
                  unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
                  
#line 2193 "frontend/machine/pentium/decoder.m"
                   

                              // m[ r[base] ]

                              expr = Location::memOf(dis_Reg(24+base));

                  
                  
                  
                }
                
                break;
              case 4: 
                MATCH_w_8_8 = getByte(1 + MATCH_p); 
                if ((MATCH_w_8_8 & 0x7) /* base at 8 */ == 5) 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      
#line 2203 "frontend/machine/pentium/decoder.m"
                      

                                  // [d] (Same as Abs32 using SIB)

                                  expr = Location::memOf(new Const(d));

                      
                      
                      
                    }
                    
                  } /*opt-block*/
                  else { 
                    MATCH_w_32_16 = getDword(2 + MATCH_p); 
                    { 
                      unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                      unsigned index = 
                        (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                      unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                      
#line 2196 "frontend/machine/pentium/decoder.m"
                      

                                  // m[ r[index] * ss + d ]

                                  expr = Location::memOf(new Binary(opPlus,

                                          new Binary(opMult,

                                              dis_Reg(24+index),

                                              new Const(1<<ss)),

                                          new Const(d)));

                      
                      
                      
                    }
                    
                  } /*opt-block*/ /*opt-block+*/
                else 
                  if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    
#line 2162 "frontend/machine/pentium/decoder.m"
                    

                                // m[ r[base] ]

                                expr = Location::memOf(dis_Reg(24+base));

                    
                    
                    
                  } /*opt-block*//*opt-block+*/
                  else { 
                    unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                    unsigned index = 
                      (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                    unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                    
#line 2155 "frontend/machine/pentium/decoder.m"
                    

                                // m[ r[base] + r[index] * ss]

                                expr = Location::memOf(new Binary(opPlus,

                                        dis_Reg(24+base),

                                        new Binary(opMult,

                                            dis_Reg(24+index),

                                            new Const(1<<ss))));

                    
                    
                    
                  } /*opt-block*//*opt-block+*/ /*opt-block+*/
                
                break;
              case 5: 
                MATCH_w_32_8 = getDword(1 + MATCH_p); 
                { 
                  unsigned a = MATCH_w_32_8 /* i32 at 8 */;
                  
#line 2142 "frontend/machine/pentium/decoder.m"
                  

                              // [a]

                              expr = Location::memOf(new Const(a));

                  
                  
                  
                }
                
                break;
              default: assert(0);
            } /* (MATCH_w_8_0 & 0x7) -- r_m at 0 --*/ 
          break;
        case 1: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = getByte(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_8_16 = getByte(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = (MATCH_w_8_16 & 0xff) /* i8 at 16 */;
                
#line 2188 "frontend/machine/pentium/decoder.m"
                

                            // m[ r[ base] + d ]

                            expr = Location::memOf(new Binary(opPlus,

                                    dis_Reg(24+base),

                                    new Const(d)));

                
                
                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_8_16 = getByte(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                int /* [~128..127] */ d = 
                  sign_extend((MATCH_w_8_16 & 0xff) /* i8 at 16 */, 8);
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2179 "frontend/machine/pentium/decoder.m"
                

                            // m[ r[ base ] + r[ index ] * ss + d ]

                            expr = Location::memOf(new Binary(opPlus,

                                    dis_Reg(24+base),

                                    new Binary(opPlus,

                                        new Binary(opMult,

                                            dis_Reg(24+index),

                                            new Const(1<<ss)),

                                        new Const(d))));

                
                
                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_8_8 = getByte(1 + MATCH_p); 
            { 
              int /* [~128..127] */ d = 
                sign_extend((MATCH_w_8_8 & 0xff) /* i8 at 8 */, 8);
              unsigned r32 = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              
#line 2150 "frontend/machine/pentium/decoder.m"
               

                          // m[ r[ r32] + d]

                          expr = Location::memOf(new Binary(opPlus,

                                  dis_Reg(24+r32),

                                  new Const(d)));

              
              
              
            }
            
          } /*opt-block*/
          break;
        case 2: 
          if ((MATCH_w_8_0 & 0x7) /* r_m at 0 */ == 4) { 
            MATCH_w_8_8 = getByte(1 + MATCH_p); 
            if ((MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */ == 4) { 
              MATCH_w_32_16 = getDword(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                
#line 2174 "frontend/machine/pentium/decoder.m"
                

                            // m[ r[ base] + d ]

                            expr = Location::memOf(new Binary(opPlus,

                                    dis_Reg(24+base),

                                    new Const(d)));

                
                
                
              }
              
            } /*opt-block*/
            else { 
              MATCH_w_32_16 = getDword(2 + MATCH_p); 
              { 
                unsigned base = (MATCH_w_8_8 & 0x7) /* base at 8 */;
                unsigned d = MATCH_w_32_16 /* i32 at 16 */;
                unsigned index = (MATCH_w_8_8 >> 3 & 0x7) /* index at 8 */;
                unsigned ss = (MATCH_w_8_8 >> 6 & 0x3) /* ss at 8 */;
                
#line 2165 "frontend/machine/pentium/decoder.m"
                

                            // m[ r[ base ] + r[ index ] * ss + d ]

                            expr = Location::memOf(new Binary(opPlus,

                                    dis_Reg(24+base),

                                    new Binary(opPlus,

                                        new Binary(opMult,

                                            dis_Reg(24+index),

                                            new Const(1<<ss)),

                                        new Const(d))));

                
                
                
              }
              
            } /*opt-block*/
            
          } /*opt-block*/
          else { 
            MATCH_w_32_8 = getDword(1 + MATCH_p); 
            { 
              unsigned base = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
              unsigned d = MATCH_w_32_8 /* i32 at 8 */;
              
#line 2145 "frontend/machine/pentium/decoder.m"
               

                          // m[ r[ base] + d]

                          expr = Location::memOf(new Binary(opPlus,

                                  dis_Reg(24+base),

                                  new Const(d)));

              
              
              
            }
            
          } /*opt-block*/
          break;
        case 3: 
          assert(0);  /* no match */break;
        default: assert(0);
      } /* (MATCH_w_8_0 >> 6 & 0x3) -- mod at 0 --*/ 
    
  }goto MATCH_finished_b; 
  
  MATCH_finished_b: (void)0; /*placeholder for label*/
  
}

#line 2207 "frontend/machine/pentium/decoder.m"
    return expr;
}

/*==============================================================================
 * FUNCTION:        dis_Eaddr
 * OVERVIEW:        Converts a dynamic address to a Exp* expression.
 *                  E.g. %ecx --> r[ 25 ]
 * CALLED FROM:     Macros DIS_EADDR32, DIS_EADDR16 and DIS_EADDR8
 * PARAMETERS:      pc - the instruction stream address of the dynamic
 *                    address
 *                  size - size of the operand (important if a register)
 * RETURNS:         the Exp* representation of the given Eaddr
 *============================================================================*/
Exp* PentiumDecoder::dis_Eaddr(ADDRESS pc, int size)
{


#line 2221 "frontend/machine/pentium/decoder.m"
{ 
  dword MATCH_p = 
    
#line 2221 "frontend/machine/pentium/decoder.m"
    pc
    ;
  unsigned /* [0..255] */ MATCH_w_8_0;
  unsigned /* [0..255] */ MATCH_w_8_8;
  { 
    MATCH_w_8_0 = getByte(MATCH_p); 
    if ((MATCH_w_8_0 >> 6 & 0x3) /* mod at 0 */ == 3) { 
      unsigned reg = (MATCH_w_8_0 & 0x7) /* r_m at 0 */;
      
#line 2225 "frontend/machine/pentium/decoder.m"
      

              Exp* e;

              switch(size) {

                  case  8: e = dis_Reg(8+reg); break;

                  case 16: e = dis_Reg(0+reg); break;

                  default:

                  case 32: e = dis_Reg(24+reg); break;

              }

              return e;

      
      
      
    } /*opt-block*//*opt-block+*/
    else 
      goto MATCH_label_a0;  /*opt-block+*/
    
  }goto MATCH_finished_a; 
  
  MATCH_label_a0: (void)0; /*placeholder for label*/ 
    { 
      unsigned mem = addressToPC(MATCH_p);
      
#line 2222 "frontend/machine/pentium/decoder.m"
      

              return dis_Mem (mem);

      
      
      
    } 
    goto MATCH_finished_a; 
    
  MATCH_finished_a: (void)0; /*placeholder for label*/
  
}

#line 2235 "frontend/machine/pentium/decoder.m"
}

/*==============================================================================
 * FUNCTION:      isFuncPrologue()
 * OVERVIEW:      Check to see if the instructions at the given offset match
 *                  any callee prologue, i.e. does it look like this offset
 *                  is a pointer to a function?
 * PARAMETERS:    hostPC - pointer to the code in question (native address)
 * RETURNS:       True if a match found
 *============================================================================*/
bool PentiumDecoder::isFuncPrologue(ADDRESS hostPC)
{
#if 0
    int locals, regs;
    if ((InstructionPatterns::frameless_pro(prog.csrSrc, hostPC, locals, regs))
        != NULL)
            return true;
    if ((InstructionPatterns::struct_ptr(prog.csrSrc, hostPC, locals, regs))
        != NULL)
            return true;
    if ((InstructionPatterns::std_entry(prog.csrSrc, hostPC, locals, regs))
        != NULL)
            return true;
#endif
    return false;
}


/**********************************
 * These are the fetch routines.
 **********************************/   

/*==============================================================================
 * FUNCTION:        getWord
 * OVERVIEW:        Returns the word starting at the given address.
 * PARAMETERS:      lc - address at which to decode the double
 * RETURNS:         the decoded double
 *============================================================================*/
Byte PentiumDecoder::getByte (unsigned lc)
/* getByte - returns next byte from image pointed to by lc.  */
{
    return *(Byte *)lc;
}

/*==============================================================================
 * FUNCTION:        getWord
 * OVERVIEW:        Returns the word starting at the given address.
 * PARAMETERS:      lc - address at which to decode the double
 * RETURNS:         the decoded double
 *============================================================================*/
SWord PentiumDecoder::getWord (unsigned lc)
/* get2Bytes - returns next 2-Byte from image pointed to by lc.  */
{
    return (SWord)(*(Byte *)lc + (*(Byte *)(lc+1) << 8));
}

/*==============================================================================
 * FUNCTION:        getDword
 * OVERVIEW:        Returns the double starting at the given address.
 * PARAMETERS:      lc - address at which to decode the double
 * RETURNS:         the decoded double
 *============================================================================*/
DWord PentiumDecoder::getDword (unsigned lc)
/* get4Bytes - returns the next 4-Byte word from image pointed to by lc. */
{
    return (DWord)(*(Byte *)lc + (*(Byte *)(lc+1) << 8) +
        (*(Byte *)(lc+2) << 16) + (*(Byte *)(lc+3) << 24));
}


/*==============================================================================
 * FUNCTION:       PentiumDecoder::PentiumDecoder
 * OVERVIEW:       Constructor. The code won't work without this (not sure why
 *                  the default constructor won't do...)
 * PARAMETERS:     None
 * RETURNS:        N/A
 *============================================================================*/
PentiumDecoder::PentiumDecoder() : NJMCDecoder()
{
  std::string file = Boomerang::get()->getProgPath() + "frontend/machine/pentium/pentium.ssl";
  RTLDict.readSSLFile(file.c_str());
}

// For now...
int PentiumDecoder::decodeAssemblyInstruction(unsigned, int)
{ return 0; }

/*==============================================================================
 * FUNCTION:       genBSFR
 * OVERVIEW:       Generate statements for the BSF and BSR series
 *                 (Bit Scan Forward/Reverse)
 * PARAMETERS:     pc: native PC address (start of the BSF/BSR instruction)
 *                 reg: an expression for the destination register
 *                 modrm: an expression for the operand being scanned
 *                 init: initial value for the dest register
 *                 size: sizeof(modrm) (in bits)
 *                 incdec: either opPlus for Forward scans, or opMinus for
 *                  Reverse scans
 *                 numBytes: number of bytes this instruction
 * RETURNS:        true if have to exit early (not in last state)
 *============================================================================*/
static int BSFRstate = 0;       // State number for this state machine
void genBSFR(ADDRESS pc, Exp* dest, Exp* modrm, int init, int size,
  OPER incdec, int numBytes) {
    // Note the horrible hack needed here. We need initialisation code, and
    // an extra branch, so the %SKIP/%RPT won't work.
    // We need to emit 6 statements, but these need to be in 3 RTLs, since the
    // destination of a branch has to be to the start of an RTL.
    // So we use a state machine, and set numBytes to 0 for the first two
    // times. That way, this instruction ends up emitting three RTLs, each
    // with the semantics we need.
    // Note: we don't use pentium.SSL for these.
    // BSFR1:
    //  pc+0:   zf := 1
    //  pc+0:   branch exit condition modrm = 0
    // BSFR2:
    //  pc+1:   zf := 0
    //  pc+1:   dest := init
    // BSFR3:
    //  pc+2: dest := dest op 1
    //  pc+2: branch pc+2 condition modrm@[dest:dest]=0
    // exit:

    std::list<Statement*>* stmts = new std::list<Statement*>;
    Statement* s;
    BranchStatement* b;
    switch (BSFRstate) {
        case 0:
            s = new Assign(
                new IntegerType(1),
                new Terminal(opZF),
                new Const(1));
            stmts->push_back(s);
            b = new BranchStatement;
            b->setDest(pc+numBytes);
            b->setCondType(BRANCH_JE);
            b->setCondExpr(
                new Binary(opEquals,
                    modrm->clone(),
                    new Const(0)));
            stmts->push_back(b);
            break;
        case 1:
            s = new Assign(
                new IntegerType(1),
                new Terminal(opZF),
                new Const(0));
            stmts->push_back(s);
            s = new Assign(
                new IntegerType(size),
                dest->clone(),
                new Const(init));
            stmts->push_back(s);
            break;
        case 2:
            s = new Assign(
                new IntegerType(size),
                dest->clone(),
                new Binary(incdec,
                    dest->clone(),
                    new Const(1)));
            stmts->push_back(s);
            b = new BranchStatement;
            b->setDest(pc+2);
            b->setCondType(BRANCH_JE);
            b->setCondExpr(
                new Binary(opEquals,
                    new Ternary(opAt,
                        modrm->clone(),
                        dest->clone(),
                        dest->clone()),
                    new Const(0)));
            stmts->push_back(b);
            break;
        default:
            // Should never happen
            assert(BSFRstate - BSFRstate);
    }
    result.rtl = new RTL(pc + BSFRstate, stmts);
    // Keep numBytes == 0 until the last state, so we re-decode this
    // instruction 3 times
    if (BSFRstate != 3-1) {
        // Let the number of bytes be 1. This is important at least for setting
        // the fallthrough address for the branch (in the first RTL), which
        // should point to the next RTL
        result.numBytes = 1;
        result.reDecode = true;     // Decode this instuction again
    } else {
        result.numBytes = numBytes;
        result.reDecode = false;
    }
    if (DEBUG_DECODER)
        std::cout << std::hex << pc+BSFRstate << std::dec << ": " <<
        "BS" << (init == -1 ? "F" : "R") << (size==32 ? ".od" : ".ow") <<
        BSFRstate+1 << "\n";
    if (++BSFRstate == 3)
        BSFRstate = 0;      // Ready for next time
        
}


