#
# Copyright (C) 2004, The University of Queensland
#
# See the file "LICENSE.TERMS" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL
# WARRANTIES.
#

# File: ppc.ssl
# Desc: This file contains a semantic description of the PPC processor.

# --------------------------------------------------------------------------
# PPC RTL
# --------------------------------------------------------------------------
 

MAX_BYTE    := 2**8  - 1;    # a byte of all 1's
MAX32BIT    := 2**32 - 1;    # a word of all 1's
MAXSIGN32   := 2**31 - 1;    # all bits except sign bit are set
SIGN_32_NEG := -2**31;
WORD        := 4;            # size of word in bytes (for now)

ENDIANNESS BIG;

# register mapping
# normal registers have a mapping to a Cardinal
# special register maps to -1

INTEGER
[ %g0 , %g1 , %g2 , %g3 , %g4 , %g5 , %g6 , %g7,
  %g8 , %g9 , %g10, %g11, %g12, %g13, %g14, %g15,
  %g16, %g17, %g18, %g19, %g20, %g21, %g22, %g23,
  %g24, %g25, %g26, %g27, %g28, %g29, %g30, %g31 ][32] -> 0..31,
  [%CR0, %CR1, %CR2, %CR3, %CR4, %CR5, %CR6, %CR7] [32] -> 64; 		#condition registers (contains %CR0 to %CR7)

FLOAT
[ %f0 , %f1 , %f2 , %f3 , %f4 , %f5 , %f6 , %f7,
  %f8 , %f9 , %f10, %f11, %f12, %f13, %f14, %f15,
  %f16, %f17, %f18, %f19, %f20, %f21, %f22, %f23,
  %f24, %f25, %f26, %f27, %f28, %f29, %f30, %f31 ][64] -> 32..63;

INTEGER
[ %pc][32] -> -1, # control regs
[ %XERSO, %XEROV, %XERCA] [1] -> -1,   #XER flags mapped out, most likely wrong but leave till figure out right way
[ %LR, %CTR, %XER] [32] -> -1;   #link register, counter register


SETXER(value) {
	*32* %XER := value
	*1* %XERCA := %XER@[29:29]
	*1* %XEROV := %XER@[30:30]
	*1* %XERSO := %XER@[31:31]
};

SETFLAGS0(rd) {
   *1* %CR0@[3:3] := %XERSO
   *1* %CR0@[2:2] := [rd = 0?1:0]
   *1* %CR0@[1:1] := [rd > 0?1:0]
   *1* %CR0@[0:0] := [rd < 0?1:0]
};

SETFLAGSTO(crfd, mask) {
   *32* crfd = 0 => %CR0 = mask
   *32* crfd = 1 => %CR1 = mask
   *32* crfd = 2 => %CR2 = mask
   *32* crfd = 3 => %CR3 = mask
   *32* crfd = 4 => %CR4 = mask
   *32* crfd = 5 => %CR5 = mask
   *32* crfd = 6 => %CR6 = mask
   *32* crfd = 7 => %CR7 = mask
};


#Arithmetic operations

ADD			 rd, ra, rb						*32* rd := ra + rb;

ADDq		 rd, ra, rb						*32* rd := ra + rb
			 	 	 						SETFLAGS0(rd);

ADDE		 rd, ra, rb						*32* rd := ra + rb + %XERCA;

ADDEq		 rd, ra, rb						*32* rd := ra + rb + %XERCA
			 	 	 						SETFLAGS0(rd);

ADDI		 rd, rs, simm					*32* rd := rs + simm;

ADDIS		 rd, rs, simm					*32* rd := rs + (simm << 16);

ADDME		 rd, ra	 						*32* rd := ra + %XERCA - 1;
			 	 							
ADDMEq		 rd, ra	 						*32* rd := ra + %XERCA - 1
			 	 							SETFLAGS0(rd);

ADDZE		 rd, ra							*32* rd:= ra + %XERCA;

ADDZEq		 rd, ra							*32* rd:= ra + %XERCA
			 	 							SETFLAGS0(rd);

DIVW	 	 rd, ra, rb						*32* rd := ra / rb;

DIVWq	 	 rd, ra, rb						*32* rd := ra / rb
			 	 	 						SETFLAGS0(rd);

DIVWU	 	 rd, ra, rb						*32* rd := ra / rb;

DIVWUq	 	 rd, ra, rb						*32* rd := ra / rb
			 	 	 						SETFLAGS0(rd);

MULLI		rd, ra, simm					*32* rd := rs * sgnex(16,32,simm);

MULLW	 	 rd, ra, rb						*32* rd := ra * rb;

MULLWq	 	 rd, ra, rb						*32* rd := ra * rb
			 	 	 						SETFLAGS0(rd);

SUBF	 	 rd, ra, rb						*32* rd := rb - ra;

SUBFE	 	 rd, ra, rb						*32* rd := rb + %XERCA - ra;

NOP											_;


#Logical ops

NEG			 rd, ra							*32* rd := 0 - ra;

NEGq		 rd, ra							*32* rd := 0 - ra
			 	 							SETFLAGS0(rd);

# Note: the "andq" instruction comes out as "AND"^"Rc" or "ANDRc" here. However, "andiq" comes out as "ANDI"
LOGDOT	:= {"ANDRc",	"ORRc",		"XORRc"};			# Logicals that set flags as well
LOG		:= {"AND",		"OR",		"XOR",	LOGDOT};	# All logicals with uncomplemented operands
LOGI	:= {"ANDI",		"ORI",		"XORI"};			# Immediate with dot
LOGIS	:= {"ANDIS",	"ORIS",		"XORIS"};			# Immediate with operand B shifted left 16 bits, and dot
NLOGDOT	:= {"NANDRc",	"NORRc",	"EQVRc"};			# Negated logicals that set flags
														# Note: NXOR is called EQV
NLOG	:= {"NAND",		"NOR",		"EQV", NLOGDOT};	# All negated logicals
LOGOP	:= {  "&","|", "^",	"&", "|", "^"};
LOGC	:= {"ANDC",	"ORC", "ANDCRc","ORCRc"};			# Note: no XORCR
LOGCOP	:= {  "&",	 "|",	 "&",	  "|"};
LOGCDOT	:= {"ANDCRc","ORCRc"};							# Note: no XORCRq


LOG[IDX]		rd, ra, rb				*32* rd := ra LOGOP[IDX] rb;
LOGDOT[IDX]		rd, ra, rb				SETFLAGS0(rd);

LOGI[IDX]		rd, rs, uimm			*32* rd := rs LOGOP[IDX] uimm
										SETFLAGS0(rd);				# All immediates set flags

LOGIS[IDX]		rd, rs, uimm			*32* rd := rs LOGOP[IDX] (uimm << 16)
										SETFLAGS0(rd);				# All immediates set flags

NLOG[IDX]		rd, ra, rb				*32* rd := ~(ra LOGOP[IDX] rb);
NLOGDOT[IDX]	rd, ra, rb				SETFLAGS0(rd);

LOGC[IDX]		rd, ra, rb				*32* rd := ra LOGCOP[IDX] (~rb);
LOGCDOT[IDX]	rd, ra, rb				SETFLAGS0(rd);




#Memory access

STWU	rs, d, ra						*32* m[ra + d] := rs
										*32* ra := ra + d;

STW		rs, d, ra						*32* m[ra + d] := rs;

LWZ		rd, eaddr						*32* rd := m[eaddr];

LWZX	rd, eaddr						*32* rd := m[eaddr];

# Multi word store

STMW	rs, d, ra, s					*32* tmp := 0
                                        *32* s <=  0 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  0 => tmp := tmp + 1
                                        *32* s <=  1 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  1 => tmp := tmp + 1
                                        *32* s <=  2 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  2 => tmp := tmp + 1
                                        *32* s <=  3 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  3 => tmp := tmp + 1
                                        *32* s <=  4 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  4 => tmp := tmp + 1
                                        *32* s <=  5 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  5 => tmp := tmp + 1
                                        *32* s <=  6 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  6 => tmp := tmp + 1
                                        *32* s <=  7 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  7 => tmp := tmp + 1
                                        *32* s <=  8 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  8 => tmp := tmp + 1
                                        *32* s <=  9 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <=  9 => tmp := tmp + 1
                                        *32* s <= 10 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 10 => tmp := tmp + 1
                                        *32* s <= 11 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 11 => tmp := tmp + 1
                                        *32* s <= 12 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 12 => tmp := tmp + 1
                                        *32* s <= 13 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 13 => tmp := tmp + 1
                                        *32* s <= 14 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 14 => tmp := tmp + 1
                                        *32* s <= 15 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 15 => tmp := tmp + 1
                                        *32* s <= 16 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 16 => tmp := tmp + 1
                                        *32* s <= 17 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 17 => tmp := tmp + 1
                                        *32* s <= 18 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 18 => tmp := tmp + 1
                                        *32* s <= 19 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 19 => tmp := tmp + 1
                                        *32* s <= 20 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 20 => tmp := tmp + 1
                                        *32* s <= 21 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 21 => tmp := tmp + 1
                                        *32* s <= 22 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 22 => tmp := tmp + 1
                                        *32* s <= 23 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 23 => tmp := tmp + 1
                                        *32* s <= 24 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 24 => tmp := tmp + 1
                                        *32* s <= 25 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 25 => tmp := tmp + 1
                                        *32* s <= 26 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 26 => tmp := tmp + 1
                                        *32* s <= 27 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 27 => tmp := tmp + 1
                                        *32* s <= 28 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 28 => tmp := tmp + 1
                                        *32* s <= 29 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 29 => tmp := tmp + 1
                                        *32* s <= 30 => m[ra + d + (tmp*4)] := r[s + tmp]
                                        *32* s <= 30 => tmp := tmp + 1
                                        *32* s <= 31 => m[ra + d + (tmp*4)] := r[s + tmp];

BCLR   	   								*32* %pc := %LR;

MFSPR	rd, spr							*32* rd := [spr & 1 ? [spr >> 3 & 1 ? %CTR : %XER] : %LR];

MTLR	rs  							*32* %LR := rs;

MTXER 	rs								SETXER(rs);

MTCTR	rs								*32* %CTR := rs;

BL		reloc 							*32* %LR := %pc + 4 
										*32* %pc := reloc;

# Comparisons. Ignore XER[SO] for now.

CMPS := {	"CMPI",	"CMPLI",	"CMP",	"CMPL"};

# Note: must use op1 and op2 for parameters, not ra and simm/uimm/rb, so CMPS has the same named parameters
CMPI		crfd, op1, op2				*32* tmp_c := [op1 < sgnex(16,32,op2)?8:[op1 > sgnex(16,32,op2)?4:2]];

CMPLI		crfd, op1, op2				*32* tmp_c := [op1 <u zfill(16,32,op2)?8:[op1 >u zfill(16,32,op2)?4:2]];

CMP			crfd, op1, op2				*32* tmp_c := [op1 < op2?8:[op1 > op2?4:2]];

CMPL		crfd, op1, op2				*32* tmp_c := [op1 <u op2?8:[op1 >u op2?4:2]];

CMPS[IDX]	crfd, op1, op2				SETFLAGSTO(crfd, tmp_c);

#condition register manipulation

CRLOG	:= {"CRAND",	"CROR",		"CRXOR"};
CRNLOG	:= {"CRNAND",	"CRNOR",	"CREQV"};			# Note: CRNXOR called CREQV
CRLOGC	:= {"CRANDC",	"CRORC"};						# Note: no CRXORC
CR_OP	:= {  "&",		  "|",        "^"};

CRLOG[IDX]	d, a, b			*1* d :=   a CR_OP[IDX]  b;
CRNLOG[IDX]	d, a, b			*1* d := ~(a CR_OP[IDX]  b);
CRLOGC[IDX]	d, a, b			*1* d :=   a CR_OP[IDX] (~b);

# conditional branch


# MVE: Not sure if I have the bit numbers round the right way (is LT 3 or 0?)
CONDBR := { "%CR0@[3:3]",	"~%CR0@[2:2]",	"%CR0@[1:1]",	"~%CR0@[3:3]",
			"%CR0@[2:2]",	"~%CR0@[3:3]",	"~%CR0@[1:1]",	"~%CR0@[2:2]",
			"%CR0@[0:0]",	"~%CR0@[0:0]",	"%CR0@[0:0]",	"~%CR0@[0:0]"};
BRCONDS := { "blt", "ble", "beq", "bge", "bgt", "bnl", "bne", "bng", "bso", "bns", "bun", "bnu"};

BRCONDS[IDX]   BIcr, reloc 
            *32* %pc := [(CONDBR[IDX] = 1)?%pc + reloc:%pc];

