#define YY_CHAR char
#line 1 "//usr/local/lib/flexskel.cc"
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: /home/emmerik/boomerang-repository/boomerang/c/ansi-c-scanner.cpp,v 1.41 2004-04-27 06:05:49 emmerik Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#line 1 "ansi-c.l"
#define INITIAL 0
/*==============================================================================
 * FILE:       ansi-c.l
 * OVERVIEW:   Scanner for ANSI C.
 *============================================================================*/
/*
 * $Revision: 1.41 $
 * 10 Apr 02 - Trent: Created
 */
#define YY_AnsiCScanner_FLEX_SCANNER
/* ALlow ? and @ in identifiers, so we can use mangled names */
#include "ansi-c-scanner.h"
#line 55 "ansi-c.l"
#line 196 "//usr/local/lib/flexskel.cc"

#define yy___stderr YY_AnsiCScanner_ERRFILE
#define yy___text YY_AnsiCScanner_TEXT
#define yy___leng YY_AnsiCScanner_LENG
#define yy___in YY_AnsiCScanner_IN
#define yy___out YY_AnsiCScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_AnsiCScanner_INIT_BUFFER( YY_AnsiCScanner_CURRENT_BUFFER, yy___in ); \
		YY_AnsiCScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_AnsiCScanner_DEBUG != 0
#define yy___flex_debug YY_AnsiCScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_AnsiCScanner_ECHO
#define yy___input YY_AnsiCScanner_INPUT
#define yy___fatal_error YY_AnsiCScanner_FATAL_ERROR
#define yy___wrap YY_AnsiCScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_AnsiCScanner_IFILE  *yy_input_file;

    YY_AnsiCScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_AnsiCScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_AnsiCScanner_DEBUG != 0
int YY_AnsiCScanner_DEBUG_FLAG=YY_AnsiCScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_AnsiCScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_AnsiCScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_AnsiCScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_AnsiCScanner_CHAR *yy___text;
int yy___leng;

YY_AnsiCScanner_IFILE  *yy___in = (YY_AnsiCScanner_IFILE  *) 0;
YY_AnsiCScanner_OFILE *yy___out = (YY_AnsiCScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_AnsiCScanner_CHAR *yy_c_buf_p = (YY_AnsiCScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_AnsiCScanner_CHAR c, YY_AnsiCScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_AnsiCScanner_ECHO_NOCODE
void YY_AnsiCScanner_CLASS::yy___echo()
{YY_AnsiCScanner_ECHO_CODE
}
#endif
#ifndef YY_AnsiCScanner_INPUT_NOCODE
int  YY_AnsiCScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_AnsiCScanner_INPUT_CODE
}
#endif
#ifndef YY_AnsiCScanner_FATAL_ERROR_NOCODE
void YY_AnsiCScanner_CLASS::yy___fatal_error(char *msg)
{YY_AnsiCScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_AnsiCScanner_WRAP_NOCODE
int  YY_AnsiCScanner_CLASS::yy___wrap()
{YY_AnsiCScanner_WRAP_CODE
}
#endif
void YY_AnsiCScanner_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_AnsiCScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_AnsiCScanner_DEBUG != 0
 YY_AnsiCScanner_DEBUG_FLAG=YY_AnsiCScanner_DEBUG_INIT;
#endif
}

YY_AnsiCScanner_CLASS::YY_AnsiCScanner_CLASS(YY_AnsiCScanner_CONSTRUCTOR_PARAM) YY_AnsiCScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_AnsiCScanner_CONSTRUCTOR_CODE;
}
YY_AnsiCScanner_CLASS::~YY_AnsiCScanner_CLASS() 
{YY_AnsiCScanner_DESTRUCTOR_CODE;
 if(YY_AnsiCScanner_CURRENT_BUFFER)
  YY_AnsiCScanner_DELETE_BUFFER(YY_AnsiCScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 110
typedef int yy_state_type;
static const short int yy_accept[340] =
    {   0,
        0,    0,  110,  108,  107,  107,   95,  108,  101,   94,
      108,   89,   90,   99,   98,   86,   97,   93,  100,   55,
       55,   87,   83,  102,   88,  103,   52,   52,   52,   52,
       91,   92,  104,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       84,  105,   85,   96,  108,   82,    0,   60,    0,   68,
       77,   69,    0,    0,   66,   74,   64,   75,   65,   76,
        0,   58,    7,   67,   59,   54,    0,   55,    0,   55,
       73,   79,   81,   80,   72,   52,    0,    0,   52,   70,
       52,   52,   52,   52,   52,   52,   52,   15,   52,   52,

       52,   52,   52,   52,   23,   52,   52,   51,   50,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   71,   78,
        0,    0,    0,    0,   56,   61,    0,   58,   58,    0,
       59,   54,    0,   57,   53,   63,   62,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   21,   52,   24,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,    0,    0,    3,    0,    0,    0,
       58,    0,   58,    0,   59,   57,   53,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,    8,   52,   10,

       11,   52,   52,   52,   52,   17,   18,   52,   52,   22,
       25,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   47,   52,   52,    0,    0,    0,    0,    0,
        0,   58,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,    9,   12,   52,   52,   52,   52,   20,   52,
       52,   28,   52,   52,   52,   52,   52,   52,   45,   52,
       52,   49,    0,    0,    0,    0,    6,   38,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   16,
       19,   52,   27,   29,   30,   41,   42,   43,   52,   52,
       52,    0,    5,    4,    0,   33,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   14,   52,   44,   52,   52,
        2,    0,   36,   52,   52,   34,   52,   40,   52,   52,
       13,   26,   46,   48,    1,   52,   52,   35,   52,   52,
       52,   31,   37,   52,   52,   52,   32,   39,    0
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   27,   27,   27,   28,   29,
       26,   26,   26,   26,   26,   30,   26,   26,   26,   31,
       26,   32,   26,   26,   33,   26,   26,   34,   26,   26,
       35,   36,   37,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   26,   49,   50,   51,   52,
       53,   54,   26,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    4,    4,    3,    3,    3,    4,
        4,    4,    4,    4,    1,    1,    1,    1,    4,    3,
        3,    3,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1
    } ;

static const short int yy_base[344] =
    {   0,
        0,  464,  469,  471,  471,  471,  445,   63,  444,   61,
      430,  471,  471,  442,   57,  471,   58,   56,   64,   84,
       77,  471,  471,   55,  441,   62,    0,    0,   74,  431,
      471,  471,  439,  422,  402,  404,   51,   44,   40,   56,
      405,   63,  404,  421,   76,   76,  393,  402,  400,  405,
      471,   48,  471,  471,   82,  471,  111,  471,  448,  471,
      471,  471,  110,  128,  471,  471,  471,  471,  471,  471,
      434,  120,  471,  471,  133,  138,  140,  139,    0,  157,
      426,  471,  471,  471,  425,    0,  124,  411,  418,  471,
      152,  388,  400,  387,  402,  389,  395,  381,  382,  379,

      379,  382,  379,  376,    0,  375,  379,  471,  471,  134,
      377,  121,  155,  381,  374,  155,   93,  379,  471,  471,
      382,  373,  129,  376,  471,  471,  201,  471,  199,  217,
      471,  192,  174,  222,  204,  471,  471,  394,  155,  370,
      368,  380,   32,  372,  370,  364,  376,  371,  359,  167,
      373,  371,  367,  359,  365,  368,    0,  354,    0,  360,
      357,  346,  348,  350,  357,  343,  341,  341,  353,  343,
      347,  351,  353,  342,  346,  347,  346,  346,  335,  220,
      228,  246,  471,  237,  250,  471,  233,  358,  341,  328,
      341,  339,  325,  337,  328,  330,  320,    0,  327,    0,

        0,  318,  326,  315,  322,    0,    0,  316,  313,    0,
        0,  313,  313,  310,  322,  312,  316,  321,  320,  318,
      308,  313,    0,  301,  313,  308,  307,  310,  303,  308,
      252,  256,  319,  308,  292,  295,  303,  304,  303,  289,
      287,  295,    0,    0,  289,  290,  295,  286,    0,  280,
      284,    0,  292,  289,  291,  275,  284,  286,    0,  277,
      280,    0,  275,  281,  280,  266,  471,    0,  273,  269,
      270,  278,  279,  278,  273,  270,  249,  246,  246,    0,
        0,  258,    0,    0,    0,    0,    0,    0,  254,  254,
      247,  252,  471,  471,  251,    0,  242,  238,  237,  239,

      238,  242,  244,  225,  237,    0,  222,    0,  233,  216,
      471,  209,    0,  198,  202,    0,  183,    0,  181,  186,
        0,    0,    0,    0,  471,  177,  161,    0,  152,  157,
      129,    0,    0,  130,  100,  130,    0,  471,  471,  306,
      310,  312,  119
    } ;

static const short int yy_def[344] =
    {   0,
      339,    1,  339,  339,  339,  339,  339,  340,  339,  339,
      341,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  342,  342,  342,  342,
      339,  339,  339,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      339,  339,  339,  339,  339,  339,  340,  339,  340,  339,
      339,  339,  341,  341,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  343,  339,
      339,  339,  339,  339,  339,  342,  340,  341,  342,  339,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  339,  339,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  343,  339,  339,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  339,  339,  339,  339,  339,
      339,  339,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  339,  339,  339,  339,  339,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  339,  339,  339,  339,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      339,  339,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  339,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  339,    0,  339,
      339,  339,  339
    } ;

static const short int yy_nxt[539] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   28,   28,   28,   29,
       30,   28,   28,   28,   31,    4,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   28,   42,   28,   43,
       44,   28,   28,   28,   45,   46,   47,   48,   49,   50,
       28,   28,   28,   51,   52,   53,   54,   58,   61,   66,
      119,   71,   68,   72,   72,   73,   81,   82,   87,   67,
       69,   70,   88,   62,   84,   85,   74,   97,  194,   99,
       94,  100,   75,  195,   80,   80,   98,   95,   59,   75,

      101,   76,   76,   96,   77,  102,   78,  105,  103,   78,
      109,   77,  120,   78,  106,   58,   78,   79,  125,  110,
       77,  135,  111,  112,  121,  122,   78,   77,   58,  123,
      339,  124,  113,   78,   78,  114,   63,   72,   72,  338,
      172,   78,  173,  337,   79,   64,   59,  127,  128,  128,
      129,  129,  133,   75,  133,   76,   76,  134,  134,   59,
      130,  131,  131,  127,  128,   77,  164,  132,   78,  128,
      132,   78,   75,  177,   80,   80,  130,  131,  336,  161,
      178,   77,  131,  165,   77,  335,   78,  132,   78,   78,
      162,  134,  134,  139,  166,  132,   78,  189,  334,  140,

       77,  333,  170,  141,  332,  142,   78,  143,  144,  167,
      171,  145,  190,  180,   78,  180,  129,  129,  181,  181,
      331,  132,  202,  203,  132,  330,  182,  183,  183,  184,
      329,  184,  328,  187,  185,  185,  187,  181,  181,  134,
      134,  132,  182,  183,  327,  181,  181,  326,  183,  132,
      186,  186,  325,  187,  185,  185,  128,  128,  231,  324,
      231,  187,  187,  232,  232,  187,  186,  185,  185,  232,
      232,  186,  128,  232,  232,  323,  322,  128,  131,  131,
      321,  320,  187,  319,  183,  183,  318,  317,  316,  315,
      187,  314,  313,  312,  131,  311,  310,  309,  308,  131,

      183,  307,  306,  305,  304,  183,   57,   57,   57,   57,
       63,  303,   63,   63,   86,   86,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  271,  270,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,

      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  201,  200,  199,  198,  197,  196,  193,
      192,  191,  188,  179,  176,  175,  174,  169,  168,  163,
      160,  159,  158,  157,  156,  155,  154,  153,  152,  151,
      150,  149,  148,  147,  146,  138,   64,  137,  136,  126,
      339,  118,  117,  116,  115,  108,  107,  104,   93,   92,
       91,   90,   89,   83,   65,   64,   60,   56,  339,   55,
        3,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339
    } ;

static const short int yy_chk[539] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,   10,   15,
       52,   18,   17,   18,   18,   19,   24,   24,   29,   15,
       17,   17,   29,   10,   26,   26,   19,   38,  143,   39,
       37,   39,   21,  143,   21,   21,   38,   37,    8,   20,

       39,   20,   20,   37,   21,   40,   21,   42,   40,   21,
       45,   20,   52,   20,   42,   57,   20,   20,   63,   45,
       21,  343,   46,   46,   55,   55,   21,   20,   87,   55,
       64,   55,   46,   20,   21,   46,   64,   72,   72,  336,
      117,   20,  117,  335,   20,   63,   57,   72,   72,   72,
       75,   75,   77,   76,   77,   76,   76,   77,   77,   87,
       75,   75,   75,   72,   72,   76,  112,   76,   78,   72,
       76,   78,   80,  123,   80,   80,   75,   75,  334,  110,
      123,   76,   75,  112,   80,  331,   80,   76,   78,   80,
      110,  133,  133,   91,  113,   76,   78,  139,  330,   91,

       80,  329,  116,   91,  327,   91,   80,   91,   91,  113,
      116,   91,  139,  127,   80,  127,  129,  129,  127,  127,
      326,  132,  150,  150,  132,  320,  129,  129,  129,  130,
      319,  130,  317,  135,  130,  130,  135,  180,  180,  134,
      134,  132,  129,  129,  315,  181,  181,  314,  129,  132,
      134,  134,  312,  135,  184,  184,  181,  181,  182,  310,
      182,  135,  187,  182,  182,  187,  134,  185,  185,  231,
      231,  134,  181,  232,  232,  309,  307,  181,  185,  185,
      305,  304,  187,  303,  232,  232,  302,  301,  300,  299,
      187,  298,  297,  295,  185,  292,  291,  290,  289,  185,

      232,  282,  279,  278,  277,  232,  340,  340,  340,  340,
      341,  276,  341,  341,  342,  342,  275,  274,  273,  272,
      271,  270,  269,  266,  265,  264,  263,  261,  260,  258,
      257,  256,  255,  254,  253,  251,  250,  248,  247,  246,
      245,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  230,  229,  228,  227,  226,  225,  224,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  209,
      208,  205,  204,  203,  202,  199,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  179,  178,  177,  176,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  166,

      165,  164,  163,  162,  161,  160,  158,  156,  155,  154,
      153,  152,  151,  149,  148,  147,  146,  145,  144,  142,
      141,  140,  138,  124,  122,  121,  118,  115,  114,  111,
      107,  106,  104,  103,  102,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   92,   89,   88,   85,   81,   71,
       59,   50,   49,   48,   47,   44,   43,   41,   36,   35,
       34,   33,   30,   25,   14,   11,    9,    7,    3,    2,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_AnsiCScanner_DEBUG != 0
static const short int yy_rule_linenum[109] =
    {   0,
       57,   58,   59,   60,   61,   62,   64,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  111,  113,  114,  115,  116,  118,  119,  120,  122,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,

      164,  165,  166,  167,  168,  169,  171,  172
    } ;

#endif
/* the intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 376 "//usr/local/lib/flexskel.cc"
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_AnsiCScanner_LEX_DEFINED
YY_AnsiCScanner_LEX_RETURN YY_AnsiCScanner_LEX ( YY_AnsiCScanner_LEX_PARAM )
YY_AnsiCScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_AnsiCScanner_LEX_RETURN YY_AnsiCScanner_CLASS::YY_AnsiCScanner_LEX ( YY_AnsiCScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_AnsiCScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


/* % end of prolog */ 
#line 401 "//usr/local/lib/flexskel.cc"

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_AnsiCScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_AnsiCScanner_OFILE_DEFAULT;

	if ( YY_AnsiCScanner_CURRENT_BUFFER )
	    YY_AnsiCScanner_INIT_BUFFER( YY_AnsiCScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_AnsiCScanner_CURRENT_BUFFER = YY_AnsiCScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_AnsiCScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
#line 429 "//usr/local/lib/flexskel.cc"
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 340 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    ++yy_cp;
	    }
	while ( yy_current_state != 339 );
	yy_cp = yy_last_accepting_cpos;
	yy_current_state = yy_last_accepting_state;
#line 440 "//usr/local/lib/flexskel.cc"

yy_find_action:
/* % code to find the action number goes here */ 
	yy_act = yy_accept[yy_current_state];
#line 443 "//usr/local/lib/flexskel.cc"

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_AnsiCScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_AnsiCScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_AnsiCScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_AnsiCScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_AnsiCScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_AnsiCScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
	    case 0: /* must backtrack */
	    /* undo the effects of YY_DO_BEFORE_ACTION */
	    *yy_cp = yy_hold_char;
	    yy_cp = yy_last_accepting_cpos;
	    yy_current_state = yy_last_accepting_state;
	    goto yy_find_action;

case 1:
#line 57 "ansi-c.l"
{ count(); return AnsiCParser::PREINCLUDE; }
	YY_BREAK
case 2:
#line 58 "ansi-c.l"
{ count(); return AnsiCParser::PREDEFINE; }
	YY_BREAK
case 3:
#line 59 "ansi-c.l"
{ count(); return AnsiCParser::PREIF; }
	YY_BREAK
case 4:
#line 60 "ansi-c.l"
{ count(); return AnsiCParser::PREIFDEF; }
	YY_BREAK
case 5:
#line 61 "ansi-c.l"
{ count(); return AnsiCParser::PREENDIF; }
	YY_BREAK
case 6:
#line 62 "ansi-c.l"
{ count(); return AnsiCParser::PRELINE; }
	YY_BREAK
case 7:
#line 64 "ansi-c.l"
{ comment(); }
	YY_BREAK
case 8:
#line 66 "ansi-c.l"
{ count(); return AnsiCParser::AUTO; }
	YY_BREAK
case 9:
#line 67 "ansi-c.l"
{ count(); return AnsiCParser::BREAK; }
	YY_BREAK
case 10:
#line 68 "ansi-c.l"
{ count(); return AnsiCParser::CASE; }
	YY_BREAK
case 11:
#line 69 "ansi-c.l"
{ count(); return AnsiCParser::CHAR; }
	YY_BREAK
case 12:
#line 70 "ansi-c.l"
{ count(); return AnsiCParser::CONST; }
	YY_BREAK
case 13:
#line 71 "ansi-c.l"
{ count(); return AnsiCParser::CONTINUE; }
	YY_BREAK
case 14:
#line 72 "ansi-c.l"
{ count(); return AnsiCParser::DEFAULT; }
	YY_BREAK
case 15:
#line 73 "ansi-c.l"
{ count(); return AnsiCParser::DO; }
	YY_BREAK
case 16:
#line 74 "ansi-c.l"
{ count(); return AnsiCParser::DOUBLE; }
	YY_BREAK
case 17:
#line 75 "ansi-c.l"
{ count(); return AnsiCParser::ELSE; }
	YY_BREAK
case 18:
#line 76 "ansi-c.l"
{ count(); return AnsiCParser::ENUM; }
	YY_BREAK
case 19:
#line 77 "ansi-c.l"
{ count(); return AnsiCParser::EXTERN; }
	YY_BREAK
case 20:
#line 78 "ansi-c.l"
{ count(); return AnsiCParser::FLOAT; }
	YY_BREAK
case 21:
#line 79 "ansi-c.l"
{ count(); return AnsiCParser::FOR; }
	YY_BREAK
case 22:
#line 80 "ansi-c.l"
{ count(); return AnsiCParser::GOTO; }
	YY_BREAK
case 23:
#line 81 "ansi-c.l"
{ count(); return AnsiCParser::IF; }
	YY_BREAK
case 24:
#line 82 "ansi-c.l"
{ count(); return AnsiCParser::INT; }
	YY_BREAK
case 25:
#line 83 "ansi-c.l"
{ count(); return AnsiCParser::LONG; }
	YY_BREAK
case 26:
#line 84 "ansi-c.l"
{ count(); return AnsiCParser::REGISTER; }
	YY_BREAK
case 27:
#line 85 "ansi-c.l"
{ count(); return AnsiCParser::RETURN; }
	YY_BREAK
case 28:
#line 86 "ansi-c.l"
{ count(); return AnsiCParser::SHORT; }
	YY_BREAK
case 29:
#line 87 "ansi-c.l"
{ count(); return AnsiCParser::SIGNED; }
	YY_BREAK
case 30:
#line 88 "ansi-c.l"
{ count(); return AnsiCParser::SIZEOF; }
	YY_BREAK
case 31:
#line 89 "ansi-c.l"
{ count(); return AnsiCParser::NODECODE; }
	YY_BREAK
case 32:
#line 90 "ansi-c.l"
{ count(); return AnsiCParser::INCOMPLETE; }
	YY_BREAK
case 33:
#line 91 "ansi-c.l"
{ count(); return AnsiCParser::CDECL; }
	YY_BREAK
case 34:
#line 92 "ansi-c.l"
{ count(); return AnsiCParser::PASCAL; }
	YY_BREAK
case 35:
#line 93 "ansi-c.l"
{ count(); return AnsiCParser::PASCAL; }
	YY_BREAK
case 36:
#line 94 "ansi-c.l"
{ count(); return AnsiCParser::CUSTOM; }
	YY_BREAK
case 37:
#line 95 "ansi-c.l"
{ count(); return AnsiCParser::THISCALL;}
	YY_BREAK
case 38:
#line 96 "ansi-c.l"
{ count(); return AnsiCParser::PREFER; }
	YY_BREAK
case 39:
#line 97 "ansi-c.l"
{ count(); return AnsiCParser::WITHSTACK; }
	YY_BREAK
case 40:
#line 98 "ansi-c.l"
{ count(); return AnsiCParser::SYMBOLREF; }
	YY_BREAK
case 41:
#line 99 "ansi-c.l"
{ count(); return AnsiCParser::STATIC; }
	YY_BREAK
case 42:
#line 100 "ansi-c.l"
{ count(); return AnsiCParser::STRUCT; }
	YY_BREAK
case 43:
#line 101 "ansi-c.l"
{ count(); return AnsiCParser::SWITCH; }
	YY_BREAK
case 44:
#line 102 "ansi-c.l"
{ count(); return AnsiCParser::TYPEDEF; }
	YY_BREAK
case 45:
#line 103 "ansi-c.l"
{ count(); return AnsiCParser::UNION; }
	YY_BREAK
case 46:
#line 104 "ansi-c.l"
{ count(); return AnsiCParser::UNSIGNED; }
	YY_BREAK
case 47:
#line 105 "ansi-c.l"
{ count(); return AnsiCParser::VOID; }
	YY_BREAK
case 48:
#line 106 "ansi-c.l"
{ count(); return AnsiCParser::VOLATILE; }
	YY_BREAK
case 49:
#line 107 "ansi-c.l"
{ count(); return AnsiCParser::WHILE; }
	YY_BREAK
case 50:
#line 108 "ansi-c.l"
{ count(); return AnsiCParser::REGOF; }
	YY_BREAK
case 51:
#line 109 "ansi-c.l"
{ count(); return AnsiCParser::MEMOF; }
	YY_BREAK
case 52:
#line 111 "ansi-c.l"
{ count(); yylval.str = strdup(yytext); return check_type(); }
	YY_BREAK
case 53:
#line 113 "ansi-c.l"
{ count(); sscanf(yytext, "0x%x", &yylval.ival); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 54:
#line 114 "ansi-c.l"
{ count(); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 55:
#line 115 "ansi-c.l"
{ count(); sscanf(yytext, "%d", &yylval.ival); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 56:
#line 116 "ansi-c.l"
{ count(); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 57:
#line 118 "ansi-c.l"
{ count(); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 58:
#line 119 "ansi-c.l"
{ count(); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 59:
#line 120 "ansi-c.l"
{ count(); return AnsiCParser::CONSTANT; }
	YY_BREAK
case 60:
#line 122 "ansi-c.l"
{ count(); yylval.str = strdup(yytext); return AnsiCParser::STRING_LITERAL; }
	YY_BREAK
case 61:
#line 124 "ansi-c.l"
{ count(); return AnsiCParser::ELLIPSIS; }
	YY_BREAK
case 62:
#line 125 "ansi-c.l"
{ count(); return AnsiCParser::RIGHT_ASSIGN; }
	YY_BREAK
case 63:
#line 126 "ansi-c.l"
{ count(); return AnsiCParser::LEFT_ASSIGN; }
	YY_BREAK
case 64:
#line 127 "ansi-c.l"
{ count(); return AnsiCParser::ADD_ASSIGN; }
	YY_BREAK
case 65:
#line 128 "ansi-c.l"
{ count(); return AnsiCParser::SUB_ASSIGN; }
	YY_BREAK
case 66:
#line 129 "ansi-c.l"
{ count(); return AnsiCParser::MUL_ASSIGN; }
	YY_BREAK
case 67:
#line 130 "ansi-c.l"
{ count(); return AnsiCParser::DIV_ASSIGN; }
	YY_BREAK
case 68:
#line 131 "ansi-c.l"
{ count(); return AnsiCParser::MOD_ASSIGN; }
	YY_BREAK
case 69:
#line 132 "ansi-c.l"
{ count(); return AnsiCParser::AND_ASSIGN; }
	YY_BREAK
case 70:
#line 133 "ansi-c.l"
{ count(); return AnsiCParser::XOR_ASSIGN; }
	YY_BREAK
case 71:
#line 134 "ansi-c.l"
{ count(); return AnsiCParser::OR_ASSIGN; }
	YY_BREAK
case 72:
#line 135 "ansi-c.l"
{ count(); return AnsiCParser::RIGHT_OP; }
	YY_BREAK
case 73:
#line 136 "ansi-c.l"
{ count(); return AnsiCParser::LEFT_OP; }
	YY_BREAK
case 74:
#line 137 "ansi-c.l"
{ count(); return AnsiCParser::INC_OP; }
	YY_BREAK
case 75:
#line 138 "ansi-c.l"
{ count(); return AnsiCParser::DEC_OP; }
	YY_BREAK
case 76:
#line 139 "ansi-c.l"
{ count(); return AnsiCParser::PTR_OP; }
	YY_BREAK
case 77:
#line 140 "ansi-c.l"
{ count(); return AnsiCParser::AND_OP; }
	YY_BREAK
case 78:
#line 141 "ansi-c.l"
{ count(); return AnsiCParser::OR_OP; }
	YY_BREAK
case 79:
#line 142 "ansi-c.l"
{ count(); return AnsiCParser::LE_OP; }
	YY_BREAK
case 80:
#line 143 "ansi-c.l"
{ count(); return AnsiCParser::GE_OP; }
	YY_BREAK
case 81:
#line 144 "ansi-c.l"
{ count(); return AnsiCParser::EQ_OP; }
	YY_BREAK
case 82:
#line 145 "ansi-c.l"
{ count(); return AnsiCParser::NE_OP; }
	YY_BREAK
case 83:
#line 146 "ansi-c.l"
{ count(); return ';'; }
	YY_BREAK
case 84:
#line 147 "ansi-c.l"
{ count(); return '{'; }
	YY_BREAK
case 85:
#line 148 "ansi-c.l"
{ count(); return '}'; }
	YY_BREAK
case 86:
#line 149 "ansi-c.l"
{ count(); return ','; }
	YY_BREAK
case 87:
#line 150 "ansi-c.l"
{ count(); return ':'; }
	YY_BREAK
case 88:
#line 151 "ansi-c.l"
{ count(); return '='; }
	YY_BREAK
case 89:
#line 152 "ansi-c.l"
{ count(); return '('; }
	YY_BREAK
case 90:
#line 153 "ansi-c.l"
{ count(); return ')'; }
	YY_BREAK
case 91:
#line 154 "ansi-c.l"
{ count(); return '['; }
	YY_BREAK
case 92:
#line 155 "ansi-c.l"
{ count(); return ']'; }
	YY_BREAK
case 93:
#line 156 "ansi-c.l"
{ count(); return '.'; }
	YY_BREAK
case 94:
#line 157 "ansi-c.l"
{ count(); return '&'; }
	YY_BREAK
case 95:
#line 158 "ansi-c.l"
{ count(); return '!'; }
	YY_BREAK
case 96:
#line 159 "ansi-c.l"
{ count(); return '~'; }
	YY_BREAK
case 97:
#line 160 "ansi-c.l"
{ count(); return '-'; }
	YY_BREAK
case 98:
#line 161 "ansi-c.l"
{ count(); return '+'; }
	YY_BREAK
case 99:
#line 162 "ansi-c.l"
{ count(); return '*'; }
	YY_BREAK
case 100:
#line 163 "ansi-c.l"
{ count(); return '/'; }
	YY_BREAK
case 101:
#line 164 "ansi-c.l"
{ count(); return '%'; }
	YY_BREAK
case 102:
#line 165 "ansi-c.l"
{ count(); return '<'; }
	YY_BREAK
case 103:
#line 166 "ansi-c.l"
{ count(); return '>'; }
	YY_BREAK
case 104:
#line 167 "ansi-c.l"
{ count(); return '^'; }
	YY_BREAK
case 105:
#line 168 "ansi-c.l"
{ count(); return '|'; }
	YY_BREAK
case 106:
#line 169 "ansi-c.l"
{ count(); return '?'; }
	YY_BREAK
case 107:
#line 171 "ansi-c.l"
{ count(); }
	YY_BREAK
case 108:
#line 172 "ansi-c.l"
{ /* ignore bad characters */ }
	YY_BREAK
case 109:
#line 174 "ansi-c.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
    yyterminate();
#line 493 "//usr/local/lib/flexskel.cc"

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			    yy_cp = yy_last_accepting_cpos;
			    yy_current_state = yy_last_accepting_state;
#line 541 "//usr/local/lib/flexskel.cc"
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_AnsiCScanner_DEBUG != 0
#ifndef YY_AnsiCScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_AnsiCScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_AnsiCScanner_CHAR *dest = YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_AnsiCScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_AnsiCScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_AnsiCScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_AnsiCScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_AnsiCScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_AnsiCScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_AnsiCScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    register YY_CHAR *yy_bp = yy___text;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
#line 717 "//usr/local/lib/flexskel.cc"

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	if ( yy_accept[yy_current_state] )
	    {
	    yy_last_accepting_state = yy_current_state;
	    yy_last_accepting_cpos = yy_cp;
	    }
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 340 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
#line 721 "//usr/local/lib/flexskel.cc"
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_AnsiCScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 
    register YY_CHAR *yy_cp = yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
	{
	yy_last_accepting_state = yy_current_state;
	yy_last_accepting_cpos = yy_cp;
	}
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 340 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    yy_is_jam = (yy_current_state == 339);
#line 755 "//usr/local/lib/flexskel.cc"

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_AnsiCScanner_CHAR c, register YY_AnsiCScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_AnsiCScanner_CHAR c;
register YY_AnsiCScanner_CHAR *yy_bp;
#endif
#else
void YY_AnsiCScanner_CLASS::yyunput( YY_AnsiCScanner_CHAR c, YY_AnsiCScanner_CHAR *yy_bp )
#endif

    {
    register YY_AnsiCScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_AnsiCScanner_CHAR *dest =
	    &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[YY_AnsiCScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_AnsiCScanner_CHAR *source =
	    &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_AnsiCScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_AnsiCScanner_CLASS::input()
#endif
    {
    int c;
    YY_AnsiCScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_AnsiCScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_AnsiCScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_AnsiCScanner_RESTART( YY_AnsiCScanner_IFILE  *input_file )
#else
void YY_AnsiCScanner_RESTART( input_file )
YY_AnsiCScanner_IFILE  *input_file;
#endif
#else
void YY_AnsiCScanner_CLASS::YY_AnsiCScanner_RESTART ( YY_AnsiCScanner_IFILE  *input_file )
#endif

    {
    YY_AnsiCScanner_INIT_BUFFER( YY_AnsiCScanner_CURRENT_BUFFER, input_file );
    YY_AnsiCScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_AnsiCScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_AnsiCScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_AnsiCScanner_CLASS::YY_AnsiCScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_AnsiCScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_AnsiCScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_AnsiCScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_AnsiCScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_AnsiCScanner_CURRENT_BUFFER = new_buffer;
    YY_AnsiCScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_AnsiCScanner_LOAD_BUFFER_STATE( void )
#else
void YY_AnsiCScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_AnsiCScanner_CLASS::YY_AnsiCScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_AnsiCScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_AnsiCScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_AnsiCScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_AnsiCScanner_CREATE_BUFFER( YY_AnsiCScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_AnsiCScanner_CREATE_BUFFER( file, size )
YY_AnsiCScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_AnsiCScanner_CLASS::YY_AnsiCScanner_CREATE_BUFFER( YY_AnsiCScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_AnsiCScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_AnsiCScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_AnsiCScanner_CREATE_BUFFER()" );

    YY_AnsiCScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_AnsiCScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_AnsiCScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_AnsiCScanner_CLASS::YY_AnsiCScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_AnsiCScanner_CURRENT_BUFFER )
	YY_AnsiCScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_AnsiCScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_AnsiCScanner_IFILE  *file )
#else
void YY_AnsiCScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_AnsiCScanner_IFILE  *file;
#endif
#else
void YY_AnsiCScanner_CLASS::YY_AnsiCScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_AnsiCScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }
#line 174 "ansi-c.l"


void AnsiCScanner::comment()
{
	char c, c1;

loop:
	while ((c = input()) != '*' && c != 0)
		/*putchar(c)*/;

	if ((c1 = input()) != '/' && c != 0)
	{
		/*unput(c1);*/
		goto loop;
	}

	if (c != 0)
		/*putchar(c1)*/;
}

void AnsiCScanner::count()
{
	int i;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
			column = 0;
		else if (yytext[i] == '\t')
			column += 8 - (column % 8);
		else
			column++;

        strcat(lineBuf, yytext);
        if (strchr(lineBuf, '\n')) {
            char buf[MAX_LINE];
            strcpy(buf, lineBuf);
            strcpy(lineBuf, strchr(buf, '\n')+1);
            theLine++;
        }
}


int AnsiCScanner::check_type()
{
/*
* pseudo code --- this is what it should check
*
*	if (yytext == type_name)
*		return AnsiCParser::TYPE_NAME;
*
*	return AnsiCParser::IDENTIFIER;
*/

/*
*	it actually will only return IDENTIFIER
*/
	return AnsiCParser::IDENTIFIER;
}



