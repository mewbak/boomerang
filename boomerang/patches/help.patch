--- orgboomerang/boomerang.cpp	Mon Jan 24 05:54:36 2005
+++ boomerang/boomerang.cpp	Thu Jan 27 13:38:44 2005
@@ -54,75 +54,88 @@
 }
 
 void Boomerang::usage() {
-	std::cout << "usage: boomerang [ switches ] <program>" << std::endl;
+	std::cout << "Usage: boomerang [ switches ] <program>" << std::endl;
 	std::cout << "boomerang -h for switch help" << std::endl;
 	exit(1);
 }
 
 void Boomerang::helpcmd() {
 	std::cout << "Available commands (for use with -k):\n";
-	std::cout << "\tdecode: loads and decodes the specified binary.\n";
-	std::cout << "\tdecompile [proc]: decompiles the program or specified proc.\n";
-	std::cout << "\tcodegen [cluster]: generates code for the program or a specified cluster.\n";
-	std::cout << "\tmove proc <proc> <cluster>: moves the specified proc to the specified cluster.\n";
-	std::cout << "\tmove cluster <cluster> <parent>: moves the specified cluster to the specified parent cluster.\n";
-	std::cout << "\tadd cluster <cluster> [parent]: adds a new cluster to the root/specified cluster.\n";
-	std::cout << "\tdelete cluster <cluster>: deletes an empty cluster.\n";
-	std::cout << "\trename proc <proc> <newname>: renames the specified proc.\n";
-	std::cout << "\trename cluster <cluster> <newname>: renames the specified cluster.\n";
-	std::cout << "\tinfo prog: print info about the program.\n";
-	std::cout << "\tinfo cluster <cluster>: print info about a cluster.\n";
-	std::cout << "\tinfo proc <proc>: print info about a proc.\n";
-	std::cout << "\tprint <proc>: print the RTL for a proc.\n";
-	std::cout << "\thelp: this help.\n";
-	std::cout << "\texit: quit the shell.\n";
+	std::cout << "  decode                             : Loads and decodes the specified binary.\n";
+	std::cout << "  decompile [proc]                   : Decompiles the program or specified proc.\n";
+	std::cout << "  codegen [cluster]                  : Generates code for the program or a\n";
+	std::cout << "                                       specified cluster.\n";
+	std::cout << "  move proc <proc> <cluster>         : Moves the specified proc to the specified\n";
+	std::cout << "                                       cluster.\n";
+	std::cout << "  move cluster <cluster> <parent>    : Moves the specified cluster to the\n";
+	std::cout << "                                       specified parent cluster.\n";
+	std::cout << "  add cluster <cluster> [parent]     : Adds a new cluster to the root/specified\n";
+	std::cout << "                                       cluster.\n";
+	std::cout << "  delete cluster <cluster>           : Deletes an empty cluster.\n";
+	std::cout << "  rename proc <proc> <newname>       : Renames the specified proc.\n";
+	std::cout << "  rename cluster <cluster> <newname> : Renames the specified cluster.\n";
+	std::cout << "  info prog                          : Print info about the program.\n";
+	std::cout << "  info cluster <cluster>             : Print info about a cluster.\n";
+	std::cout << "  info proc <proc>                   : Print info about a proc.\n";
+	std::cout << "  print <proc>                       : Print the RTL for a proc.\n";
+	std::cout << "  help                               : This help.\n";
+	std::cout << "  exit                               : Quit the shell.\n";
 }
 
 void Boomerang::help() {
-	std::cout << "--: no effect (used for testing)\n";
-	std::cout << "-da: Debug - print AST before code generation\n";
-	std::cout << "-dc: debug - Debug switch (Case) analysis\n";
-	std::cout << "-dd: debug - Debug Decoder to stdout\n";
-	std::cout << "-dg: debug - Debug code Generation\n";
-	std::cout << "-dl: debug - Debug Liveness (from SSA) code\n";
-	std::cout << "-dp: debug - Debug proof engine\n";
-	std::cout << "-dr: debug - Debug Removing unused returns and parameters\n";
-	std::cout << "-dt: debug - Debug Type analysis\n";
-	std::cout << "-du: debug - Debug removing Unused statements\n";
-	std::cout << "-e <addr>: decode the procedure beginning at addr\n";
-	std::cout << "-E <addr>: decode ONLY the procedure at addr\n";
-	std::cout << "-g <dot file>: Generate a dotty graph of the program's CFG\n";
-	std::cout << "-h: this Help\n";
-	std::cout << "-ic: decode through type 0 Indirect Calls\n";
-	std::cout << "-m <num>: max Memory depth\n";
-	std::cout << "-nb: No simplifications for Branches\n";
-	std::cout << "-nd: No (reduced) Dataflow analysis\n";
-	std::cout << "-nD: No Decompilation (at all!)\n";
-	std::cout << "-nl: No creation of Local variables\n";
-	std::cout << "-nL: No Limiting of propagations using the self-referencing heuristic\n";
-	std::cout << "-nm: don't decode the 'main' procedure\n";
-	std::cout << "-nn: No removal of Null and unused statements\n";
-	std::cout << "-np: No replacement of expressions with Parameter names\n";
-	std::cout << "-nP: No Promotion of signatures (other than main/WinMain/DriverMain)\n";
-	std::cout << "-nr: No Removal of unnedded labels\n";
-	std::cout << "-nR: No removal of unused Returns\n";
-	std::cout << "-o <Output path>: where to generate output (defaults to ./output/)\n";
-	std::cout << "-O: handle Overlapped registers (for X86 only)\n";
-	std::cout << "-p <num>: only do num Propogations\n";
-//	std::cout << "-pa: only propagate if can propagate to all\n";
-	std::cout << "-r: print Rtl for each proc to log before code generation\n";
-	std::cout << "-s <addr> <name>: define a Symbol\n";
-	std::cout << "-sf <filename>: read a Symbol/signature File\n";
-	std::cout << "-t: Trace every instruction decoded\n";
-	std::cout << "-Tc: use old constraint-based Type analysis\n";
-	std::cout << "-Td: use Data-flow-based type analysis\n";
-	std::cout << "-x: dump Xml files\n";
-	std::cout << "-LD: Load before Decompile (<program> becomes xml input file)\n";
-	std::cout << "-SD: Save before Decompile\n";
-	std::cout << "-k: command mode, for available commands see -h cmd\n";
-	std::cout << "-P <path>: Path to Boomerang files, defaults to where you run Boomerang from\n";
-    std::cout << "-f: do a fast x86 specific decompilation\n";
-	std::cout << "-v: Verbose\n";
+	std::cout << "Symbols\n";
+	std::cout << "  -s <addr> <name> : Define a symbol\n";
+	std::cout << "  -sf <filename>   : Read a symbol/signature file\n";
+	std::cout << "Decoding/decompilation options\n";
+	std::cout << "  -e <addr>        : Decode the procedure beginning at addr\n";
+	std::cout << "  -E <addr>        : Decode ONLY the procedure at addr\n";
+	std::cout << "  -ic              : Decode through type 0 Indirect Calls\n";
+	std::cout << "  -t               : Trace every instruction decoded\n";
+	std::cout << "  -Tc              : Use old constraint-based type analysis\n";
+	std::cout << "  -Td              : Use data-flow-based type analysis\n";
+    std::cout << "  -f               : Fast x86 specific decompilation\n";
+	std::cout << "  -O               : Handle Overlapped registers (for X86 only)\n";
+	std::cout << "  -LD              : Load before decompile (<program> becomes xml input file)\n";
+	std::cout << "  -SD              : Save before decompile\n";
+//	std::cout << "  -pa              : only propagate if can propagate to all\n";
+	std::cout << "Output\n";
+	std::cout << "  -v               : Verbose\n";
+	std::cout << "  -h               : This help\n";
+	std::cout << "  -o <output path> : Where to generate output (defaults to ./output/)\n";
+	std::cout << "  -x               : Dump XML files\n";
+	std::cout << "  -r               : Print RTL for each proc to log before code generation\n";
+	std::cout << "  -g <dot file>    : Generate a dotty graph of the program's CFG\n";
+	std::cout << "Misc.\n";
+	std::cout << "  -k               : Command mode, for available commands see -h cmd\n";
+	std::cout << "  -P <path>        : Path to Boomerang files, defaults to where you run\n";
+	std::cout << "                     Boomerang from\n";
+	std::cout << "  --               : No effect (used for testing)\n";
+	std::cout << "Debug\n";
+	std::cout << "  -da              : Print AST before code generation\n";
+	std::cout << "  -dc              : Debug switch (Case) analysis\n";
+	std::cout << "  -dd              : Debug decoder to stdout\n";
+	std::cout << "  -dg              : Debug code Generation\n";
+	std::cout << "  -dl              : Debug liveness (from SSA) code\n";
+	std::cout << "  -dp              : Debug proof engine\n";
+	std::cout << "  -dr              : Debug removing unused returns and parameters\n";
+	std::cout << "  -dt              : Debug type analysis\n";
+	std::cout << "  -du              : Debug removing unused statements\n";
+	std::cout << "Restrictions\n";
+	std::cout << "  -nb              : No simplifications for branches\n";
+	std::cout << "  -nd              : No (reduced) dataflow analysis\n";
+	std::cout << "  -nD              : No decompilation (at all!)\n";
+	std::cout << "  -nl              : No creation of local variables\n";
+	std::cout << "  -nL              : No limiting of propagations using the self-referencing\n";
+	std::cout << "                     heuristic\n";
+	std::cout << "  -nm              : No decoding of the 'main' procedure\n";
+	std::cout << "  -nn              : No removal of NULL and unused statements\n";
+	std::cout << "  -np              : No replacement of expressions with Parameter names\n";
+	std::cout << "  -nP              : No promotion of signatures (other than main/WinMain/\n";
+	std::cout << "                     DriverMain)\n";
+	std::cout << "  -nr              : No removal of unneeded labels\n";
+	std::cout << "  -nR              : No removal of unused Returns\n";
+	std::cout << "  -p <num>         : Only do num propagations\n";
+	std::cout << "  -m <num>         : Max memory depth\n";
 	exit(1);
 }
 		
