? main.cpp
? projects
Index: boomerang.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/boomerang.cpp,v
retrieving revision 1.62
diff -u -r1.62 boomerang.cpp
--- boomerang.cpp	28 Jan 2004 07:41:47 -0000	1.62
+++ boomerang.cpp	29 Jan 2004 18:34:02 -0000
@@ -6,7 +6,10 @@
 #include "hllcode.h"
 #include "codegen/chllcode.h"
 #include "boomerang.h"
+
+#ifndef _MSC_VER
 #include "gc.h"
+#endif
 
 Boomerang *Boomerang::boomerang = NULL;
 
Index: db/cfg.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/db/cfg.cpp,v
retrieving revision 1.63
diff -u -r1.63 cfg.cpp
--- db/cfg.cpp	14 Jan 2004 07:24:51 -0000	1.63
+++ db/cfg.cpp	29 Jan 2004 18:34:03 -0000
@@ -690,7 +690,7 @@
       it++)
         m_vectorBB[(*it)->m_DFTfirst-1] = *it;
     m_listBB.clear();
-    for (int i = 0; i < m_vectorBB.size(); i++)
+    for (size_t i = 0; i < m_vectorBB.size(); i++)
         m_listBB.push_back(m_vectorBB[i]);
 #endif
 }
@@ -710,7 +710,7 @@
     for (std::list<PBB>::iterator it = m_listBB.begin(); it != m_listBB.end(); it++)
         m_vectorBB[(*it)->m_DFTlast-1] = *it;
     m_listBB.clear();
-    for (int i = 0; i < m_vectorBB.size(); i++)
+    for (size_t i = 0; i < m_vectorBB.size(); i++)
         m_listBB.push_back(m_vectorBB[i]);
 #endif
 }
@@ -1901,7 +1901,6 @@
     of << "}\n";
 
     // Now the edges
-    std::list<PBB>::iterator it;
     for (it = m_listBB.begin(); it != m_listBB.end(); it++) {
         std::vector<PBB>& outEdges = (*it)->getOutEdges();
         for (unsigned int j = 0; j < outEdges.size(); j++) {
Index: db/exp.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/db/exp.cpp,v
retrieving revision 1.128
diff -u -r1.128 exp.cpp
--- db/exp.cpp	29 Jan 2004 00:49:49 -0000	1.128
+++ db/exp.cpp	29 Jan 2004 18:34:04 -0000
@@ -66,7 +66,7 @@
 // Derived class constructors
 
 Const::Const(int i)     : Exp(opIntConst),    conscript(0) {u.i = i;}
-Const::Const(long long ll): Exp(opLongConst), conscript(0) {u.ll= ll;}
+Const::Const(QWord ll): Exp(opLongConst), conscript(0) {u.ll= ll;}
 Const::Const(double d)  : Exp(opFltConst),    conscript(0) {u.d = d;}
 Const::Const(char* p)   : Exp(opStrConst),    conscript(0) {u.p = p;}
 Const::Const(Proc* p)   : Exp(opFuncConst),   conscript(0) {u.pp = p;}
Index: db/managed.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/db/managed.cpp,v
retrieving revision 1.6
diff -u -r1.6 managed.cpp
--- db/managed.cpp	23 Oct 2003 04:44:27 -0000	1.6
+++ db/managed.cpp	29 Jan 2004 18:34:04 -0000
@@ -170,8 +170,7 @@
 bool StatementSet::operator<(const StatementSet& o) const {
     if (sset.size() < o.sset.size()) return true;
     if (sset.size() > o.sset.size()) return false;
-    iterator it1;
-    std::set<Statement*>::const_iterator it2;
+    std::set<Statement*>::const_iterator it1, it2;
     for (it1 = sset.begin(), it2 = o.sset.begin(); it1 != sset.end();
       it1++, it2++) {
         if (*it1 < *it2) return true;
Index: db/proc.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/db/proc.cpp,v
retrieving revision 1.166
diff -u -r1.166 proc.cpp
--- db/proc.cpp	29 Jan 2004 00:49:49 -0000	1.166
+++ db/proc.cpp	29 Jan 2004 18:34:04 -0000
@@ -1640,7 +1640,8 @@
     // find parameters that are referenced (ignore calls to this)
     int nparams = signature->getNumParams() + signature->getNumImplicitParams();
     std::vector<Exp*> params;
-    bool referenced[nparams];
+    bool referenced[32];
+		assert(nparams < sizeof(referenced)/sizeof(bool));
     for (int i = 0; i < signature->getNumParams(); i++) {
         referenced[i] = false;
         params.push_back(signature->getParamExp(i)->clone()->
@@ -1976,7 +1977,7 @@
     StatementList::iterator it;
     for (it = stmts.begin(); it != stmts.end(); it++) {
         Statement* s = *it;
-        for (std::map<Exp*, Exp*>::iterator it1 = symbolMap.begin();
+        for (std::map<Exp*, Exp*,lessExpStar>::iterator it1 = symbolMap.begin();
           it1 != symbolMap.end(); it1++) {
             bool ch = s->searchAndReplace((*it1).first, (*it1).second);
             if (ch && VERBOSE) {
Index: include/BinaryFile.h
===================================================================
RCS file: /cvsroot/boomerang/boomerang/include/BinaryFile.h,v
retrieving revision 1.9
diff -u -r1.9 BinaryFile.h
--- include/BinaryFile.h	17 Sep 2003 02:11:49 -0000	1.9
+++ include/BinaryFile.h	29 Jan 2004 18:34:05 -0000
@@ -170,7 +170,7 @@
     // Read 4 bytes from given native address a; considers endianness
     virtual int readNative4(ADDRESS a) {return 0;}
     // Read 8 bytes from given native address a; considers endianness
-    virtual long long readNative8(ADDRESS a) {return 0;}
+    virtual QWord readNative8(ADDRESS a) {return 0;}
     // Read 4 bytes as a float; consider endianness
     virtual float readNativeFloat4(ADDRESS a) {return 0.;}
     // Read 8 bytes as a float; consider endianness
Index: include/exp.h
===================================================================
RCS file: /cvsroot/boomerang/boomerang/include/exp.h,v
retrieving revision 1.91
diff -u -r1.91 exp.h
--- include/exp.h	29 Jan 2004 13:09:33 -0000	1.91
+++ include/exp.h	29 Jan 2004 18:34:05 -0000
@@ -337,7 +337,7 @@
         // Note: although we have i and a as unions, both often use the same
         // operator (opIntConst). There is no opCodeAddr any more.
         ADDRESS a;      // void* conflated with unsigned int: needs fixing
-        long long ll;   // 64 bit integer
+        QWord ll;   // 64 bit integer
         double d;       // Double precision float
         char* p;        // Pointer to string
                         // Don't store string: function could be renamed
@@ -347,7 +347,7 @@
 public:
     // Special constructors overloaded for the various constants
             Const(int i);
-            Const(long long ll);
+            Const(QWord ll);
             Const(ADDRESS a);
             Const(double d);
             Const(char* p);
@@ -367,7 +367,7 @@
 
     // Get the constant
     int     getInt() {return u.i;}
-  long long getLong(){return u.ll;}
+		QWord		getLong(){return u.ll;}
     double  getFlt() {return u.d;}
     char*   getStr() {return u.p;}
     ADDRESS getAddr() {return u.a;}
@@ -375,7 +375,7 @@
 
     // Set the constant
     void setInt(int i)      {u.i = i;}
-    void setLong(long long ll) {u.ll = ll;}
+    void setLong(QWord ll) {u.ll = ll;}
     void setFlt(double d)   {u.d = d;}
     void setStr(char* p)    {u.p = p;}
     void setAddr(ADDRESS a) {u.a = a;}
Index: include/prog.h
===================================================================
RCS file: /cvsroot/boomerang/boomerang/include/prog.h,v
retrieving revision 1.51
diff -u -r1.51 prog.h
--- include/prog.h	20 Jan 2004 02:47:55 -0000	1.51
+++ include/prog.h	29 Jan 2004 18:34:05 -0000
@@ -251,7 +251,7 @@
     int     readNative4(ADDRESS a) {return pBF->readNative4(a);}
     float   readNativeFloat4(ADDRESS a) {return pBF->readNativeFloat4(a);}
     double  readNativeFloat8(ADDRESS a) {return pBF->readNativeFloat8(a);}
-    long long readNative8(ADDRESS a) {return pBF->readNative8(a);}
+    QWord		readNative8(ADDRESS a) {return pBF->readNative8(a);}
     bool processProc(int addr, UserProc* proc)  // Decode a proc
         { std::ofstream os;
           return pFE->processProc((unsigned)addr, proc, os);}
Index: include/types.h
===================================================================
RCS file: /cvsroot/boomerang/boomerang/include/types.h,v
retrieving revision 1.3
diff -u -r1.3 types.h
--- include/types.h	29 Jul 2003 09:15:49 -0000	1.3
+++ include/types.h	29 Jan 2004 18:34:05 -0000
@@ -9,3 +9,8 @@
 
 #define NO_ADDRESS ((ADDRESS)-1)  // For invalid ADDRESSes
 
+#ifndef _MSC_VER
+typedef long unsigned long QWord;	// 64 bits
+#else
+typedef unsigned __int64   QWord;		
+#endif
Index: loader/BinaryFile.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/loader/BinaryFile.cpp,v
retrieving revision 1.4
diff -u -r1.4 BinaryFile.cpp
--- loader/BinaryFile.cpp	4 Oct 2002 02:52:01 -0000	1.4
+++ loader/BinaryFile.cpp	29 Jan 2004 18:34:05 -0000
@@ -41,6 +41,7 @@
 #include "HpSomBinaryFile.h"
 #include "ExeBinaryFile.h"
 #include <stdio.h>
+#include <assert.h>
 #ifndef WIN32
 #include <dlfcn.h>
 #endif
Index: loader/Win32BinaryFile.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/loader/Win32BinaryFile.cpp,v
retrieving revision 1.5
diff -u -r1.5 Win32BinaryFile.cpp
--- loader/Win32BinaryFile.cpp	16 Dec 2003 12:02:45 -0000	1.5
+++ loader/Win32BinaryFile.cpp	29 Jan 2004 18:34:06 -0000
@@ -50,7 +50,7 @@
 }
 
 bool Win32BinaryFile::Open(const char* sName) {
-    return Load(sName);
+    return Load(sName) != 0;
 }
 
 void Win32BinaryFile::Close() {
@@ -317,7 +317,7 @@
 }
 
 // Read 8 bytes from given native address
-long long Win32BinaryFile::readNative8(ADDRESS nat) {
+QWord Win32BinaryFile::readNative8(ADDRESS nat) {
     int raw[2];
 #ifdef WORDS_BIGENDIAN      // This tests the  host  machine
     // Source and host are different endianness
@@ -328,7 +328,7 @@
     raw[0] = readNative4(nat);
     raw[1] = readNative4(nat+4);
 #endif
-    return *(long long*)raw;
+    return *(QWord*)raw;
 }
 
 // Read 4 bytes as a float
@@ -379,7 +379,7 @@
 
 bool Win32BinaryFile::isLibrary() const
 {
-    return ( m_pPEHeader->Flags & 0x2000 != 0 );
+    return ( (m_pPEHeader->Flags & 0x2000) != 0 );
 }
 
 ADDRESS Win32BinaryFile::getImageBase()
Index: loader/Win32BinaryFile.h
===================================================================
RCS file: /cvsroot/boomerang/boomerang/loader/Win32BinaryFile.h,v
retrieving revision 1.5
diff -u -r1.5 Win32BinaryFile.h
--- loader/Win32BinaryFile.h	17 Sep 2003 02:11:49 -0000	1.5
+++ loader/Win32BinaryFile.h	29 Jan 2004 18:34:06 -0000
@@ -181,7 +181,7 @@
 
 virtual int readNative2(ADDRESS a);         // Read 2 bytes from native addr
 virtual int readNative4(ADDRESS a);         // Read 4 bytes from native addr
-virtual long long readNative8(ADDRESS a);   // Read 8 bytes from native addr
+virtual QWord readNative8(ADDRESS a);   // Read 8 bytes from native addr
 virtual float readNativeFloat4(ADDRESS a);  // Read 4 bytes as float
 virtual double readNativeFloat8(ADDRESS a); // Read 8 bytes as float
 
Index: util/util.cpp
===================================================================
RCS file: /cvsroot/boomerang/boomerang/util/util.cpp,v
retrieving revision 1.10
diff -u -r1.10 util.cpp
--- util/util.cpp	9 Jan 2004 07:11:06 -0000	1.10
+++ util/util.cpp	29 Jan 2004 18:34:07 -0000
@@ -45,7 +45,14 @@
 #include <fstream>
 #include <stdio.h>
 #include "util.h"
+
+#ifndef _MSC_VER
 #include <unistd.h>
+#define _FLOCK_
+#else
+#include <io.h>
+#endif
+
 #include <fcntl.h>
 #include <iomanip>          // For setw
 
@@ -161,43 +168,41 @@
 
 int lockFileRead(const char *fname)
 {
+    int fd = open("filename", O_RDONLY);  /* get the file descriptor */
+#ifdef _FLOCK_
     struct flock fl;
-    int fd;
-
     fl.l_type   = F_RDLCK;  /* F_RDLCK, F_WRLCK, F_UNLCK    */
     fl.l_whence = SEEK_SET; /* SEEK_SET, SEEK_CUR, SEEK_END */
     fl.l_start  = 0;        /* Offset from l_whence         */
     fl.l_len    = 0;        /* length, 0 = to EOF           */
     fl.l_pid    = getpid(); /* our PID                      */
-
-    fd = open("filename", O_RDONLY);  /* get the file descriptor */
     fcntl(fd, F_SETLKW, &fl);  /* set the lock, waiting if necessary */
-
+#endif
     return fd;
 }
 
 int lockFileWrite(const char *fname)
 {
+    int fd = open("filename", O_WRONLY);  /* get the file descriptor */
+#ifdef _FLOCK_
     struct flock fl;
-    int fd;
-
     fl.l_type   = F_WRLCK;  /* F_RDLCK, F_WRLCK, F_UNLCK    */
     fl.l_whence = SEEK_SET; /* SEEK_SET, SEEK_CUR, SEEK_END */
     fl.l_start  = 0;        /* Offset from l_whence         */
     fl.l_len    = 0;        /* length, 0 = to EOF           */
     fl.l_pid    = getpid(); /* our PID                      */
-
-    fd = open("filename", O_WRONLY);  /* get the file descriptor */
     fcntl(fd, F_SETLKW, &fl);  /* set the lock, waiting if necessary */
-
+#endif
     return fd;
 }
 
 void unlockFile(int fd)
 {
+#ifdef _FLOCK_
     struct flock fl;
     fl.l_type   = F_UNLCK;  /* tell it to unlock the region */
     fcntl(fd, F_SETLK, &fl); /* set the region to unlocked */
+#endif
     close(fd);
 }
 
